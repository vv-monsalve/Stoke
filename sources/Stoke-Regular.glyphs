{
.appVersion = "3418";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "STC ";
},
{
name = panose;
value = (
2,
3,
5,
2,
7,
8,
0,
3,
3,
3
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
7,
29,
31,
33,
35,
38,
45,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
uni0001,
uni0002,
uni0003,
uni0004,
uni0005,
uni0006,
uni0007,
uni0008,
uni0009,
uni0010,
uni0011,
uni0012,
uni0013,
uni0014,
uni0015,
uni0016,
uni0017,
uni0018,
uni0019,
space,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
nonbreakingspace,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
twosuperior,
threesuperior,
acute,
mu,
paragraph,
periodcentered,
cedilla,
onesuperior,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Gcommaaccent,
gcommaaccent,
Hcircumflex,
hcircumflex,
Hbar,
hbar,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
IJ,
ij,
Jcircumflex,
jcircumflex,
Kcommaaccent,
kcommaaccent,
kgreenlandic,
Lacute,
lacute,
Lcommaaccent,
lcommaaccent,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
Ncommaaccent,
ncommaaccent,
Ncaron,
ncaron,
Eng,
eng,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
Rcommaaccent,
rcommaaccent,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scedilla,
scedilla,
Scaron,
scaron,
Tcommaaccent,
tcommaaccent,
Tcaron,
tcaron,
Tbar,
tbar,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
florin,
AEacute,
aeacute,
Scommaaccent,
scommaaccent,
dotlessj,
circumflex,
caron,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Delta,
Omega,
pi,
uni1E02,
uni1E03,
uni1E0A,
uni1E0B,
uni1E1E,
uni1E1F,
uni1E40,
uni1E41,
uni1E56,
uni1E57,
uni1E60,
uni1E61,
uni1E6A,
uni1E6B,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
trademark,
partialdiff,
product,
summation,
minus,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
commaaccent,
ff,
fi,
fl,
tilde.cap,
dieresis.cap,
ring.cap,
grave.cap,
acute.cap,
caron.cap,
circumflex.cap,
hungarumlaut.cap,
breve.cap,
dotaccent.cap,
macron.cap,
caronvertical,
.ttfautohint
);
}
);
date = "2012-07-12 02:45:25 +0000";
familyName = Stoke;
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 2030;
},
{
name = typoDescender;
value = -530;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 2030;
},
{
name = winDescent;
value = 530;
},
{
name = hheaAscender;
value = 2030;
},
{
name = hheaDescender;
value = -530;
},
{
name = strikeoutPosition;
value = 512;
},
{
name = strikeoutSize;
value = 137;
},
{
name = underlinePosition;
value = -115;
},
{
name = underlineThickness;
value = 137;
},
{
name = "prep Table Assembly";
value = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
SWAP[ ]	/* SwapTopStack */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 1 value pushed */
21
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
40
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
2
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
10 11 3 2
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 4 values pushed */
12 17 3 2
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 4 values pushed */
18 23 3 2
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
4 40 7
RCVT[ ]	/* ReadCVT */
GT[ ]	/* GreaterThan */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
12 17 4 2
CALL[ ]	/* CallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
5 0
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 1 value pushed */
4
RCVT[ ]	/* ReadCVT */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
22
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 2 values pushed */
6 4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 5
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
9 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 4 values pushed */
11 11 1 0
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
7 2
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 4 values pushed */
11 11 1 0
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
7 2
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
11
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
18
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
10
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
3
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
15 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
3 32 4 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
3 38 4 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
17
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
17
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
18
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
11
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
3 32 4 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
3 38 4 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
34
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
11
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
58
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    249,
    151,
    249,
    252,
    151,
    152,
    1592,
    \"-19\",
    1743,
    1053,
    \"-20\",
    \"-512\",
    1625,
    \"-19\",
    1743,
    1055,
    \"-20\",
    \"-512\"
)";
}
);
id = m01;
metricValues = (
{
pos = 2030;
},
{
pos = 683;
},
{
pos = 479;
},
{
},
{
pos = -530;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1359,0,l),
(1359,1308,l),
(166,1308,l),
(166,0,l)
);
},
{
closed = 1;
nodes = (
(334,981,l),
(426,1072,l),
(763,734,l),
(1091,1063,l),
(1180,975,l),
(851,646,l),
(1188,308,l),
(1096,217,l),
(760,554,l),
(431,226,l),
(342,314,o),
(342,314,q),
(671,643,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
14 8 0 2 2 13
CALL[ ]	/* CallFunction */";
};
width = 1528;
}
);
note = .notdef;
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = .null;
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 0;
}
);
note = CR;
unicode = 13;
},
{
glyphname = uni0001;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0001;
unicode = 1;
},
{
glyphname = uni0002;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0002;
unicode = 2;
},
{
glyphname = uni0003;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0003;
unicode = 3;
},
{
glyphname = uni0004;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0004;
unicode = 4;
},
{
glyphname = uni0005;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0005;
unicode = 5;
},
{
glyphname = uni0006;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0006;
unicode = 6;
},
{
glyphname = uni0007;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0007;
unicode = 7;
},
{
glyphname = uni0008;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0008;
unicode = 8;
},
{
glyphname = uni0009;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0009;
unicode = 9;
},
{
glyphname = uni0010;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0010;
unicode = 16;
},
{
glyphname = uni0011;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0011;
unicode = 17;
},
{
glyphname = uni0012;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0012;
unicode = 18;
},
{
glyphname = uni0013;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0013;
unicode = 19;
},
{
glyphname = uni0014;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0014;
unicode = 20;
},
{
glyphname = uni0015;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0015;
unicode = 21;
},
{
glyphname = uni0016;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0016;
unicode = 22;
},
{
glyphname = uni0017;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0017;
unicode = 23;
},
{
glyphname = uni0018;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0018;
unicode = 24;
},
{
glyphname = uni0019;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0019;
unicode = 25;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 684;
}
);
note = space;
unicode = 32;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,1587,l),
(170,1587,o),
(170,1547,qs),
(170,1520,o),
(190,1414,o),
(198,1359,qs),
(220,1198,ls),
(235,1093,o),
(273,755,qs),
(282,675,o),
(295,543,o),
(317,471,o),
(365,471,o),
(388,543,o),
(402,678,o),
(412,762,qs),
(453,1110,ls),
(465,1203,o),
(488,1375,qs),
(496,1427,o),
(514,1522,o),
(514,1547,qs),
(514,1587,o),
(472,1587,q),
(343,1579,l)
);
},
{
closed = 1;
nodes = (
(305,-24,o),
(404,-24,o),
(446,14,qs),
(467,33,o),
(491,84,o),
(491,172,o),
(455,216,qs),
(437,237,o),
(382,265,o),
(280,265,o),
(238,220,qs),
(218,200,o),
(196,146,o),
(196,94,o),
(213,44,o),
(249,3,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 39 38 31 30 12 11 0 24 1 22 5 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 16 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 16 3 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (173,936);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (-41,0);
ref = quotesingle;
},
{
alignment = -1;
pos = (392,0);
ref = quotesingle;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
29 28 21 20 14 13 6 5 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 16 values pushed */
3 1 1 1 0 1 0 39 2 1 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,20,o),
(439,49,qs),
(545,508,l),
(882,508,l),
(802,166,ls),
(794,134,o),
(790,114,qs),
(784,80,ls),
(781,67,o),
(780,53,o),
(780,21,o),
(816,-24,o),
(882,-24,o),
(927,20,o),
(935,49,qs),
(1041,508,l),
(1248,508,ls),
(1283,508,o),
(1334,548,o),
(1334,619,o),
(1281,657,o),
(1246,657,qs),
(1075,657,l),
(1139,930,l),
(1349,930,ls),
(1384,930,o),
(1435,970,o),
(1435,1042,o),
(1382,1079,o),
(1347,1079,qs),
(1173,1079,l),
(1256,1435,ls),
(1268,1493,o),
(1268,1532,qs),
(1268,1552,o),
(1228,1587,o),
(1202,1587,qs),
(1133,1587,o),
(1102,1445,qs),
(1016,1079,l),
(679,1079,l),
(761,1435,ls),
(773,1493,o),
(773,1532,qs),
(773,1552,o),
(733,1587,o),
(690,1587,o),
(676,1580,qs),
(635,1559,o),
(607,1445,qs),
(521,1079,l),
(265,1079,ls),
(231,1079,o),
(177,1042,o),
(177,970,o),
(229,930,o),
(263,930,qs),
(486,930,l),
(422,657,l),
(175,657,ls),
(140,657,o),
(86,619,o),
(86,548,o),
(138,508,o),
(173,508,qs),
(387,508,l),
(307,166,ls),
(299,134,o),
(295,114,qs),
(288,80,ls),
(286,67,o),
(285,53,o),
(285,21,o),
(321,-24,o),
(387,-24,o)
);
},
{
closed = 1;
nodes = (
(644,930,l),
(980,930,l),
(916,657,l),
(580,657,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
75 75 0 0 75 78 75 78 77 76 0 74 0 74 71 70 62 61 58 56 53 51 50 48 45 43 38 36 34 33 28 27 23 21 18 16 15 13 10 8 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 15 34 16 13 2 11 11 13 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 15 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 13 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 13 11 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1526;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(645,-288,o),
(702,-288,qs),
(753,-288,o),
(753,-210,qs),
(753,-22,l),
(1006,-12,o),
(1151,110,qs),
(1221,168,o),
(1295,331,o),
(1295,517,o),
(1266,592,qs),
(1176,822,o),
(753,927,q),
(753,1458,l),
(1029,1434,o),
(1146,1195,qs),
(1160,1166,o),
(1180,1139,o),
(1194,1139,qs),
(1224,1139,o),
(1224,1224,o),
(1191,1357,qs),
(1168,1449,o),
(1162,1548,qs),
(1159,1587,o),
(1146,1610,o),
(1113,1610,o),
(1076,1560,qs),
(1053,1530,o),
(1038,1532,qs),
(1033,1532,o),
(1013,1540,qs),
(901,1581,o),
(753,1586,q),
(753,1772,ls),
(753,1851,o),
(645,1851,o),
(645,1771,qs),
(645,1584,l),
(412,1565,o),
(282,1434,qs),
(167,1318,o),
(167,1155,qs),
(167,994,o),
(274,878,qs),
(395,747,o),
(645,684,q),
(645,110,l),
(469,132,o),
(370,245,qs),
(322,300,o),
(264,449,o),
(247,601,o),
(216,601,qs),
(175,601,o),
(175,479,qs),
(175,130,l),
(433,-6,o),
(645,-21,q),
(645,-207,ls)
);
},
{
closed = 1;
nodes = (
(563,987,o),
(512,1020,qs),
(379,1105,o),
(379,1251,qs),
(379,1430,o),
(645,1457,q),
(645,959,l)
);
},
{
closed = 1;
nodes = (
(927,610,o),
(1004,529,qs),
(1042,490,o),
(1075,402,o),
(1075,297,o),
(1060,253,qs),
(1015,115,o),
(753,107,q),
(753,658,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
68 67 58 56 54 53 41 39 33 32 29 28 26 25 23 22 6 4 1 0 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
20 1 3 2 35 1 4 3 60 45 2 6 4 75 66 46 12 4 1 6 2 1 9 1 11 1 0 9 6 33 0 4 3 6 3 4 6 53 0 6 1 3 6 1 51 0 1 9 3 1 9 51 0 2 0 8 2 8 1 0 40 5 1 3 3 12 34 0 9 9 0 1 2 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
20 1 3 5 35 1 4 3 60 45 2 6 4 75 66 46 12 4 1 6 2 1 9 1 11 1 0 9 6 33 0 4 3 6 3 4 6 53 0 6 1 3 6 1 51 0 1 9 3 1 9 51 0 2 0 8 2 8 1 0 40 0 5 5 18 34 0 3 3 12 34 0 9 9 0 1 2 39 7 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1447;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,47,qs),
(1546,1433,ls),
(1594,1495,o),
(1594,1535,qs),
(1594,1556,o),
(1558,1587,o),
(1503,1587,o),
(1453,1545,o),
(1416,1495,qs),
(374,158,ls),
(306,70,o),
(306,31,qs),
(306,8,o),
(339,-24,o),
(412,-24,o)
);
},
{
closed = 1;
nodes = (
(764,960,qs),
(878,1064,o),
(878,1236,qs),
(878,1388,o),
(775,1485,qs),
(666,1587,o),
(495,1587,qs),
(333,1587,o),
(222,1480,qs),
(110,1372,o),
(110,1224,qs),
(110,1081,o),
(196,982,qs),
(241,930,o),
(389,863,o),
(481,863,qs),
(656,863,o)
);
},
{
closed = 1;
nodes = (
(310,1212,o),
(310,1338,o),
(322,1378,qs),
(357,1496,o),
(460,1496,qs),
(546,1496,o),
(610,1401,qs),
(641,1356,o),
(678,1232,o),
(678,1048,o),
(636,995,qs),
(617,971,o),
(568,951,o),
(498,951,o),
(415,1001,o),
(350,1090,o)
);
},
{
closed = 1;
nodes = (
(1084,96,qs),
(1188,-24,o),
(1386,-24,qs),
(1544,-24,o),
(1652,74,qs),
(1766,179,o),
(1766,350,qs),
(1766,500,o),
(1664,598,qs),
(1558,700,o),
(1384,700,qs),
(1223,700,o),
(1110,592,qs),
(1058,543,o),
(999,412,o),
(999,344,qs),
(999,194,o)
);
},
{
closed = 1;
nodes = (
(1349,610,qs),
(1433,610,o),
(1498,514,qs),
(1529,469,o),
(1566,344,o),
(1566,211,o),
(1554,172,qs),
(1523,63,o),
(1430,63,qs),
(1340,63,o),
(1272,159,qs),
(1240,204,o),
(1200,326,o),
(1200,451,o),
(1212,492,qs),
(1245,610,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
16 15 0 0 80 78 72 70 62 60 54 52 43 41 34 33 25 23 15 31 16 31 0 14 0 14 8 7 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1876;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1398,-5,o),
(1437,-5,qs),
(1539,0,l),
(1682,-8,l),
(1791,-8,o),
(1791,47,qs),
(1791,61,o),
(1769,80,o),
(1752,80,q),
(1701,71,l),
(1642,71,o),
(1611,104,qs),
(1326,386,l),
(1433,516,o),
(1536,702,q),
(1596,827,o),
(1669,829,q),
(1718,823,l),
(1734,823,o),
(1766,861,o),
(1766,921,o),
(1748,937,qs),
(1738,946,o),
(1705,957,o),
(1642,957,o),
(1574,942,o),
(1492,942,o),
(1400,957,o),
(1344,957,qs),
(1230,957,o),
(1230,892,qs),
(1230,860,o),
(1259,826,o),
(1279,826,q),
(1345,832,l),
(1412,832,o),
(1412,783,qs),
(1412,663,o),
(1249,458,q),
(1024,670,ls),
(924,765,o),
(848,846,q),
(1211,1002,o),
(1211,1284,qs),
(1211,1418,o),
(1111,1502,qs),
(1004,1592,o),
(812,1592,qs),
(596,1592,o),
(470,1482,qs),
(413,1433,o),
(356,1304,o),
(356,1188,o),
(364,1142,qs),
(390,1002,o),
(550,826,q),
(346,736,o),
(257,629,qs),
(171,526,o),
(171,376,qs),
(171,206,o),
(306,94,qs),
(447,-23,o),
(677,-23,qs),
(944,-23,o),
(1176,207,q),
(1357,33,ls)
);
},
{
closed = 1;
nodes = (
(629,1103,o),
(614,1126,qs),
(577,1185,o),
(577,1266,qs),
(577,1352,o),
(636,1409,qs),
(695,1467,o),
(781,1467,qs),
(867,1467,o),
(920,1414,qs),
(950,1385,o),
(989,1287,o),
(989,1152,o),
(944,1078,qs),
(885,984,o),
(777,924,q),
(652,1074,ls)
);
},
{
closed = 1;
nodes = (
(621,752,q),
(1100,280,l),
(940,126,o),
(735,126,qs),
(585,126,o),
(502,196,qs),
(460,232,o),
(414,337,o),
(414,394,qs),
(414,626,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
90 88 76 74 65 61 58 57 56 55 50 49 48 47 42 41 40 39 38 36 33 32 31 30 19 17 3 1 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 13 34 10 1 9 9 0 1 2 39 11 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 16 34 10 1 9 9 0 1 2 39 11 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 13 34 10 1 9 9 0 1 2 39 11 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 16 34 10 1 9 9 0 1 2 39 11 1 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1881;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(304,936,q),
(374,936,l),
(396,1040,o),
(415,1121,qs),
(448,1264,ls),
(461,1326,o),
(477,1420,o),
(477,1517,o),
(404,1587,o),
(292,1587,o),
(214,1517,o),
(214,1405,o),
(242,1264,qs),
(271,1121,ls),
(287,1040,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
13 12 5 4 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 14 values pushed */
0 1 1 0 1 0 39 0 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,12,qs),
(419,253,o),
(419,727,qs),
(419,981,o),
(449,1156,qs),
(533,1649,o),
(785,1649,q),
(846,1644,ls),
(853,1644,o),
(879,1666,o),
(879,1694,qs),
(879,1714,o),
(821,1742,o),
(767,1742,qs),
(648,1742,o),
(431,1614,o),
(348,1487,qs),
(166,1209,o),
(166,245,o),
(348,-33,qs),
(431,-160,o),
(648,-288,o),
(767,-288,qs),
(821,-288,o),
(879,-259,o),
(879,-240,qs),
(879,-233,o),
(876,-224,qs),
(867,-190,o),
(846,-190,q),
(785,-195,l),
(624,-195,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
0 0 0 31 0 31 25 24 23 22 18 16 9 7 2 1 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (145,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (1025,0);
ref = parenleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 1 1 32 1 32 26 25 24 23 19 17 10 8 3 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1025;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(953,1189,o),
(953,1292,o),
(921,1330,qs),
(906,1348,o),
(864,1370,o),
(793,1370,o),
(732,1326,qs),
(664,1274,ls),
(618,1238,o),
(552,1210,q),
(552,1270,o),
(592,1366,qs),
(608,1402,o),
(633,1476,o),
(633,1571,o),
(565,1627,o),
(464,1627,o),
(395,1568,o),
(395,1477,o),
(436,1344,qs),
(459,1269,o),
(464,1216,q),
(432,1224,o),
(398,1252,qs),
(330,1308,ls),
(294,1338,o),
(219,1384,o),
(157,1384,o),
(137,1374,qs),
(70,1340,o),
(70,1252,qs),
(70,1140,o),
(244,1140,qs),
(371,1140,o),
(433,1129,q),
(358,1052,o),
(285,1010,qs),
(242,986,o),
(217,960,qs),
(200,943,o),
(178,901,o),
(178,825,o),
(217,790,qs),
(235,774,o),
(281,757,o),
(357,757,o),
(384,790,qs),
(400,810,o),
(431,878,o),
(470,1005,o),
(505,1072,q),
(524,1034,ls),
(533,1013,o),
(549,972,o),
(561,933,o),
(589,823,o),
(619,784,qs),
(635,764,o),
(673,747,o),
(744,747,o),
(782,780,qs),
(801,795,o),
(825,840,o),
(826,904,o),
(789,951,o),
(756,976,qs),
(678,1034,ls),
(634,1067,o),
(582,1122,q),
(643,1130,o),
(719,1130,qs),
(823,1129,ls),
(883,1129,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 0 67 66 56 55 45 44 40 38 27 26 13 12 0 72 2 72 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
62 50 2 0 4 21 3 2 1 0 2 33 37 1 0 1 32 2 1 1 0 1 56 6 1 4 3 7 2 0 1 4 0 1 0 41 0 5 5 18 5 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1024;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(718,143,l),
(718,580,l),
(1145,580,l),
(1145,729,l),
(718,729,l),
(718,1168,l),
(566,1168,l),
(566,729,l),
(140,729,l),
(140,580,l),
(566,580,l),
(566,143,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 0 0 38 3 1 1 4 1 0 5 1 0 0 0 41 0 2 2 5 0 0 39 0 5 2 5 0 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,-94,o),
(514,36,qs),
(514,154,o),
(413,277,o),
(325,277,qs),
(289,277,o),
(260,265,qs),
(169,227,o),
(169,126,qs),
(169,19,o),
(284,-14,qs),
(336,-30,o),
(363,-63,o),
(363,-125,o),
(326,-170,qs),
(309,-191,o),
(257,-230,o),
(173,-269,o),
(173,-301,qs),
(173,-345,o),
(227,-345,qs),
(323,-345,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 17 15 0 21 1 21 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(666,559,ls),
(701,559,o),
(743,598,o),
(743,669,o),
(699,707,o),
(664,707,qs),
(210,707,ls),
(175,707,o),
(132,669,o),
(132,598,o),
(173,559,o),
(208,559,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 875;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,-24,o),
(414,-24,o),
(466,29,qs),
(512,77,o),
(512,136,qs),
(512,204,o),
(471,254,qs),
(424,311,o),
(346,311,qs),
(270,311,o),
(220,259,qs),
(196,235,o),
(171,173,o),
(171,113,o),
(191,55,o),
(233,7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
14 13 7 5 2 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,-216,qs),
(895,1578,ls),
(917,1634,o),
(917,1676,qs),
(917,1695,o),
(875,1730,o),
(832,1730,o),
(818,1724,qs),
(773,1708,o),
(729,1590,qs),
(146,-38,ls),
(91,-188,o),
(91,-243,o),
(134,-288,o),
(225,-288,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 14 0 14 8 7 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 0 1 56 0 0 0 14 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1008;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,79,qs),
(619,-23,o),
(792,-23,qs),
(1060,-23,o),
(1228,188,qs),
(1412,421,o),
(1412,831,qs),
(1412,1140,o),
(1251,1358,qs),
(1078,1591,o),
(787,1591,qs),
(488,1591,o),
(311,1357,qs),
(228,1247,o),
(140,946,o),
(140,800,qs),
(140,301,o)
);
},
{
closed = 1;
nodes = (
(388,747,o),
(388,1186,o),
(482,1320,qs),
(572,1446,o),
(723,1446,qs),
(915,1446,o),
(1036,1238,qs),
(1161,1025,o),
(1161,678,qs),
(1161,388,o),
(1066,246,qs),
(1023,181,o),
(914,126,o),
(765,126,o),
(596,234,o),
(466,442,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 26 19 18 14 12 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1534;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(600,108,o),
(566,183,o),
(566,314,qs),
(566,1256,ls),
(566,1362,o),
(572,1448,qs),
(575,1481,o),
(579,1527,o),
(579,1587,o),
(553,1587,qs),
(539,1587,o),
(525,1578,qs),
(468,1537,ls),
(425,1506,o),
(331,1464,qs),
(288,1444,o),
(200,1408,o),
(67,1358,o),
(67,1332,qs),
(67,1302,o),
(150,1302,o),
(216,1316,o),
(239,1316,qs),
(292,1316,o),
(333,1200,o),
(333,1074,qs),
(333,314,ls),
(333,251,o),
(328,207,qs),
(316,82,o),
(220,82,q),
(125,92,l),
(107,92,o),
(87,60,o),
(87,24,o),
(112,7,qs),
(125,-2,o),
(164,-15,o),
(242,-15,o),
(330,-8,qs),
(388,-2,ls),
(416,0,o),
(480,0,o),
(506,-2,qs),
(559,-8,ls),
(586,-10,o),
(616,-12,qs),
(728,-22,o),
(762,7,qs),
(772,16,o),
(781,37,o),
(781,60,o),
(761,89,o),
(744,89,q),
(678,82,l),
(643,82,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 55 0 55 46 44 35 34 33 31 25 24 23 22 17 16 13 12 9 8 2 1 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 40 values pushed */
49 1 6 8 1 33 7 1 6 8 0 8 6 0 53 0 8 8 12 34 10 9 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 852;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1165,369,qs),
(1002,199,o),
(711,199,qs),
(333,199,l),
(373,278,o),
(492,401,qs),
(569,481,o),
(759,625,qs),
(1008,812,o),
(1108,946,qs),
(1207,1076,o),
(1207,1213,qs),
(1207,1387,o),
(1068,1489,qs),
(1002,1538,o),
(813,1591,o),
(534,1591,o),
(388,1538,qs),
(300,1506,o),
(184,1413,q),
(184,1132,ls),
(184,1083,o),
(223,1083,qs),
(230,1083,o),
(263,1107,o),
(270,1143,qs),
(303,1280,o),
(412,1364,qs),
(516,1446,o),
(651,1446,qs),
(785,1446,o),
(858,1388,qs),
(934,1326,o),
(934,1213,qs),
(934,1080,o),
(862,968,qs),
(795,862,o),
(610,702,qs),
(340,467,o),
(230,304,qs),
(178,226,o),
(140,100,o),
(140,23,o),
(167,0,o),
(186,0,qs),
(1114,0,l),
(1137,101,o),
(1158,163,qs),
(1169,196,o),
(1195,258,o),
(1241,353,o),
(1241,378,qs),
(1241,405,o),
(1215,405,qs),
(1201,405,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 52 50 38 37 32 30 25 23 10 8 0 54 1 54 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 48 values pushed */
34 1 3 2 1 33 0 3 2 0 2 3 0 53 6 1 0 5 2 0 5 51 0 2 2 4 1 0 39 0 4 4 12 34 0 5 5 1 1 0 39 0 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1368;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1040,115,qs),
(1225,263,o),
(1225,482,qs),
(1225,649,o),
(1118,763,qs),
(1019,870,o),
(859,899,q),
(984,956,o),
(1066,1052,qs),
(1148,1149,o),
(1148,1246,qs),
(1148,1407,o),
(1018,1500,qs),
(956,1544,o),
(778,1592,o),
(609,1592,o),
(548,1582,qs),
(354,1550,o),
(205,1450,q),
(205,1182,ls),
(205,1133,o),
(234,1133,qs),
(246,1133,o),
(265,1160,o),
(293,1261,o),
(328,1309,qs),
(426,1446,o),
(624,1446,qs),
(756,1446,o),
(833,1387,qs),
(914,1325,o),
(914,1215,qs),
(914,990,o),
(606,899,qs),
(456,855,o),
(456,815,qs),
(456,794,o),
(466,778,qs),
(471,769,o),
(486,757,o),
(519,757,o),
(563,770,qs),
(586,776,o),
(606,776,qs),
(757,776,o),
(876,672,qs),
(1001,563,o),
(1001,407,qs),
(1001,272,o),
(896,194,qs),
(804,127,o),
(664,127,qs),
(517,127,o),
(410,190,qs),
(354,223,o),
(269,329,o),
(236,464,o),
(181,464,o),
(181,416,qs),
(181,113,l),
(376,-24,o),
(657,-24,qs),
(866,-24,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 47 46 41 39 35 33 22 21 19 17 11 9 5 4 0 62 1 62 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1364;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(991,112,o),
(957,196,o),
(957,329,qs),
(957,466,l),
(1069,466,o),
(1142,447,qs),
(1172,439,o),
(1209,420,o),
(1231,404,o),
(1243,393,o),
(1249,393,qs),
(1261,393,o),
(1288,472,qs),
(1300,506,o),
(1329,583,o),
(1368,641,o),
(1368,655,qs),
(1368,679,o),
(1342,679,qs),
(1329,679,o),
(1301,662,qs),
(1284,651,o),
(1264,640,qs),
(1198,607,o),
(1095,607,qs),
(957,607,l),
(957,1528,ls),
(957,1595,o),
(922,1595,qs),
(904,1595,o),
(854,1542,o),
(825,1508,q),
(825,1509,l),
(82,602,ls),
(30,541,o),
(30,510,qs),
(30,494,o),
(67,466,o),
(121,466,qs),
(722,466,l),
(722,329,ls),
(722,197,o),
(701,143,qs),
(677,82,o),
(610,82,q),
(515,92,l),
(497,92,o),
(477,60,o),
(477,24,o),
(502,7,qs),
(515,-2,o),
(554,-15,o),
(632,-15,o),
(720,-8,qs),
(778,-2,ls),
(806,0,o),
(870,0,o),
(896,-2,qs),
(950,-8,ls),
(977,-10,o),
(1008,-12,qs),
(1119,-22,o),
(1152,7,qs),
(1163,16,o),
(1172,37,o),
(1172,60,o),
(1152,89,o),
(1133,89,q),
(1069,82,l),
(1034,82,o)
);
},
{
closed = 1;
nodes = (
(722,607,l),
(288,607,ls),
(248,607,o),
(248,614,qs),
(248,631,o),
(275,665,qs),
(722,1212,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 75 73 0 69 0 69 65 64 59 57 51 49 45 43 41 39 31 29 25 24 23 22 17 16 13 12 9 8 2 1 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 61 values pushed */
76 37 36 3 9 7 1 33 0 9 7 8 7 9 8 53 0 10 6 0 6 10 0 53 13 1 8 11 1 6 10 8 6 1 0 41 0 7 7 12 34 14 12 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1370;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1001,1362,l),
(1007,1413,o),
(1046,1528,qs),
(1072,1602,ls),
(1083,1636,o),
(1083,1651,qs),
(1083,1678,o),
(1057,1678,qs),
(1044,1678,o),
(1009,1647,qs),
(957,1597,o),
(849,1574,qs),
(784,1561,o),
(588,1561,qs),
(275,1561,ls),
(235,1561,o),
(228,1520,q),
(228,834,ls),
(228,787,o),
(261,787,qs),
(272,787,o),
(285,798,qs),
(315,823,ls),
(400,901,o),
(591,901,qs),
(769,901,o),
(880,779,qs),
(933,721,o),
(993,557,o),
(993,386,o),
(978,333,qs),
(916,115,o),
(662,115,qs),
(501,115,o),
(385,192,qs),
(328,229,o),
(243,337,o),
(203,436,o),
(184,464,o),
(171,464,qs),
(142,464,o),
(142,416,qs),
(142,113,l),
(193,78,o),
(253,52,qs),
(428,-24,o),
(608,-24,qs),
(847,-24,o),
(1026,112,qs),
(1226,263,o),
(1226,514,qs),
(1226,747,o),
(1076,896,qs),
(1002,969,o),
(788,1053,o),
(464,1053,o),
(332,989,q),
(332,1362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
57 56 50 48 44 41 38 36 33 31 25 23 18 16 11 9 2 1 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1364;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1073,124,qs),
(1259,292,o),
(1259,570,qs),
(1259,780,o),
(1127,916,qs),
(1064,980,o),
(887,1053,o),
(702,1053,o),
(632,1036,qs),
(408,980,o),
(323,797,q),
(335,1117,o),
(459,1286,qs),
(576,1446,o),
(770,1446,qs),
(1008,1446,o),
(1087,1295,qs),
(1108,1252,o),
(1134,1252,qs),
(1146,1252,o),
(1171,1277,o),
(1171,1316,qs),
(1171,1373,o),
(1135,1430,qs),
(1116,1461,o),
(1054,1519,o),
(965,1564,o),
(846,1591,o),
(672,1591,o),
(583,1562,qs),
(404,1502,o),
(278,1352,qs),
(78,1114,o),
(78,783,qs),
(78,405,o),
(248,188,qs),
(414,-24,o),
(697,-24,qs),
(908,-24,o)
);
},
{
closed = 1;
nodes = (
(471,808,qs),
(564,901,o),
(684,901,qs),
(817,901,o),
(914,786,qs),
(964,727,o),
(1026,551,o),
(1026,292,o),
(878,121,o),
(758,121,qs),
(609,121,o),
(498,224,qs),
(382,332,o),
(341,534,q),
(372,709,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 51 49 44 42 31 30 24 22 20 18 10 9 0 38 1 38 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1365;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(659,-8,o),
(666,31,qs),
(716,332,o),
(827,672,qs),
(885,850,o),
(1090,1377,o),
(1158,1513,qs),
(1165,1526,o),
(1165,1554,o),
(1136,1561,o),
(1101,1561,qs),
(354,1561,ls),
(264,1561,o),
(245,1584,qs),
(213,1624,o),
(193,1624,qs),
(181,1624,o),
(161,1604,o),
(145,1503,o),
(128,1444,qs),
(76,1273,ls),
(68,1245,o),
(68,1194,o),
(92,1194,qs),
(107,1194,o),
(132,1219,q),
(250,1362,o),
(391,1362,qs),
(967,1362,l),
(815,1060,l),
(665,749,ls),
(587,586,o),
(428,219,qs),
(352,40,o),
(362,16,qs),
(371,-8,o),
(404,-8,q),
(512,0,l),
(624,-8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
38 37 28 25 23 21 15 13 11 9 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 2 1 33 0 2 1 0 1 2 0 53 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 5 1 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1195;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1146,1001,qs),
(1216,1106,o),
(1216,1222,qs),
(1216,1373,o),
(1076,1478,qs),
(925,1591,o),
(689,1591,qs),
(449,1591,o),
(296,1467,qs),
(229,1412,o),
(159,1274,o),
(159,1206,qs),
(159,1000,o),
(409,837,q),
(264,791,o),
(170,682,qs),
(70,565,o),
(70,423,qs),
(70,239,o),
(212,118,qs),
(379,-24,o),
(691,-24,qs),
(962,-24,o),
(1136,116,qs),
(1300,250,o),
(1300,441,qs),
(1300,676,o),
(971,846,q),
(1081,902,o)
);
},
{
closed = 1;
nodes = (
(998,1111,qs),
(969,970,o),
(851,900,q),
(825,910,o),
(799,920,qs),
(584,1002,o),
(478,1108,qs),
(392,1194,o),
(392,1267,qs),
(392,1353,o),
(534,1445,o),
(667,1445,qs),
(1007,1445,o),
(1007,1187,qs),
(1007,1151,o)
);
},
{
closed = 1;
nodes = (
(534,769,q),
(602,737,l),
(810,652,o),
(911,578,qs),
(975,532,o),
(1054,423,o),
(1054,295,o),
(1032,252,qs),
(967,127,o),
(745,127,qs),
(542,127,o),
(416,212,qs),
(356,253,o),
(288,369,o),
(288,506,o),
(307,560,qs),
(363,716,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
51 49 32 30 22 20 7 5 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 16 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 16 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1366;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,-24,o),
(586,-24,qs),
(897,-24,o),
(1084,222,qs),
(1266,460,o),
(1266,838,qs),
(1266,1178,o),
(1100,1383,qs),
(932,1591,o),
(645,1591,qs),
(421,1591,o),
(264,1446,qs),
(99,1294,o),
(99,1051,qs),
(99,824,o),
(249,672,qs),
(318,603,o),
(500,526,o),
(669,526,o),
(730,542,qs),
(911,587,o),
(1017,735,q),
(1006,423,o),
(860,264,qs),
(793,191,o),
(627,126,o),
(426,126,o),
(286,193,o),
(253,267,qs),
(233,311,o),
(203,311,qs),
(186,311,o),
(177,288,qs),
(173,278,o),
(169,255,o),
(169,209,o),
(217,116,o),
(268,74,qs)
);
},
{
closed = 1;
nodes = (
(340,1038,o),
(340,1226,o),
(360,1282,qs),
(421,1446,o),
(630,1446,qs),
(778,1446,o),
(873,1328,qs),
(976,1200,o),
(1001,947,q),
(956,812,o),
(886,752,qs),
(848,720,o),
(749,688,o),
(629,688,o),
(508,749,o),
(406,866,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
49 47 40 39 36 34 28 26 19 18 11 10 7 5 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1366;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (171,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (0,683);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
31 30 24 22 15 14 8 6 4 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 16 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 16 1 35 3
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (166,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (-3,0);
ref = comma;
},
{
alignment = -1;
pos = (1,683);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 37 36 30 28 18 16 1 22 2 22 5 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 1 0 41 0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 4 1 0 1 0 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(866,88,l),
(866,270,l),
(403,558,l),
(866,839,l),
(866,1016,l),
(160,588,l),
(160,521,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
1 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1145,724,l),
(1145,873,l),
(140,873,l),
(140,724,l)
);
},
{
closed = 1;
nodes = (
(1145,391,l),
(1145,540,l),
(140,540,l),
(140,391,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 6 5 4 3 2 1 0 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 2 0 1 0 0 41 0 2 3 3 2 0 0 38 0 2 2 3 0 0 39 0 3 2 3 0 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(866,521,l),
(866,588,l),
(160,1016,l),
(160,839,l),
(623,558,l),
(160,270,l),
(160,88,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 6 1 13
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,545,o),
(518,557,o),
(484,575,o),
(484,599,qs),
(484,691,o),
(660,836,qs),
(737,900,o),
(792,956,qs),
(961,1124,o),
(961,1287,qs),
(961,1420,o),
(858,1500,qs),
(745,1587,o),
(527,1587,qs),
(322,1587,o),
(139,1483,q),
(139,1202,ls),
(139,1154,o),
(177,1154,qs),
(193,1154,o),
(221,1193,o),
(225,1213,qs),
(258,1338,o),
(405,1468,o),
(501,1468,qs),
(548,1468,o),
(587,1457,qs),
(715,1421,o),
(715,1277,qs),
(715,1139,o),
(575,971,qs),
(385,742,o),
(385,603,qs),
(385,530,o),
(440,477,qs),
(469,448,o),
(523,448,qs),
(592,448,o),
(592,500,qs),
(592,526,o)
);
},
{
closed = 1;
nodes = (
(469,-24,o),
(567,-24,o),
(610,14,qs),
(630,33,o),
(654,84,o),
(654,172,o),
(618,216,qs),
(600,237,o),
(546,265,o),
(444,265,o),
(401,220,qs),
(381,200,o),
(359,146,o),
(359,94,o),
(377,44,o),
(413,3,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
54 53 46 45 26 24 21 19 15 13 3 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 16 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 16 5 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1533,885,o),
(1310,885,qs),
(1166,885,o),
(935,784,o),
(775,619,o),
(689,409,o),
(689,300,qs),
(689,283,ls),
(689,161,o),
(753,82,qs),
(832,-14,o),
(1004,-14,qs),
(1154,-14,o),
(1292,119,q),
(1292,111,o),
(1293,98,o),
(1293,91,qs),
(1298,10,o),
(1359,10,q),
(1472,16,l),
(1547,12,l),
(1694,12,o),
(1852,119,qs),
(2012,227,o),
(2114,396,qs),
(2225,579,o),
(2225,775,qs),
(2225,796,ls),
(2225,805,o),
(2224,816,qs),
(2206,1093,o),
(1999,1246,qs),
(1798,1394,o),
(1475,1394,qs),
(1091,1394,o),
(782,1224,qs),
(492,1064,o),
(326,790,qs),
(162,521,o),
(162,214,qs),
(162,-171,o),
(431,-366,qs),
(543,-448,o),
(825,-526,o),
(1226,-526,o),
(1382,-476,qs),
(1461,-450,o),
(1568,-370,o),
(1604,-293,o),
(1586,-243,o),
(1539,-220,o),
(1489,-220,o),
(1476,-246,qs),
(1471,-256,o),
(1471,-275,o),
(1468,-281,qs),
(1448,-323,o),
(1267,-376,qs),
(1163,-407,o),
(1020,-407,qs),
(712,-407,o),
(549,-236,qs),
(381,-59,o),
(381,254,qs),
(381,503,o),
(505,734,qs),
(635,976,o),
(858,1120,qs),
(1105,1279,o),
(1412,1279,qs),
(1676,1279,o),
(1834,1144,qs),
(1995,1007,o),
(2011,763,qs),
(2013,735,o),
(2013,665,qs),
(2013,609,o),
(1992,528,qs),
(1935,297,o),
(1758,186,qs),
(1654,120,o),
(1553,120,qs),
(1548,120,o),
(1548,126,q),
(1549,130,l),
(1655,766,l)
);
},
{
closed = 1;
nodes = (
(959,496,o),
(1064,644,qs),
(1110,707,o),
(1221,780,o),
(1344,780,o),
(1395,724,q),
(1318,278,l),
(1293,242,o),
(1264,211,qs),
(1169,107,o),
(1084,107,qs),
(959,107,o),
(959,297,qs),
(959,314,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
95 94 89 87 84 82 74 72 67 63 52 50 41 40 34 33 26 24 16 14 4 2 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
55 1 10 8 93 85 11 1 4 0 10 71 1 6 0 3 33 0 3 6 2 6 3 2 53 0 5 0 1 8 5 1 1 0 41 0 8 0 10 0 8 10 1 0 41 9 1 0 0 6 1 0 39 7 1 6 6 13 34 0 2 2 4 1 0 39 0 4 4 17 4 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
55 1 10 8 93 85 11 1 4 0 10 71 1 6 0 3 33 0 3 7 2 7 3 2 53 0 5 0 1 8 5 1 1 0 41 0 8 0 10 0 8 10 1 0 41 9 1 0 0 6 1 0 39 0 6 6 13 34 9 1 0 0 7 1 0 39 0 7 7 13 34 0 2 2 4 1 0 39 0 4 4 17 4 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2325;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,-15,o),
(499,22,o),
(499,63,o),
(478,90,o),
(461,90,q),
(411,83,l),
(339,83,o),
(339,127,qs),
(341,161,o),
(394,286,q),
(423,372,l),
(450,436,o),
(553,436,qs),
(1077,436,ls),
(1130,436,o),
(1181,407,o),
(1195,378,qs),
(1264,246,l),
(1305,157,o),
(1305,115,qs),
(1305,80,o),
(1244,80,q),
(1172,89,l),
(1135,89,o),
(1135,46,qs),
(1135,37,o),
(1140,26,qs),
(1162,-15,o),
(1235,-15,q),
(1483,0,l),
(1680,-15,l),
(1725,-15,o),
(1766,23,o),
(1766,61,o),
(1748,90,o),
(1728,90,q),
(1678,83,l),
(1638,83,o),
(1591,131,qs),
(1559,164,o),
(1508,275,qs),
(979,1430,ls),
(935,1527,o),
(909,1566,qs),
(896,1586,o),
(875,1601,o),
(856,1601,o),
(833,1588,o),
(804,1526,qs),
(268,367,ls),
(182,182,o),
(132,118,qs),
(104,83,o),
(58,83,q),
(9,89,l),
(-30,89,o),
(-30,43,qs),
(-30,25,o),
(11,-15,o),
(53,-15,q),
(196,0,l),
(397,-15,l)
);
},
{
closed = 1;
nodes = (
(528,564,o),
(528,591,qs),
(528,603,o),
(542,634,qs),
(774,1164,ls),
(803,1233,o),
(821,1233,qs),
(838,1233,o),
(875,1139,qs),
(1090,615,ls),
(1098,597,o),
(1098,591,qs),
(1098,564,o),
(986,564,qs),
(639,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
63 62 70 68 62 76 63 75 61 60 57 56 55 54 49 46 40 39 38 37 33 31 30 29 26 25 24 23 15 14 8 7 6 5 2 1 17 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
0 1 0 1 1 33 0 15 3 14 3 15 14 53 16 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(722,-16,qs),
(823,-24,o),
(870,-24,qs),
(1161,-24,o),
(1327,122,qs),
(1482,257,o),
(1482,470,qs),
(1482,612,o),
(1369,722,qs),
(1258,830,o),
(1072,874,q),
(1203,931,o),
(1345,1122,o),
(1345,1336,o),
(1304,1408,qs),
(1281,1447,o),
(1207,1515,o),
(1096,1564,o),
(945,1592,o),
(805,1592,o),
(758,1587,qs),
(659,1576,ls),
(608,1571,o),
(499,1561,o),
(374,1561,o),
(316,1568,qs),
(292,1571,o),
(238,1575,o),
(149,1575,o),
(124,1553,qs),
(113,1544,o),
(104,1523,o),
(104,1497,o),
(124,1471,o),
(143,1471,q),
(192,1477,l),
(232,1477,o),
(283,1447,o),
(320,1365,o),
(320,1232,qs),
(320,316,ls),
(320,187,o),
(299,138,qs),
(276,84,o),
(207,84,q),
(143,90,l),
(124,90,o),
(104,62,o),
(104,39,o),
(108,28,qs),
(126,-14,o),
(198,-14,q),
(444,0,l),
(522,0,o)
);
},
{
closed = 1;
nodes = (
(553,1359,o),
(582,1397,o),
(665,1426,o),
(797,1426,qs),
(1097,1426,o),
(1097,1202,qs),
(1097,1052,o),
(1006,976,qs),
(963,940,o),
(846,906,o),
(654,906,o),
(553,925,q),
(553,1329,ls)
);
},
{
closed = 1;
nodes = (
(1228,460,qs),
(1228,277,o),
(1122,196,qs),
(1073,158,o),
(938,127,o),
(700,127,o),
(553,194,o),
(553,265,qs),
(553,764,l),
(647,779,o),
(855,779,o),
(945,760,qs),
(1228,702,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 0 74 73 69 68 63 61 56 55 51 49 34 33 29 28 25 24 19 18 17 16 9 8 7 6 0 53 2 53 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 84 values pushed */
54 1 9 10 42 1 11 9 70 1 12 11 3 33 0 9 0 11 12 9 11 1 0 41 4 1 3 3 5 1 0 39 7 6 2 5 5 12 34 0 10 10 5 1 0 39 7 6 2 5 5 12 34 0 12 12 0 1 0 39 8 13 2 0 0 13 34 2 1 1 1 0 1 2 39 8 13 2 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1581;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1546,561,o),
(1509,561,qs),
(1470,561,o),
(1454,498,qs),
(1426,386,o),
(1380,314,qs),
(1259,123,o),
(1027,123,qs),
(733,123,o),
(540,308,qs),
(336,505,o),
(336,832,qs),
(336,1088,o),
(504,1270,qs),
(580,1353,o),
(775,1446,o),
(879,1446,qs),
(1296,1446,o),
(1468,1130,qs),
(1482,1104,o),
(1514,1104,qs),
(1527,1104,o),
(1553,1125,o),
(1553,1175,o),
(1518,1310,qs),
(1501,1373,o),
(1493,1430,qs),
(1489,1459,o),
(1486,1519,o),
(1486,1608,o),
(1458,1608,qs),
(1444,1608,o),
(1415,1582,o),
(1336,1502,o),
(1288,1502,o),
(1259,1516,qs),
(1102,1592,o),
(932,1592,qs),
(696,1592,o),
(506,1490,qs),
(414,1441,o),
(263,1296,o),
(157,1112,o),
(99,891,o),
(99,603,o),
(215,317,o),
(324,210,qs),
(558,-23,o),
(943,-23,qs),
(1303,-23,o),
(1546,208,q),
(1546,497,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
50 48 44 42 35 33 31 29 21 19 17 16 14 12 3 1 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,1447,o),
(320,1363,o),
(320,1232,qs),
(320,314,ls),
(320,185,o),
(299,136,qs),
(276,82,o),
(208,82,q),
(143,88,l),
(104,88,o),
(104,41,qs),
(104,22,o),
(124,6,qs),
(135,-3,o),
(171,-16,o),
(254,-16,o),
(329,-8,qs),
(357,-5,o),
(412,0,o),
(502,0,o),
(549,-4,qs),
(684,-16,ls),
(772,-24,o),
(891,-24,qs),
(1144,-24,o),
(1352,81,qs),
(1559,186,o),
(1676,366,qs),
(1799,554,o),
(1799,785,qs),
(1799,1159,o),
(1576,1368,qs),
(1337,1592,o),
(874,1592,qs),
(798,1592,o),
(660,1576,qs),
(611,1571,o),
(510,1561,o),
(383,1561,o),
(322,1568,qs),
(296,1571,o),
(240,1575,o),
(151,1575,o),
(124,1553,qs),
(113,1544,o),
(104,1523,o),
(104,1497,o),
(124,1471,o),
(143,1471,q),
(193,1477,l),
(233,1477,o)
);
},
{
closed = 1;
nodes = (
(559,1365,o),
(598,1410,o),
(702,1446,o),
(851,1446,qs),
(1180,1446,o),
(1356,1280,qs),
(1541,1105,o),
(1541,763,qs),
(1541,412,o),
(1367,261,qs),
(1282,187,o),
(1038,125,o),
(689,125,o),
(624,154,qs),
(559,184,o),
(559,269,qs),
(559,1331,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 64 62 55 54 0 50 0 50 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
12 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1838;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,698,o),
(600,734,o),
(642,734,qs),
(890,734,ls),
(934,734,o),
(976,704,qs),
(998,689,o),
(1039,642,o),
(1059,595,o),
(1071,578,o),
(1083,578,qs),
(1115,578,o),
(1115,634,q),
(1107,803,l),
(1115,964,l),
(1115,1020,o),
(1083,1020,qs),
(1071,1020,o),
(1058,1004,o),
(1038,957,o),
(1018,933,qs),
(960,863,o),
(890,863,qs),
(643,863,ls),
(555,863,o),
(555,916,qs),
(555,1342,ls),
(555,1385,o),
(595,1431,o),
(649,1431,qs),
(919,1431,ls),
(1002,1431,o),
(1052,1420,qs),
(1079,1414,o),
(1146,1383,o),
(1202,1324,qs),
(1262,1258,ls),
(1297,1219,o),
(1310,1219,qs),
(1331,1219,o),
(1331,1247,qs),
(1331,1261,o),
(1324,1294,qs),
(1297,1407,ls),
(1278,1488,o),
(1271,1561,q),
(444,1561,ls),
(389,1561,o),
(316,1568,qs),
(264,1574,ls),
(238,1576,o),
(149,1576,o),
(124,1554,qs),
(113,1545,o),
(104,1524,o),
(104,1498,o),
(124,1472,o),
(143,1472,q),
(192,1478,l),
(232,1478,o),
(283,1448,o),
(320,1366,o),
(320,1233,qs),
(320,330,ls),
(320,194,o),
(300,144,qs),
(276,83,o),
(207,83,q),
(143,90,l),
(124,90,o),
(104,61,o),
(104,24,o),
(124,7,qs),
(134,-2,o),
(171,-15,o),
(238,-15,o),
(268,-12,qs),
(384,-2,ls),
(414,0,o),
(455,0,qs),
(1289,0,l),
(1329,152,o),
(1389,272,qs),
(1448,387,o),
(1396,384,qs),
(1388,383,o),
(1365,379,o),
(1332,346,qs),
(1297,308,ls),
(1265,273,o),
(1229,240,qs),
(1105,129,o),
(858,129,qs),
(649,129,ls),
(555,129,o),
(555,264,qs),
(555,672,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
94 91 86 84 80 78 74 71 67 64 58 56 50 48 45 44 39 38 37 36 29 28 27 26 21 20 18 15 12 11 4 1 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 94 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 13
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(808,8,qs),
(820,17,o),
(832,39,o),
(832,62,o),
(812,93,o),
(795,93,q),
(668,84,l),
(632,84,o),
(588,110,o),
(556,186,o),
(556,316,qs),
(556,668,ls),
(556,694,o),
(601,729,o),
(642,729,qs),
(918,729,ls),
(937,729,o),
(959,722,qs),
(1037,697,o),
(1079,604,q),
(1090,574,o),
(1111,574,qs),
(1141,574,o),
(1141,630,q),
(1133,787,l),
(1141,960,l),
(1141,1016,o),
(1111,1016,qs),
(1097,1016,o),
(1084,1000,o),
(1064,953,o),
(1044,929,qs),
(986,859,o),
(918,859,qs),
(643,859,ls),
(556,859,o),
(556,912,qs),
(556,1322,ls),
(556,1373,o),
(605,1431,o),
(649,1431,qs),
(939,1431,ls),
(1071,1431,o),
(1164,1366,qs),
(1205,1336,o),
(1271,1261,o),
(1325,1193,o),
(1342,1193,qs),
(1364,1193,o),
(1364,1264,o),
(1335,1371,qs),
(1310,1466,ls),
(1297,1514,o),
(1290,1561,q),
(452,1561,ls),
(416,1561,o),
(388,1564,qs),
(271,1574,ls),
(240,1576,o),
(152,1576,o),
(125,1554,qs),
(114,1545,o),
(105,1524,o),
(105,1498,o),
(125,1472,o),
(144,1472,q),
(193,1478,l),
(234,1478,o),
(284,1448,o),
(320,1368,o),
(320,1233,qs),
(320,316,ls),
(320,185,o),
(300,138,qs),
(277,84,o),
(208,84,q),
(144,90,l),
(105,90,o),
(105,43,qs),
(105,24,o),
(125,8,qs),
(136,-1,o),
(172,-14,o),
(263,-14,o),
(344,-5,qs),
(389,0,o),
(439,0,q),
(728,-14,l),
(777,-14,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 0 83 80 74 71 67 65 61 59 55 52 48 45 41 39 34 32 30 28 23 22 21 20 13 12 11 10 5 4 0 88 2 88 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 75 values pushed */
0 8 9 11 9 8 11 53 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 14 3 2 2 2 0 1 0 39 1 15 2 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1411;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1806,766,o),
(1806,789,o),
(1802,800,qs),
(1784,843,o),
(1712,843,q),
(1526,827,l),
(1488,827,o),
(1414,835,qs),
(1387,838,o),
(1323,843,o),
(1231,843,o),
(1206,820,qs),
(1196,811,o),
(1187,789,o),
(1187,766,o),
(1207,734,o),
(1226,734,q),
(1300,745,l),
(1335,745,o),
(1379,719,o),
(1412,642,o),
(1412,512,qs),
(1412,322,ls),
(1412,232,o),
(1284,174,qs),
(1172,123,o),
(1047,123,qs),
(746,123,o),
(549,308,qs),
(345,501,o),
(345,816,qs),
(345,1090,o),
(516,1267,qs),
(597,1351,o),
(825,1446,o),
(1147,1446,o),
(1299,1380,qs),
(1463,1309,o),
(1535,1179,qs),
(1548,1156,o),
(1571,1156,qs),
(1598,1156,o),
(1598,1203,qs),
(1598,1225,o),
(1588,1268,qs),
(1566,1362,ls),
(1553,1413,o),
(1533,1521,o),
(1533,1619,o),
(1503,1619,qs),
(1483,1619,o),
(1424,1558,qs),
(1388,1519,o),
(1358,1519,qs),
(1339,1519,o),
(1299,1535,qs),
(1155,1592,o),
(998,1592,qs),
(599,1592,o),
(346,1350,qs),
(228,1237,o),
(98,926,o),
(98,744,qs),
(98,416,o),
(328,202,qs),
(440,98,o),
(766,-23,o),
(1148,-23,o),
(1276,14,qs),
(1339,33,o),
(1445,86,o),
(1515,136,o),
(1553,156,qs),
(1643,203,l),
(1643,512,ls),
(1643,548,o),
(1644,589,qs),
(1645,745,o),
(1696,745,q),
(1767,736,l),
(1786,736,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 0 80 0 80 76 75 74 73 70 69 64 63 62 61 54 52 45 44 40 38 31 29 27 25 23 21 13 12 2 1 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1827;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,109,o),
(556,184,o),
(556,315,qs),
(556,766,ls),
(556,792,o),
(605,829,o),
(662,829,qs),
(1276,829,ls),
(1332,829,o),
(1382,792,o),
(1382,766,qs),
(1382,315,ls),
(1382,186,o),
(1361,137,qs),
(1338,83,o),
(1270,83,q),
(1204,89,l),
(1187,89,o),
(1167,61,o),
(1167,24,o),
(1186,7,qs),
(1197,-2,o),
(1233,-15,o),
(1308,-15,o),
(1389,-8,qs),
(1442,-2,ls),
(1468,0,o),
(1531,0,o),
(1558,-2,qs),
(1611,-8,ls),
(1638,-10,o),
(1668,-12,qs),
(1780,-22,o),
(1814,7,qs),
(1824,16,o),
(1833,38,o),
(1833,61,o),
(1812,89,o),
(1795,89,q),
(1730,83,l),
(1695,83,o),
(1651,109,o),
(1617,187,o),
(1617,315,qs),
(1617,1245,ls),
(1617,1374,o),
(1638,1424,qs),
(1662,1478,o),
(1730,1478,q),
(1795,1472,l),
(1812,1472,o),
(1833,1499,o),
(1833,1536,o),
(1814,1554,qs),
(1803,1563,o),
(1766,1576,o),
(1692,1576,o),
(1611,1568,qs),
(1558,1564,ls),
(1531,1561,o),
(1468,1561,o),
(1442,1564,qs),
(1389,1568,ls),
(1362,1571,o),
(1301,1576,o),
(1211,1576,o),
(1186,1554,qs),
(1176,1544,o),
(1167,1523,o),
(1167,1499,o),
(1187,1472,o),
(1204,1472,q),
(1270,1478,o),
(1270,1478,q),
(1305,1478,o),
(1349,1452,o),
(1382,1375,o),
(1382,1245,qs),
(1382,1023,ls),
(1382,972,o),
(1276,972,qs),
(662,972,ls),
(556,972,o),
(556,1023,qs),
(556,1245,ls),
(556,1377,o),
(576,1424,qs),
(599,1478,o),
(668,1478,q),
(732,1472,l),
(771,1472,o),
(771,1518,qs),
(771,1536,o),
(751,1554,qs),
(740,1563,o),
(704,1576,o),
(629,1576,o),
(548,1568,qs),
(494,1564,ls),
(468,1561,o),
(437,1561,qs),
(406,1561,o),
(380,1564,qs),
(327,1568,ls),
(300,1571,o),
(238,1576,o),
(150,1576,o),
(124,1554,qs),
(113,1544,o),
(104,1523,o),
(104,1499,o),
(124,1472,o),
(142,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,315,ls),
(320,186,o),
(299,137,qs),
(276,83,o),
(208,83,q),
(142,89,l),
(124,89,o),
(104,61,o),
(104,23,o),
(124,7,qs),
(135,-2,o),
(171,-15,o),
(246,-15,o),
(327,-8,qs),
(380,-2,ls),
(406,0,o),
(437,0,qs),
(468,0,o),
(494,-2,qs),
(548,-8,ls),
(575,-10,o),
(606,-12,qs),
(716,-22,o),
(751,7,qs),
(762,16,o),
(771,38,o),
(771,61,o),
(751,89,o),
(732,89,q),
(668,83,l),
(632,83,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
0 0 0 148 0 148 142 139 133 132 131 130 125 124 121 120 117 116 110 109 108 107 100 99 98 97 92 91 88 87 83 82 77 76 74 73 68 65 60 59 58 57 52 51 48 46 42 41 36 35 34 33 26 25 24 23 18 17 14 12 9 8 2 1 31 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 61 values pushed */
0 13 0 28 0 13 28 1 0 41 20 19 15 14 12 11 7 7 6 6 8 1 0 39 18 17 16 10 9 5 8 8 12 34 30 29 27 26 22 21 5 4 8 0 0 1 1 0 39 25 24 23 3 2 5 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1937;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,110,o),
(556,187,o),
(556,316,qs),
(556,1245,ls),
(556,1375,o),
(577,1424,qs),
(600,1478,o),
(668,1478,q),
(733,1472,l),
(771,1472,o),
(771,1517,qs),
(771,1536,o),
(752,1554,qs),
(741,1563,o),
(705,1576,o),
(630,1576,o),
(549,1568,qs),
(496,1564,ls),
(470,1561,o),
(407,1561,o),
(381,1564,qs),
(328,1568,ls),
(301,1571,o),
(239,1576,o),
(149,1576,o),
(124,1554,qs),
(114,1544,o),
(105,1523,o),
(105,1499,o),
(125,1472,o),
(144,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,316,ls),
(320,187,o),
(299,138,qs),
(276,84,o),
(208,84,q),
(144,90,l),
(125,90,o),
(105,62,o),
(105,25,o),
(124,8,qs),
(135,-1,o),
(172,-14,o),
(265,-14,o),
(370,-2,qs),
(438,5,o),
(549,-7,qs),
(576,-10,o),
(637,-14,o),
(726,-14,o),
(752,8,qs),
(762,17,o),
(771,39,o),
(771,62,o),
(752,90,o),
(733,90,q),
(668,84,l),
(633,84,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 62 0 62 55 54 53 52 47 46 43 42 38 37 32 31 30 29 22 21 20 19 14 13 9 7 2 1 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 13 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1387,1518,qs),
(1387,1536,o),
(1367,1554,qs),
(1356,1563,o),
(1320,1576,o),
(1245,1576,o),
(1164,1568,qs),
(1111,1564,ls),
(1085,1561,o),
(1022,1561,o),
(992,1564,qs),
(866,1574,ls),
(833,1576,o),
(744,1576,o),
(720,1554,qs),
(709,1544,o),
(700,1523,o),
(700,1499,o),
(720,1472,o),
(738,1472,q),
(813,1478,l),
(849,1478,o),
(896,1452,o),
(935,1374,o),
(935,1245,qs),
(935,524,ls),
(935,316,o),
(845,210,qs),
(804,161,o),
(693,116,o),
(575,116,o),
(521,136,qs),
(340,201,o),
(253,543,qs),
(238,603,o),
(205,603,qs),
(156,603,o),
(156,481,qs),
(156,106,l),
(211,70,o),
(270,46,qs),
(435,-23,o),
(583,-23,qs),
(817,-23,o),
(984,102,qs),
(1171,244,o),
(1171,489,qs),
(1171,1245,ls),
(1171,1375,o),
(1192,1424,qs),
(1215,1478,o),
(1283,1478,q),
(1348,1472,l),
(1387,1472,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 53 0 53 48 47 44 43 41 39 34 33 32 31 23 22 18 16 11 9 2 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1421;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,110,o),
(555,187,o),
(555,316,qs),
(555,738,l),
(616,732,o),
(670,714,qs),
(839,660,o),
(959,420,qs),
(1070,195,o),
(1198,92,qs),
(1265,39,o),
(1417,-12,o),
(1554,-12,o),
(1590,6,qs),
(1606,14,o),
(1625,37,o),
(1625,56,o),
(1623,66,qs),
(1614,112,o),
(1584,112,q),
(1535,102,l),
(1485,102,o),
(1418,170,qs),
(1338,253,o),
(1271,391,qs),
(1161,610,o),
(1020,713,qs),
(894,804,o),
(690,838,q),
(906,941,o),
(1330,1355,qs),
(1455,1477,o),
(1508,1477,q),
(1574,1471,ls),
(1583,1471,o),
(1612,1494,o),
(1612,1523,qs),
(1612,1575,o),
(1520,1575,q),
(1363,1561,l),
(1143,1575,l),
(1058,1575,o),
(1058,1523,qs),
(1058,1508,o),
(1080,1481,o),
(1097,1481,qs),
(1162,1478,ls),
(1204,1478,o),
(1204,1450,qs),
(1204,1407,o),
(1074,1282,qs),
(883,1101,o),
(727,987,qs),
(638,923,o),
(555,898,q),
(555,1245,ls),
(555,1375,o),
(576,1424,qs),
(599,1478,o),
(668,1478,q),
(732,1472,l),
(771,1472,o),
(771,1518,qs),
(771,1536,o),
(751,1554,qs),
(740,1563,o),
(704,1576,o),
(630,1576,o),
(549,1568,qs),
(522,1566,o),
(468,1561,o),
(437,1561,qs),
(406,1561,o),
(380,1564,qs),
(326,1568,ls),
(299,1571,o),
(238,1576,o),
(150,1576,o),
(124,1554,qs),
(113,1544,o),
(104,1523,o),
(104,1499,o),
(124,1472,o),
(143,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,316,ls),
(320,187,o),
(299,138,qs),
(276,84,o),
(208,84,q),
(143,90,l),
(104,90,o),
(104,43,qs),
(104,24,o),
(124,8,qs),
(135,-1,o),
(171,-14,o),
(263,-14,o),
(344,-5,qs),
(389,0,o),
(437,0,qs),
(486,0,o),
(549,-7,qs),
(576,-10,o),
(637,-14,o),
(724,-14,o),
(751,8,qs),
(762,17,o),
(771,39,o),
(771,62,o),
(751,90,o),
(732,90,q),
(668,84,l),
(632,84,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 0 0 117 0 117 105 104 98 97 96 95 85 84 83 82 79 78 77 75 72 69 58 57 56 55 50 49 46 44 40 39 34 33 32 31 24 23 22 21 16 15 13 11 9 7 2 1 23 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
113 88 62 3 0 6 1 33 17 16 13 12 11 7 6 6 6 8 1 0 39 15 14 10 9 4 8 8 12 34 22 21 19 18 5 4 6 0 0 1 1 0 39 20 3 2 3 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1625;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1266,372,q),
(1202,295,o),
(1099,200,o),
(968,129,o),
(851,129,qs),
(648,129,ls),
(555,129,o),
(555,264,qs),
(555,1245,ls),
(555,1376,o),
(576,1424,qs),
(601,1478,o),
(668,1478,q),
(733,1472,l),
(751,1472,o),
(772,1499,o),
(772,1536,o),
(752,1554,qs),
(741,1563,o),
(704,1576,o),
(630,1576,o),
(549,1568,qs),
(496,1564,ls),
(469,1561,o),
(406,1561,o),
(380,1564,qs),
(327,1568,ls),
(300,1571,o),
(239,1576,o),
(149,1576,o),
(124,1554,qs),
(114,1544,o),
(105,1523,o),
(105,1499,o),
(125,1472,o),
(143,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,330,ls),
(320,192,o),
(301,144,qs),
(277,83,o),
(208,83,q),
(143,90,l),
(125,90,o),
(105,61,o),
(105,24,o),
(124,7,qs),
(135,-2,o),
(171,-15,o),
(239,-15,o),
(272,-12,qs),
(370,-5,ls),
(436,0,o),
(505,0,qs),
(1284,0,l),
(1281,33,o),
(1281,138,o),
(1310,274,qs),
(1323,331,o),
(1341,368,o),
(1341,379,qs),
(1341,406,o),
(1317,406,qs),
(1298,406,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
1 0 63 60 55 54 53 52 47 46 43 42 38 37 32 31 30 29 22 21 20 19 14 13 10 8 0 67 1 67 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
13 1 0 5 12 5 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1394;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(627,7,qs),
(638,16,o),
(647,38,o),
(647,61,o),
(626,89,o),
(608,89,q),
(544,83,l),
(508,83,o),
(464,109,o),
(431,186,o),
(431,315,qs),
(431,1115,l),
(504,1004,o),
(822,476,qs),
(931,302,ls),
(975,234,o),
(1002,199,o),
(1018,199,qs),
(1049,199,o),
(1078,255,qs),
(1606,1263,l),
(1596,315,ls),
(1596,187,o),
(1575,138,qs),
(1552,83,o),
(1484,83,q),
(1419,89,l),
(1381,89,o),
(1381,42,qs),
(1381,24,o),
(1400,7,qs),
(1411,-2,o),
(1447,-15,o),
(1522,-15,o),
(1603,-8,qs),
(1656,-2,ls),
(1682,0,o),
(1713,0,qs),
(1744,0,o),
(1770,-2,qs),
(1824,-8,ls),
(1851,-10,o),
(1882,-12,qs),
(1994,-22,o),
(2028,7,qs),
(2038,16,o),
(2047,38,o),
(2047,61,o),
(2027,89,o),
(2009,89,q),
(1944,83,l),
(1908,83,o),
(1864,109,o),
(1832,184,o),
(1832,315,qs),
(1832,1243,ls),
(1832,1385,o),
(1852,1431,qs),
(1872,1480,o),
(1937,1480,q),
(2002,1473,l),
(2019,1473,o),
(2040,1501,o),
(2040,1538,o),
(2020,1556,qs),
(2009,1565,o),
(1973,1578,o),
(1892,1578,o),
(1761,1568,qs),
(1692,1562,o),
(1603,1562,q),
(1077,541,l),
(426,1561,l),
(337,1561,o),
(256,1568,qs),
(222,1571,o),
(157,1575,o),
(87,1575,o),
(72,1556,qs),
(65,1548,o),
(59,1530,o),
(59,1511,o),
(91,1496,o),
(143,1469,o),
(208,1421,o),
(261,1346,o),
(298,1256,o),
(298,1164,qs),
(297,315,ls),
(297,178,o),
(282,137,qs),
(261,83,o),
(195,83,q),
(131,89,l),
(112,89,o),
(92,61,o),
(92,24,o),
(112,7,qs),
(122,-2,o),
(159,-15,o),
(222,-15,o),
(285,-8,qs),
(326,-2,ls),
(346,0,o),
(369,0,q),
(553,-15,l),
(600,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 0 0 106 0 106 101 100 99 98 89 87 81 80 79 78 73 72 69 67 64 63 57 56 55 54 47 46 45 44 39 38 36 35 33 32 30 28 14 13 12 11 6 5 2 1 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 59 values pushed */
94 85 34 3 17 8 1 33 0 17 8 2 8 17 2 53 9 1 8 8 4 1 0 39 7 6 5 3 4 4 12 34 19 18 16 15 11 10 3 7 2 2 0 1 2 39 21 20 14 13 12 1 6 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2115;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(628,7,qs),
(639,16,o),
(649,38,o),
(649,61,o),
(629,89,o),
(610,89,q),
(536,83,l),
(501,83,o),
(457,109,o),
(424,186,o),
(424,315,qs),
(424,1158,l),
(1482,11,l),
(1554,-39,o),
(1591,-39,qs),
(1624,-39,o),
(1624,-9,qs),
(1624,9,o),
(1610,19,qs),
(1599,27,o),
(1571,65,o),
(1571,142,qs),
(1574,1246,ls),
(1574,1385,o),
(1590,1426,qs),
(1610,1480,o),
(1676,1480,q),
(1742,1473,l),
(1759,1473,o),
(1779,1501,o),
(1779,1537,o),
(1760,1554,qs),
(1749,1564,o),
(1712,1577,o),
(1647,1577,o),
(1584,1570,qs),
(1544,1564,ls),
(1524,1562,o),
(1502,1562,q),
(1311,1577,l),
(1262,1577,o),
(1236,1554,qs),
(1225,1545,o),
(1215,1524,o),
(1215,1501,o),
(1236,1473,o),
(1254,1473,q),
(1327,1480,l),
(1362,1480,o),
(1406,1454,o),
(1440,1376,o),
(1440,1246,qs),
(1440,390,l),
(372,1561,l),
(109,1575,l),
(76,1575,o),
(50,1547,o),
(50,1537,qs),
(50,1506,o),
(108,1478,qs),
(145,1461,o),
(223,1378,o),
(291,1253,o),
(291,1189,qs),
(290,315,ls),
(290,178,o),
(274,137,qs),
(254,83,o),
(187,83,q),
(123,89,l),
(84,89,o),
(84,42,qs),
(84,23,o),
(104,7,qs),
(115,-2,o),
(151,-15,o),
(214,-15,o),
(278,-8,qs),
(320,-2,ls),
(340,0,o),
(361,0,q),
(552,-15,l),
(601,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 82 0 82 77 76 75 74 68 66 56 55 54 53 48 47 44 43 42 41 36 35 34 33 28 26 14 13 12 11 6 5 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 13 12 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 16 12 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 13 12 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 16 15 1 3 0 0 13 34 0 12 12 13 12 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1766;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,84,qs),
(672,-23,o),
(912,-23,qs),
(1141,-23,o),
(1328,74,qs),
(1523,175,o),
(1630,354,qs),
(1747,547,o),
(1747,802,qs),
(1747,1014,o),
(1642,1196,qs),
(1538,1377,o),
(1362,1482,qs),
(1175,1592,o),
(950,1592,qs),
(562,1592,o),
(328,1356,qs),
(217,1244,o),
(99,936,o),
(99,792,qs),
(99,297,o)
);
},
{
closed = 1;
nodes = (
(470,1300,qs),
(613,1445,o),
(836,1445,qs),
(1105,1445,o),
(1299,1232,qs),
(1501,1010,o),
(1501,662,qs),
(1501,399,o),
(1360,256,qs),
(1231,127,o),
(1026,127,qs),
(848,127,o),
(690,213,qs),
(612,256,o),
(476,385,o),
(377,559,o),
(320,775,o),
(320,902,qs),
(320,1149,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 35 29 27 18 16 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1250,726,qs),
(1436,873,o),
(1436,1129,qs),
(1436,1342,o),
(1310,1460,qs),
(1243,1522,o),
(1031,1592,o),
(806,1592,o),
(726,1584,qs),
(696,1581,o),
(644,1572,o),
(586,1566,o),
(517,1561,o),
(419,1561,o),
(342,1568,qs),
(317,1571,o),
(260,1576,o),
(170,1576,o),
(144,1554,qs),
(134,1545,o),
(125,1524,o),
(125,1498,o),
(145,1472,o),
(163,1472,q),
(212,1478,l),
(252,1478,o),
(303,1448,o),
(340,1366,o),
(340,1233,qs),
(340,316,ls),
(340,187,o),
(319,138,qs),
(296,84,o),
(228,84,q),
(163,90,l),
(145,90,o),
(125,62,o),
(125,25,o),
(144,8,qs),
(155,-1,o),
(213,-22,o),
(388,-2,qs),
(457,5,o),
(576,-7,qs),
(606,-10,o),
(673,-14,o),
(766,-14,o),
(796,8,qs),
(809,17,o),
(821,39,o),
(821,62,o),
(801,93,o),
(770,93,o),
(759,92,qs),
(738,88,ls),
(727,87,o),
(703,84,o),
(652,84,o),
(608,110,o),
(575,188,o),
(575,316,qs),
(575,631,l),
(711,593,o),
(810,593,qs),
(1081,593,o)
);
},
{
closed = 1;
nodes = (
(940,1423,qs),
(1180,1352,o),
(1180,1059,qs),
(1180,911,o),
(1096,824,qs),
(1009,733,o),
(854,733,qs),
(703,733,o),
(575,803,q),
(575,1331,ls),
(575,1445,o),
(775,1445,qs),
(865,1445,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
66 65 1 0 71 69 65 77 66 77 57 56 51 50 47 46 41 40 39 38 31 30 29 28 19 17 12 11 7 6 0 64 1 64 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 68 values pushed */
68 1 12 11 2 1 0 12 2 33 0 12 13 1 0 1 12 0 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 14 1 11 11 8 1 0 39 10 9 2 8 8 12 34 5 4 2 3 1 1 3 1 0 39 0 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1487;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(728,-158,qs),
(764,-132,ls),
(792,-113,o),
(865,-84,o),
(973,-84,o),
(1019,-104,qs),
(1047,-115,o),
(1109,-173,qs),
(1247,-304,o),
(1364,-368,qs),
(1429,-403,o),
(1568,-441,o),
(1752,-441,o),
(1830,-389,qs),
(1863,-367,o),
(1899,-318,o),
(1899,-283,o),
(1884,-265,qs),
(1878,-257,o),
(1862,-246,o),
(1839,-246,o),
(1827,-253,qs),
(1789,-276,ls),
(1762,-291,o),
(1715,-291,qs),
(1605,-291,o),
(1521,-216,qs),
(1440,-148,ls),
(1295,-27,o),
(1107,1,q),
(1388,59,o),
(1562,264,qs),
(1648,366,o),
(1747,639,o),
(1747,913,o),
(1720,1012,qs),
(1666,1212,o),
(1521,1359,qs),
(1291,1592,o),
(950,1592,qs),
(563,1592,o),
(328,1352,qs),
(99,1120,o),
(99,749,qs),
(99,431,o),
(290,225,qs),
(480,19,o),
(805,-13,q),
(733,-33,o),
(661,-91,o),
(661,-130,o),
(686,-163,o),
(719,-164,o)
);
},
{
closed = 1;
nodes = (
(470,1302,qs),
(614,1445,o),
(836,1445,qs),
(1106,1445,o),
(1299,1234,qs),
(1501,1015,o),
(1501,667,qs),
(1501,402,o),
(1360,258,qs),
(1230,127,o),
(1026,127,qs),
(848,127,o),
(690,214,qs),
(612,258,o),
(476,389,o),
(377,563,o),
(320,781,o),
(320,908,qs),
(320,1154,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 69 67 61 59 0 52 0 52 48 47 40 39 32 31 28 26 13 11 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
22 4 2 4 6 1 33 8 1 5 4 2 4 5 2 53 0 2 1 4 2 1 51 0 6 0 4 5 6 4 1 0 41 0 1 0 3 1 3 1 0 40 0 7 7 0 1 0 39 0 0 0 12 7 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,109,o),
(554,185,o),
(554,315,qs),
(554,696,l),
(658,696,o),
(719,655,qs),
(750,634,o),
(800,569,o),
(889,415,o),
(1044,169,o),
(1132,92,qs),
(1218,15,o),
(1332,-3,qs),
(1501,-30,o),
(1580,10,qs),
(1599,20,o),
(1618,44,o),
(1618,80,o),
(1610,99,qs),
(1603,113,o),
(1574,115,q),
(1517,102,l),
(1456,102,o),
(1400,140,qs),
(1367,163,o),
(1291,247,o),
(1161,468,o),
(1060,576,qs),
(1001,640,o),
(905,695,q),
(921,695,ls),
(1149,695,o),
(1294,807,qs),
(1455,932,o),
(1455,1154,qs),
(1455,1337,o),
(1330,1456,qs),
(1265,1517,o),
(1058,1592,o),
(851,1592,o),
(560,1566,qs),
(502,1561,o),
(379,1561,o),
(320,1568,qs),
(294,1571,o),
(238,1575,o),
(150,1575,o),
(123,1553,qs),
(112,1544,o),
(103,1523,o),
(103,1497,o),
(124,1471,o),
(142,1471,q),
(192,1477,l),
(232,1477,o),
(282,1447,o),
(320,1366,o),
(320,1232,qs),
(320,315,ls),
(320,185,o),
(298,137,qs),
(274,83,o),
(206,83,q),
(142,89,l),
(124,89,o),
(103,61,o),
(103,23,o),
(123,7,qs),
(134,-2,o),
(171,-15,o),
(244,-15,o),
(325,-8,qs),
(378,-2,ls),
(405,0,o),
(468,0,o),
(522,-5,o),
(576,-10,o),
(637,-15,o),
(724,-15,o),
(751,7,qs),
(762,16,o),
(771,38,o),
(771,61,o),
(750,89,o),
(732,89,q),
(668,83,l),
(632,83,o)
);
},
{
closed = 1;
nodes = (
(554,828,q),
(554,1330,ls),
(554,1364,o),
(574,1409,o),
(645,1445,o),
(780,1445,qs),
(995,1445,o),
(1102,1348,qs),
(1153,1303,o),
(1199,1177,o),
(1199,1023,o),
(1170,966,qs),
(1083,799,o),
(842,799,qs),
(733,798,ls),
(622,798,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
89 87 0 0 97 95 87 102 89 102 0 86 0 86 82 81 66 65 64 63 56 54 47 46 44 43 40 39 34 33 32 31 24 23 22 21 16 15 12 11 8 7 2 1 20 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
101 1 16 17 1 33 19 1 16 14 1 11 0 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 18 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
101 1 16 17 1 33 0 13 11 0 11 13 0 53 19 1 16 14 1 11 13 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 18 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1618;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1213,1222,o),
(1184,1343,qs),
(1166,1418,o),
(1161,1564,qs),
(1159,1616,o),
(1119,1616,qs),
(1102,1616,o),
(1070,1574,qs),
(1053,1551,o),
(1043,1544,qs),
(1037,1539,o),
(1028,1537,o),
(1023,1537,o),
(1002,1546,qs),
(890,1592,o),
(717,1592,qs),
(454,1592,o),
(306,1455,qs),
(177,1336,o),
(177,1159,qs),
(177,996,o),
(301,878,qs),
(437,748,o),
(705,687,qs),
(925,636,o),
(1018,537,qs),
(1087,463,o),
(1087,354,qs),
(1087,116,o),
(736,116,qs),
(557,116,o),
(412,229,qs),
(254,353,o),
(233,543,qs),
(224,603,o),
(195,603,qs),
(153,603,o),
(153,481,qs),
(153,127,l),
(266,74,ls),
(474,-23,o),
(743,-23,qs),
(1007,-23,o),
(1158,100,qs),
(1307,223,o),
(1307,432,qs),
(1307,613,o),
(1178,730,qs),
(1111,792,o),
(894,891,o),
(537,984,o),
(456,1069,qs),
(390,1138,o),
(390,1244,qs),
(390,1328,o),
(459,1382,qs),
(539,1446,o),
(689,1446,qs),
(850,1446,o),
(958,1389,qs),
(1014,1359,o),
(1104,1266,o),
(1150,1171,o),
(1169,1143,o),
(1183,1143,qs),
(1213,1143,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 60 58 53 52 50 48 36 34 30 28 24 22 8 6 0 65 1 65 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,1227,o),
(207,1300,o),
(301,1371,o),
(375,1389,o),
(388,1393,qs),
(475,1421,o),
(673,1421,q),
(673,336,ls),
(673,203,o),
(652,147,qs),
(640,115,o),
(596,83,o),
(542,83,o),
(510,88,qs),
(500,89,o),
(479,92,o),
(447,92,o),
(427,61,o),
(427,25,o),
(452,7,qs),
(465,-2,o),
(504,-15,o),
(585,-15,o),
(672,-8,qs),
(730,-2,ls),
(758,0,o),
(791,0,qs),
(824,0,o),
(852,-2,qs),
(910,-8,ls),
(939,-10,o),
(1006,-15,o),
(1097,-15,o),
(1129,7,qs),
(1142,16,o),
(1154,38,o),
(1154,61,o),
(1134,92,o),
(1103,92,o),
(1077,88,o),
(1048,84,qs),
(1036,83,o),
(985,83,o),
(941,116,o),
(908,204,o),
(908,336,qs),
(908,1420,l),
(1262,1420,o),
(1330,1300,qs),
(1341,1280,o),
(1355,1231,o),
(1366,1168,o),
(1392,1168,qs),
(1417,1168,o),
(1431,1238,qs),
(1442,1289,o),
(1469,1382,qs),
(1484,1433,o),
(1520,1540,o),
(1549,1609,o),
(1532,1619,qs),
(1526,1623,o),
(1513,1625,o),
(1497,1625,o),
(1473,1605,o),
(1409,1561,o),
(1346,1561,qs),
(334,1561,ls),
(305,1561,o),
(242,1564,o),
(226,1583,qs),
(194,1625,o),
(174,1625,qs),
(162,1625,o),
(142,1604,o),
(124,1496,o),
(100,1428,qs),
(81,1376,ls),
(72,1351,o),
(58,1299,o),
(49,1241,o),
(49,1171,o),
(73,1171,qs),
(86,1171,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 0 77 76 71 70 67 66 61 60 57 55 53 52 51 50 45 44 41 40 36 35 31 29 20 19 17 13 11 9 0 83 1 83 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
4 15 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
4 15 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1533,0,o),
(1572,-3,o),
(1594,-4,qs),
(1638,-8,ls),
(1659,-9,o),
(1728,-9,o),
(1756,14,qs),
(1767,23,o),
(1776,46,o),
(1776,68,o),
(1755,91,o),
(1730,91,o),
(1701,79,o),
(1644,79,o),
(1603,104,o),
(1577,182,o),
(1577,355,qs),
(1574,1245,ls),
(1574,1303,o),
(1578,1346,qs),
(1590,1478,o),
(1686,1478,q),
(1752,1472,l),
(1789,1472,o),
(1789,1517,qs),
(1789,1536,o),
(1770,1554,qs),
(1759,1563,o),
(1723,1576,o),
(1648,1576,o),
(1567,1568,qs),
(1514,1564,ls),
(1488,1561,o),
(1425,1561,o),
(1399,1564,qs),
(1346,1568,ls),
(1319,1571,o),
(1257,1576,o),
(1169,1576,o),
(1143,1554,qs),
(1132,1544,o),
(1123,1523,o),
(1123,1499,o),
(1143,1472,o),
(1161,1472,q),
(1226,1478,l),
(1261,1478,o),
(1305,1452,o),
(1338,1375,o),
(1338,1245,qs),
(1338,277,l),
(1161,126,o),
(740,126,o),
(627,228,qs),
(507,337,o),
(507,538,qs),
(507,1245,ls),
(507,1377,o),
(527,1424,qs),
(550,1478,o),
(619,1478,q),
(685,1472,l),
(702,1472,o),
(722,1499,o),
(722,1536,o),
(702,1554,qs),
(692,1563,o),
(656,1576,o),
(580,1576,o),
(499,1568,qs),
(446,1564,ls),
(420,1561,o),
(389,1561,qs),
(358,1561,o),
(332,1564,qs),
(278,1568,ls),
(251,1571,o),
(189,1576,o),
(100,1576,o),
(76,1554,qs),
(65,1544,o),
(56,1523,o),
(56,1499,o),
(76,1472,o),
(94,1472,q),
(159,1478,l),
(194,1478,o),
(238,1452,o),
(272,1374,o),
(272,1245,qs),
(272,557,ls),
(272,283,o),
(436,131,qs),
(601,-23,o),
(908,-23,qs),
(1138,-23,o),
(1339,115,q),
(1348,-6,o),
(1411,-6,q),
(1521,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
1 0 97 96 95 93 88 87 86 85 78 77 76 75 70 69 66 65 61 60 55 54 53 52 47 46 39 38 37 36 31 30 27 25 21 20 15 14 13 12 5 3 0 99 1 98 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 69 values pushed */
48 1 9 2 2 1 17 9 2 33 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 21 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 21 4 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1766,1516,qs),
(1766,1536,o),
(1717,1575,o),
(1683,1575,q),
(1517,1561,l),
(1479,1561,o),
(1359,1575,o),
(1238,1575,o),
(1190,1533,o),
(1190,1497,o),
(1211,1472,o),
(1228,1472,q),
(1315,1481,l),
(1369,1481,o),
(1369,1444,qs),
(1369,1358,o),
(1328,1265,qs),
(955,459,l),
(931,401,o),
(923,401,qs),
(919,401,o),
(902,411,o),
(867,495,q),
(500,1305,ls),
(458,1396,o),
(458,1434,qs),
(458,1480,o),
(521,1480,q),
(599,1472,l),
(636,1472,o),
(636,1512,qs),
(636,1536,o),
(584,1575,o),
(533,1575,q),
(264,1561,l),
(207,1561,o),
(113,1575,o),
(20,1575,o),
(-6,1554,qs),
(-18,1544,o),
(-30,1522,o),
(-30,1496,o),
(-9,1471,o),
(9,1471,q),
(64,1478,l),
(80,1478,o),
(111,1465,o),
(165,1402,o),
(222,1275,qs),
(654,340,ls),
(754,121,o),
(860,26,qs),
(904,-14,o),
(971,-38,o),
(1017,-38,o),
(1017,-19,qs),
(1017,-10,o),
(1010,-4,q),
(986,12,ls),
(970,24,o),
(970,49,qs),
(970,103,o),
(1043,274,qs),
(1457,1204,ls),
(1536,1374,o),
(1591,1442,qs),
(1621,1478,o),
(1671,1478,q),
(1728,1471,l),
(1766,1471,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 0 69 0 69 66 65 64 63 62 61 58 57 56 55 50 48 42 41 40 39 36 33 32 31 26 25 24 23 15 14 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(762,-18,qs),
(940,52,o),
(1029,300,qs),
(1251,918,l),
(1475,287,ls),
(1528,142,o),
(1646,42,qs),
(1694,2,o),
(1777,-38,o),
(1797,-38,qs),
(1835,-38,o),
(1835,5,qs),
(1835,16,o),
(1813,32,qs),
(1805,38,o),
(1791,56,o),
(1791,99,o),
(1830,205,qs),
(1921,451,l),
(2181,1205,ls),
(2246,1388,o),
(2292,1442,qs),
(2315,1468,o),
(2359,1479,o),
(2385,1479,q),
(2441,1472,l),
(2459,1472,o),
(2480,1498,o),
(2480,1537,o),
(2455,1556,qs),
(2444,1565,o),
(2413,1576,o),
(2352,1576,o),
(2272,1561,o),
(2193,1561,o),
(2078,1576,o),
(1956,1576,o),
(1907,1534,o),
(1907,1498,o),
(1928,1473,o),
(1945,1473,q),
(2023,1482,l),
(2086,1482,o),
(2086,1404,o),
(2044,1285,qs),
(1752,437,ls),
(1739,402,o),
(1732,390,qs),
(1718,367,o),
(1686,397,qs),
(1670,413,o),
(1651,472,qs),
(1376,1306,ls),
(1341,1415,o),
(1341,1442,qs),
(1341,1460,o),
(1366,1481,o),
(1401,1481,q),
(1477,1473,l),
(1515,1473,o),
(1515,1513,qs),
(1515,1537,o),
(1463,1576,o),
(1377,1576,o),
(1346,1574,qs),
(1226,1564,ls),
(1196,1561,o),
(1163,1561,q),
(972,1576,l),
(927,1576,o),
(900,1554,qs),
(889,1545,o),
(877,1523,o),
(877,1497,o),
(897,1472,o),
(916,1472,q),
(972,1479,l),
(993,1479,o),
(1029,1467,o),
(1083,1406,o),
(1128,1276,q),
(1176,1159,l),
(917,426,ls),
(897,368,o),
(870,368,qs),
(861,368,o),
(839,389,qs),
(822,406,o),
(800,462,qs),
(454,1306,ls),
(413,1407,o),
(413,1435,qs),
(413,1481,o),
(478,1481,q),
(554,1473,l),
(592,1473,o),
(592,1513,qs),
(592,1537,o),
(540,1576,o),
(454,1576,o),
(423,1574,qs),
(302,1564,ls),
(273,1561,o),
(182,1561,o),
(87,1576,o),
(-4,1576,o),
(-30,1554,qs),
(-42,1545,o),
(-54,1523,o),
(-54,1497,o),
(-34,1472,o),
(-15,1472,q),
(41,1479,l),
(56,1479,o),
(72,1470,qs),
(121,1444,o),
(198,1272,q),
(592,338,ls),
(660,178,o),
(678,118,qs),
(686,89,o),
(696,48,o),
(696,16,o),
(680,5,qs),
(669,-3,o),
(669,-17,qs),
(669,-35,o),
(684,-35,qs),
(718,-35,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
1 0 119 117 104 103 102 101 96 95 94 93 92 91 88 87 86 85 71 70 69 68 65 63 61 60 59 58 53 52 51 50 44 42 35 34 33 32 29 27 25 24 23 22 17 16 15 14 0 128 1 128 25 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
124 46 2 8 1 1 33 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 24 2 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
124 46 2 8 1 1 33 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 24 2 0 0 16 0 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2389;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,-14,o),
(505,-14,o),
(553,27,o),
(553,63,o),
(532,89,o),
(516,89,q),
(438,80,l),
(374,80,o),
(374,116,qs),
(374,167,o),
(532,360,q),
(768,631,l),
(1072,245,ls),
(1130,167,o),
(1130,117,qs),
(1130,81,o),
(1027,81,o),
(1012,84,qs),
(1005,86,o),
(997,89,o),
(989,89,qs),
(952,89,o),
(952,49,qs),
(952,24,o),
(1003,-14,o),
(1054,-14,q),
(1324,0,l),
(1384,0,o),
(1476,-14,o),
(1571,-14,o),
(1617,28,o),
(1617,64,o),
(1597,90,o),
(1579,90,q),
(1524,83,l),
(1512,83,o),
(1503,85,qs),
(1479,90,o),
(1446,137,qs),
(945,815,l),
(1369,1362,ls),
(1415,1418,o),
(1477,1479,o),
(1500,1479,q),
(1557,1472,l),
(1595,1472,o),
(1595,1518,qs),
(1595,1537,o),
(1546,1576,o),
(1467,1576,o),
(1387,1561,o),
(1308,1561,o),
(1203,1576,o),
(1082,1576,o),
(1034,1534,o),
(1034,1498,o),
(1055,1473,o),
(1072,1473,q),
(1148,1482,l),
(1212,1482,o),
(1212,1445,qs),
(1212,1366,o),
(1075,1198,qs),
(855,929,l),
(518,1394,ls),
(497,1423,o),
(497,1444,qs),
(497,1481,o),
(562,1481,q),
(639,1473,l),
(676,1473,o),
(676,1513,qs),
(676,1537,o),
(625,1576,o),
(574,1576,q),
(305,1561,l),
(271,1561,o),
(152,1574,qs),
(129,1576,o),
(105,1576,qs),
(81,1576,o),
(63,1570,qs),
(11,1553,o),
(11,1513,qs),
(11,1472,o),
(49,1472,q),
(105,1479,o),
(105,1479,q),
(128,1479,o),
(157,1457,o),
(181,1425,qs),
(678,756,l),
(208,190,ls),
(122,83,o),
(76,83,q),
(19,90,l),
(2,90,o),
(-19,63,o),
(-19,24,o),
(30,-14,o),
(64,-14,q),
(230,0,l),
(267,0,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 0 0 102 0 102 101 100 97 96 95 94 86 85 82 80 77 74 73 72 69 68 67 66 59 58 57 56 53 52 51 50 49 48 45 44 43 42 34 33 32 31 28 25 23 21 17 16 14 13 8 7 6 5 2 1 27 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
90 62 38 10 4 1 3 1 33 15 14 10 9 8 7 4 7 3 3 5 1 0 39 13 12 11 6 4 5 5 12 34 23 22 21 20 17 16 2 7 1 1 0 1 2 39 26 25 24 19 18 5 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1569;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1590,1503,o),
(1590,1532,qs),
(1590,1575,o),
(1507,1575,q),
(1341,1561,l),
(1303,1561,o),
(1189,1575,o),
(1066,1575,o),
(1019,1543,o),
(1019,1507,o),
(1039,1472,o),
(1056,1472,q),
(1133,1481,l),
(1196,1481,o),
(1196,1403,o),
(1127,1300,qs),
(823,827,l),
(472,1342,l),
(428,1415,o),
(428,1444,qs),
(428,1480,o),
(492,1480,q),
(569,1472,l),
(580,1472,o),
(607,1492,o),
(607,1522,qs),
(607,1575,o),
(504,1575,q),
(235,1561,l),
(35,1575,l),
(-13,1575,o),
(-59,1542,o),
(-59,1506,o),
(-39,1471,o),
(-20,1471,q),
(35,1478,l),
(96,1478,o),
(121,1443,qs),
(659,671,l),
(659,330,ls),
(659,199,o),
(639,152,qs),
(627,124,o),
(583,98,o),
(528,98,o),
(496,102,qs),
(486,104,o),
(465,107,o),
(433,107,o),
(413,77,o),
(413,42,o),
(438,22,qs),
(451,13,o),
(507,-6,o),
(658,8,qs),
(716,12,ls),
(744,15,o),
(777,15,qs),
(810,15,o),
(838,12,qs),
(896,8,ls),
(925,5,o),
(992,0,o),
(1084,0,o),
(1115,22,qs),
(1128,32,o),
(1140,53,o),
(1140,77,o),
(1120,107,o),
(1089,107,o),
(1068,104,o),
(1047,101,o),
(1023,98,o),
(971,98,o),
(927,124,o),
(895,200,o),
(895,330,qs),
(895,677,l),
(1404,1443,l),
(1431,1478,o),
(1485,1478,qs),
(1551,1481,ls),
(1560,1481,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
2 0 79 78 77 76 75 74 71 70 69 68 61 60 59 58 55 51 48 47 46 45 38 37 34 33 27 26 25 23 22 21 19 18 13 12 9 8 0 82 2 82 20 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 50 values pushed */
65 43 4 3 1 0 1 33 15 14 13 12 10 9 19 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1372,169,o),
(1432,296,q),
(1431,296,l),
(1461,354,o),
(1461,379,qs),
(1461,416,o),
(1420,416,qs),
(1405,416,o),
(1374,382,qs),
(1219,219,o),
(1145,176,qs),
(1062,129,o),
(931,129,qs),
(451,127,l),
(1401,1464,ls),
(1426,1498,o),
(1426,1528,qs),
(1426,1561,o),
(1366,1561,qs),
(438,1561,ls),
(349,1561,o),
(327,1583,q),
(298,1625,o),
(276,1625,qs),
(265,1625,o),
(244,1604,o),
(221,1468,o),
(185,1355,qs),
(171,1311,o),
(152,1244,o),
(152,1191,o),
(174,1191,qs),
(185,1191,o),
(204,1206,o),
(258,1272,o),
(309,1314,qs),
(339,1338,o),
(411,1383,o),
(534,1431,o),
(678,1431,qs),
(1084,1431,l),
(145,110,ls),
(112,65,o),
(112,45,qs),
(112,0,o),
(190,0,qs),
(1332,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 44 43 40 38 34 32 28 25 23 21 15 13 7 5 0 46 1 46 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 8 1 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1537;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,-181,qs),
(439,-175,o),
(439,-154,qs),
(439,1596,ls),
(439,1606,o),
(442,1613,qs),
(452,1633,o),
(551,1633,q),
(685,1623,l),
(704,1623,o),
(724,1654,o),
(724,1677,o),
(718,1688,qs),
(694,1730,o),
(620,1730,qs),
(259,1730,ls),
(204,1730,o),
(204,1669,qs),
(204,-226,ls),
(204,-261,o),
(225,-288,o),
(251,-288,qs),
(620,-288,ls),
(668,-288,o),
(699,-266,qs),
(712,-256,o),
(724,-235,o),
(724,-212,o),
(704,-181,o),
(685,-181,q),
(551,-191,l),
(479,-191,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
0 0 0 31 0 31 24 23 22 21 17 14 10 7 2 1 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 855;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (1008,0);
ref = slash;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 1 1 15 1 15 9 8 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 0 1 56 0 0 0 14 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1008;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (130,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (855,0);
ref = bracketleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 1 1 32 1 32 25 24 23 22 18 15 11 8 3 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 855;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,982,l),
(564,1362,l),
(821,982,l),
(1004,982,l),
(601,1588,l),
(535,1588,l),
(136,982,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
6 5 3 2 1 0 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
4 1 1 0 1 33 2 1 1 0 1 56 0 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1141;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-55,-174,o),
(-100,-212,o),
(-100,-283,o),
(-57,-322,o),
(-22,-322,qs),
(1381,-322,ls),
(1416,-322,o),
(1459,-283,o),
(1459,-212,o),
(1414,-174,o),
(1379,-174,qs),
(-20,-174,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 7 4 0 11 1 10 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1359;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,1268,qs),
(293,1476,ls),
(215,1583,o),
(153,1596,qs),
(57,1618,o),
(25,1554,qs),
(-2,1500,o),
(45,1432,qs),
(67,1402,o),
(149,1355,qs),
(384,1220,ls),
(414,1202,o),
(432,1202,qs),
(445,1201,o),
(461,1221,o),
(463,1245,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 2 1 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 5 values pushed */
0 0 0 46 1
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1234,-9,l),
(1286,-9,o),
(1314,14,qs),
(1325,23,o),
(1334,45,o),
(1334,66,o),
(1313,95,o),
(1296,95,q),
(1239,87,l),
(1207,87,o),
(1164,100,o),
(1128,175,o),
(1128,354,qs),
(1128,643,ls),
(1128,837,o),
(1036,932,qs),
(982,988,o),
(793,1053,o),
(545,1053,o),
(401,1017,q),
(395,1017,o),
(355,1042,qs),
(326,1060,o),
(286,1060,qs),
(248,1060,o),
(248,1010,qs),
(248,881,o),
(222,799,qs),
(210,759,o),
(210,741,qs),
(210,711,o),
(268,711,o),
(315,775,qs),
(377,859,o),
(446,888,qs),
(479,902,o),
(551,911,o),
(656,911,o),
(712,900,qs),
(895,864,o),
(895,667,qs),
(895,553,l),
(755,627,o),
(584,627,qs),
(405,627,o),
(286,553,qs),
(147,466,o),
(147,301,qs),
(147,149,o),
(254,64,qs),
(307,22,o),
(467,-24,o),
(619,-24,o),
(664,-16,qs),
(810,12,o),
(897,99,q),
(908,-6,o),
(966,-6,q),
(1080,0,l)
);
},
{
closed = 1;
nodes = (
(796,117,o),
(644,117,qs),
(520,117,o),
(383,220,o),
(383,323,qs),
(383,362,o),
(400,394,qs),
(456,501,o),
(643,501,qs),
(777,501,o),
(895,427,q),
(895,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 69 67 62 60 51 50 49 48 40 39 38 37 35 33 27 26 21 20 15 13 6 5 0 58 1 56 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
16 1 10 2 70 59 2 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 12 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,2,qs),
(336,25,ls),
(365,34,o),
(413,34,o),
(448,25,qs),
(560,-4,ls),
(638,-24,o),
(724,-24,qs),
(966,-24,o),
(1126,138,qs),
(1285,299,o),
(1285,531,qs),
(1285,766,o),
(1134,910,qs),
(986,1053,o),
(741,1053,qs),
(549,1053,o),
(433,955,q),
(433,1600,ls),
(433,1686,o),
(422,1710,qs),
(415,1723,o),
(389,1730,o),
(357,1730,o),
(284,1716,o),
(210,1716,qs),
(180,1716,o),
(117,1722,qs),
(76,1726,ls),
(55,1728,o),
(1,1728,o),
(-31,1696,o),
(-31,1682,qs),
(-31,1638,o),
(43,1632,qs),
(81,1628,o),
(147,1602,o),
(195,1521,o),
(195,1348,qs),
(195,300,ls),
(195,167,o),
(186,120,qs),
(181,93,o),
(163,64,o),
(111,23,o),
(111,2,qs),
(111,-31,o),
(146,-31,qs),
(170,-31,o)
);
},
{
closed = 1;
nodes = (
(449,802,o),
(476,828,qs),
(557,902,o),
(671,902,qs),
(834,902,o),
(930,800,qs),
(1035,689,o),
(1035,472,qs),
(1035,308,o),
(940,218,qs),
(845,126,o),
(672,126,qs),
(497,126,o),
(433,257,q),
(433,766,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 60 58 52 50 45 44 41 39 33 31 25 24 23 21 18 17 0 48 1 48 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1365;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1094,784,qs),
(1076,832,o),
(1070,886,qs),
(1067,913,o),
(1066,974,o),
(1066,1053,o),
(1033,1053,qs),
(1022,1053,o),
(1006,1046,qs),
(974,1031,ls),
(956,1023,o),
(922,1009,o),
(896,1009,o),
(881,1016,qs),
(802,1053,o),
(686,1053,qs),
(522,1053,o),
(383,974,qs),
(318,937,o),
(213,835,o),
(140,715,o),
(100,583,o),
(100,396,o),
(143,296,qs),
(230,96,o),
(440,16,qs),
(655,-66,o),
(859,19,qs),
(907,39,o),
(993,92,o),
(1059,153,o),
(1097,218,o),
(1097,262,o),
(1067,292,o),
(1016,287,o),
(990,249,qs),
(903,126,o),
(728,126,qs),
(570,126,o),
(462,245,qs),
(348,371,o),
(348,574,qs),
(348,734,o),
(442,822,qs),
(486,862,o),
(599,901,o),
(778,901,o),
(845,878,qs),
(888,864,o),
(968,811,o),
(1049,709,o),
(1075,709,qs),
(1104,709,o),
(1104,739,qs),
(1104,757,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 42 41 39 37 17 15 8 7 3 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 38 values pushed */
0 2 0 2 56 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = c;
unicode = 99;
},
{
glyphname = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(977,-6,q),
(1087,0,ls),
(1098,0,o),
(1137,-3,o),
(1160,-4,qs),
(1204,-8,ls),
(1225,-9,o),
(1292,-9,o),
(1320,14,qs),
(1331,23,o),
(1340,46,o),
(1340,67,o),
(1319,85,o),
(1303,85,q),
(1246,78,l),
(1210,78,o),
(1169,102,o),
(1142,180,o),
(1142,354,qs),
(1142,1600,ls),
(1142,1688,o),
(1131,1710,qs),
(1124,1723,o),
(1100,1730,o),
(1067,1730,o),
(1046,1726,o),
(1035,1725,qs),
(973,1718,ls),
(950,1716,o),
(891,1716,o),
(828,1722,qs),
(807,1724,o),
(765,1728,o),
(711,1728,o),
(680,1696,o),
(680,1682,qs),
(680,1638,o),
(752,1632,qs),
(790,1628,o),
(856,1603,o),
(905,1520,o),
(905,1350,qs),
(905,997,l),
(787,1053,o),
(634,1053,qs),
(399,1053,o),
(238,896,qs),
(80,741,o),
(80,517,qs),
(80,271,o),
(231,126,qs),
(304,55,o),
(513,-23,o),
(789,-23,o),
(914,54,q),
(933,-6,o)
);
},
{
closed = 1;
nodes = (
(528,126,o),
(427,243,qs),
(322,365,o),
(322,567,qs),
(322,722,o),
(407,810,qs),
(494,901,o),
(649,901,qs),
(818,901,o),
(905,788,q),
(905,201,l),
(825,126,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
67 66 60 58 55 52 51 50 49 47 42 41 40 39 31 30 26 25 22 21 11 9 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1342;
}
);
note = d;
unicode = 100;
},
{
glyphname = e;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,-24,o),
(803,-24,o),
(1019,67,o),
(1088,158,qs),
(1127,209,o),
(1127,247,qs),
(1127,255,o),
(1123,264,qs),
(1107,300,o),
(1085,300,qs),
(1050,300,o),
(1019,254,qs),
(1001,228,o),
(969,204,qs),
(868,126,o),
(747,126,qs),
(607,126,o),
(504,196,qs),
(387,276,o),
(353,422,q),
(528,464,ls),
(840,538,o),
(1095,631,qs),
(1126,642,o),
(1137,666,qs),
(1142,676,o),
(1145,697,o),
(1145,736,o),
(1104,808,qs),
(1045,907,o),
(956,968,qs),
(833,1053,o),
(669,1053,qs),
(423,1053,o),
(257,888,qs),
(182,814,o),
(100,620,o),
(100,388,o),
(191,188,o),
(347,49,o)
);
},
{
closed = 1;
nodes = (
(338,566,qs),
(338,583,ls),
(338,759,o),
(464,841,qs),
(557,901,o),
(662,901,qs),
(769,901,o),
(836,839,qs),
(865,812,o),
(893,749,o),
(893,714,o),
(890,708,qs),
(879,690,o),
(624,622,qs),
(339,548,l),
(338,557,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
50 48 38 37 30 28 24 22 7 5 5 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-10,o),
(303,-5,o),
(417,5,o),
(532,-8,qs),
(555,-10,o),
(578,-12,qs),
(671,-22,o),
(717,5,qs),
(732,14,o),
(749,36,o),
(749,62,o),
(729,90,o),
(712,90,q),
(643,82,l),
(574,82,o),
(550,130,qs),
(522,188,o),
(522,357,qs),
(522,906,l),
(711,902,ls),
(769,902,o),
(800,929,qs),
(813,941,o),
(824,969,o),
(824,991,o),
(820,1004,qs),
(807,1053,o),
(736,1053,qs),
(522,1047,l),
(522,1306,ls),
(522,1476,o),
(576,1561,qs),
(602,1601,o),
(671,1638,o),
(755,1638,o),
(795,1598,qs),
(817,1577,o),
(860,1503,o),
(887,1419,o),
(904,1404,o),
(918,1404,qs),
(946,1404,o),
(946,1440,qs),
(946,1730,l),
(832,1757,o),
(639,1757,o),
(556,1724,qs),
(286,1615,o),
(286,1140,qs),
(286,1049,l),
(273,1050,o),
(257,1050,qs),
(194,1052,ls),
(178,1053,o),
(126,1053,o),
(90,1008,o),
(90,952,o),
(110,930,qs),
(121,918,o),
(161,901,o),
(222,900,o),
(286,902,q),
(286,357,ls),
(286,282,o),
(280,230,qs),
(263,82,o),
(181,82,q),
(131,89,l),
(114,89,o),
(93,62,o),
(93,46,qs),
(93,-15,o),
(194,-15,qs),
(215,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 61 60 59 58 54 52 46 44 39 38 33 31 28 27 22 18 13 11 7 6 5 4 0 73 1 73 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
29 1 7 5 23 1 3 4 2 33 0 6 7 4 7 6 4 53 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 11 10 2 3 1 1 0 1 0 39 12 1 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-78,qs),
(113,-149,o),
(113,-257,qs),
(113,-367,o),
(229,-436,qs),
(366,-516,o),
(641,-516,qs),
(908,-516,o),
(1066,-425,qs),
(1220,-336,o),
(1220,-190,qs),
(1220,-66,o),
(1105,2,qs),
(1044,38,o),
(849,85,o),
(519,106,o),
(438,134,qs),
(400,147,o),
(400,178,qs),
(400,203,o),
(446,224,qs),
(470,234,o),
(547,247,o),
(613,247,o),
(635,247,o),
(647,246,q),
(865,252,o),
(1004,380,qs),
(1143,508,o),
(1143,699,qs),
(1143,844,o),
(1021,938,q),
(1139,942,o),
(1269,1010,o),
(1269,1060,qs),
(1269,1082,o),
(1242,1114,o),
(1179,1114,o),
(1140,1090,qs),
(1104,1068,ls),
(1027,1018,o),
(889,1016,q),
(787,1053,o),
(674,1053,qs),
(429,1053,o),
(278,940,qs),
(206,886,o),
(126,735,o),
(126,590,o),
(140,540,qs),
(187,376,o),
(363,297,q),
(282,269,o),
(199,175,o),
(199,127,qs),
(199,28,o),
(332,-33,q),
(273,-52,o)
);
},
{
closed = 1;
nodes = (
(380,794,qs),
(433,901,o),
(608,901,qs),
(734,901,o),
(812,827,qs),
(905,740,o),
(905,573,qs),
(905,387,o),
(667,387,qs),
(361,387,o),
(361,707,qs),
(361,758,o)
);
},
{
closed = 1;
nodes = (
(413,-103,o),
(491,-80,q),
(792,-91,o),
(928,-149,qs),
(988,-175,o),
(1034,-235,o),
(1034,-292,o),
(1001,-336,o),
(892,-378,o),
(723,-378,qs),
(333,-378,o),
(333,-223,qs),
(333,-182,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
80 79 73 71 67 65 61 59 51 49 42 41 34 32 31 30 25 24 20 19 16 15 14 12 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 75 values pushed */
5 1 4 8 0 1 11 6 2 33 0 2 0 2 55 0 3 1 9 1 3 9 53 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1276;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,46,qs),
(749,62,o),
(728,89,o),
(711,89,q),
(661,82,l),
(632,82,o),
(590,97,o),
(549,176,o),
(549,342,qs),
(549,711,l),
(606,785,o),
(681,832,qs),
(719,855,o),
(803,882,o),
(910,882,o),
(991,836,o),
(1053,735,o),
(1053,627,qs),
(1053,342,ls),
(1053,189,o),
(1013,82,o),
(954,82,q),
(901,89,l),
(883,89,o),
(862,62,o),
(862,37,o),
(866,26,qs),
(882,-15,o),
(968,-15,q),
(1179,0,l),
(1213,0,o),
(1328,-12,qs),
(1420,-22,o),
(1456,7,qs),
(1467,16,o),
(1475,37,o),
(1475,61,o),
(1456,89,o),
(1439,89,q),
(1386,82,l),
(1362,82,o),
(1326,100,o),
(1289,183,o),
(1289,342,qs),
(1289,685,ls),
(1289,782,o),
(1263,853,qs),
(1190,1053,o),
(937,1053,qs),
(715,1053,o),
(549,874,q),
(549,1600,ls),
(549,1688,o),
(538,1710,qs),
(532,1723,o),
(507,1730,o),
(470,1730,o),
(442,1725,qs),
(380,1718,ls),
(357,1716,o),
(298,1716,o),
(234,1722,qs),
(192,1726,ls),
(172,1728,o),
(118,1728,o),
(87,1696,o),
(87,1682,qs),
(87,1638,o),
(160,1632,qs),
(197,1628,o),
(263,1603,o),
(312,1520,o),
(312,1351,qs),
(312,342,ls),
(312,195,o),
(287,137,qs),
(263,82,o),
(207,82,q),
(157,89,l),
(140,89,o),
(119,62,o),
(119,23,o),
(138,7,qs),
(149,-2,o),
(188,-15,o),
(241,-15,o),
(364,0,o),
(428,0,q),
(644,-15,l),
(749,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 0 86 85 84 83 75 74 68 67 66 65 61 58 51 50 49 48 41 39 33 32 29 28 25 24 12 11 10 9 4 3 0 89 2 89 17 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 50 values pushed */
79 38 2 2 13 1 33 6 5 2 4 4 14 34 0 13 13 7 1 0 39 0 7 7 15 34 15 14 12 11 9 8 3 7 2 2 0 1 2 39 10 1 16 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1534;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,1357,o),
(558,1449,o),
(520,1494,qs),
(502,1516,o),
(445,1543,o),
(339,1543,o),
(296,1498,qs),
(276,1477,o),
(253,1420,o),
(253,1324,o),
(288,1282,qs),
(307,1260,o),
(364,1233,o),
(439,1233,o),
(496,1260,o),
(536,1303,o)
);
},
{
closed = 1;
nodes = (
(746,46,qs),
(746,62,o),
(726,89,o),
(708,89,q),
(659,82,l),
(629,82,o),
(587,102,o),
(547,189,o),
(547,357,qs),
(547,897,ls),
(547,979,o),
(522,1009,qs),
(508,1025,o),
(467,1025,q),
(316,1013,l),
(169,1025,l),
(134,1025,o),
(117,1006,qs),
(110,998,o),
(104,980,o),
(104,953,o),
(143,933,o),
(197,918,o),
(251,898,o),
(276,863,o),
(284,846,qs),
(310,793,o),
(310,651,qs),
(310,357,ls),
(310,282,o),
(304,230,qs),
(287,82,o),
(204,82,q),
(155,89,l),
(138,89,o),
(117,62,o),
(117,23,o),
(136,7,qs),
(147,-2,o),
(186,-15,o),
(239,-15,o),
(362,0,o),
(426,0,q),
(641,-15,l),
(746,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
18 16 57 56 55 54 47 46 44 43 28 27 26 25 20 19 16 60 18 60 10 9 2 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
45 1 4 6 1 33 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
45 1 4 6 1 33 0 0 0 1 1 0 39 0 1 1 12 34 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
45 1 4 6 1 33 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = i;
unicode = 105;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(602,1357,o),
(602,1449,o),
(564,1494,qs),
(546,1516,o),
(489,1543,o),
(383,1543,o),
(340,1498,qs),
(320,1477,o),
(297,1420,o),
(297,1324,o),
(332,1282,qs),
(351,1260,o),
(408,1233,o),
(483,1233,o),
(540,1260,o),
(580,1303,o)
);
},
{
closed = 1;
nodes = (
(40,-516,o),
(129,-516,qs),
(340,-516,o),
(457,-374,qs),
(587,-215,o),
(587,104,qs),
(587,897,ls),
(587,982,o),
(572,1009,qs),
(563,1025,o),
(525,1025,q),
(356,1013,l),
(317,1013,o),
(268,1019,qs),
(251,1021,o),
(223,1025,o),
(174,1025,o),
(156,1006,qs),
(149,998,o),
(143,980,o),
(143,953,o),
(183,933,o),
(287,904,o),
(306,878,qs),
(349,814,o),
(349,636,qs),
(349,104,ls),
(349,-191,o),
(300,-302,qs),
(276,-354,o),
(213,-388,o),
(127,-388,o),
(78,-349,qs),
(46,-323,o),
(6,-240,qs),
(-19,-194,o),
(-47,-194,qs),
(-74,-194,o),
(-74,-226,qs),
(-74,-488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
54 52 45 42 39 38 24 23 19 17 10 9 2 1 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 1 0 0 4 1 0 1 0 41 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 0 0 1 1 0 39 0 1 1 12 34 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 1 0 0 4 1 0 1 0 41 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,-2,qs),
(586,-12,ls),
(679,-22,o),
(715,7,qs),
(726,16,o),
(735,37,o),
(735,61,o),
(715,89,o),
(699,89,q),
(646,82,l),
(597,82,o),
(549,192,o),
(549,321,qs),
(549,499,l),
(756,286,l),
(900,144,ls),
(958,87,o),
(1030,25,o),
(1083,-9,o),
(1120,-9,q),
(1242,0,ls),
(1254,0,o),
(1291,-3,o),
(1332,-6,o),
(1373,-9,o),
(1435,-9,o),
(1458,14,qs),
(1467,23,o),
(1475,45,o),
(1475,60,o),
(1472,69,qs),
(1460,105,o),
(1437,105,q),
(1392,98,l),
(1299,98,o),
(1175,213,qs),
(792,574,l),
(999,677,o),
(1204,857,qs),
(1288,931,o),
(1331,931,q),
(1387,924,l),
(1404,924,o),
(1425,953,o),
(1425,965,qs),
(1425,1029,o),
(1336,1029,qs),
(1289,1029,o),
(1210,1013,o),
(1110,1013,o),
(998,1029,o),
(886,1029,o),
(863,1006,qs),
(853,996,o),
(846,974,o),
(846,953,o),
(867,924,o),
(883,924,q),
(942,931,l),
(1018,931,o),
(1018,845,o),
(872,752,qs),
(728,659,o),
(549,597,q),
(549,1600,ls),
(549,1688,o),
(536,1713,qs),
(527,1730,o),
(485,1730,q),
(332,1716,l),
(298,1716,o),
(235,1722,qs),
(214,1724,o),
(172,1728,o),
(118,1728,o),
(87,1696,o),
(87,1682,qs),
(87,1638,o),
(160,1632,qs),
(198,1628,o),
(264,1602,o),
(312,1519,o),
(312,1348,qs),
(312,342,ls),
(312,270,o),
(306,220,qs),
(289,82,o),
(210,82,q),
(157,89,l),
(139,89,o),
(119,62,o),
(119,37,o),
(123,26,qs),
(139,-15,o),
(225,-15,q),
(438,0,l),
(468,0,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 0 88 87 86 85 77 76 75 74 71 70 64 63 62 61 56 55 54 53 50 48 47 46 45 44 39 38 37 36 28 27 26 25 22 21 9 8 7 6 0 96 2 96 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
82 59 32 3 1 6 1 33 5 4 2 3 3 14 34 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 15 34 19 18 14 13 2 5 1 1 0 1 2 39 17 16 15 20 4 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1425;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,100,o),
(537,182,o),
(537,342,qs),
(537,1600,ls),
(537,1683,o),
(521,1713,qs),
(511,1730,o),
(473,1730,q),
(320,1716,l),
(285,1716,o),
(220,1722,qs),
(179,1726,ls),
(159,1728,o),
(105,1728,o),
(74,1696,o),
(74,1682,qs),
(74,1638,o),
(148,1632,qs),
(185,1628,o),
(251,1602,o),
(300,1520,o),
(300,1348,qs),
(300,342,ls),
(300,186,o),
(280,136,qs),
(260,82,o),
(201,82,q),
(148,89,l),
(131,89,o),
(110,62,o),
(110,22,o),
(130,7,qs),
(141,-2,o),
(182,-15,o),
(248,-15,o),
(362,0,o),
(457,0,o),
(481,-2,qs),
(574,-12,ls),
(667,-23,o),
(703,7,qs),
(714,16,o),
(723,37,o),
(723,61,o),
(703,89,o),
(686,89,q),
(634,82,l),
(609,82,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 0 0 47 0 47 40 39 38 37 34 33 21 20 19 18 13 12 11 10 2 1 10 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
7 6 2 5 5 14 34 9 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,-10,o),
(317,-5,o),
(376,0,o),
(474,0,o),
(579,-15,o),
(631,-15,qs),
(735,-15,o),
(735,46,qs),
(735,62,o),
(716,89,o),
(699,89,q),
(649,82,l),
(620,82,o),
(577,102,o),
(536,188,o),
(536,357,qs),
(536,746,l),
(698,890,o),
(846,890,qs),
(941,890,o),
(1048,771,o),
(1048,665,qs),
(1048,357,ls),
(1048,199,o),
(1029,142,qs),
(1009,82,o),
(949,82,q),
(897,89,l),
(879,89,o),
(858,62,o),
(858,37,o),
(862,26,qs),
(878,-15,o),
(964,-15,q),
(1175,0,l),
(1205,0,o),
(1230,-2,qs),
(1323,-12,ls),
(1415,-22,o),
(1451,7,qs),
(1462,16,o),
(1471,37,o),
(1471,61,o),
(1452,89,o),
(1435,89,q),
(1382,82,l),
(1358,82,o),
(1322,105,o),
(1285,197,o),
(1285,357,qs),
(1285,664,ls),
(1285,697,o),
(1278,741,q),
(1439,890,o),
(1602,890,qs),
(1689,890,o),
(1795,771,o),
(1795,665,qs),
(1795,357,ls),
(1795,200,o),
(1776,144,qs),
(1755,82,o),
(1696,82,q),
(1644,89,l),
(1627,89,o),
(1605,62,o),
(1605,46,qs),
(1605,-15,o),
(1712,-15,q),
(1923,0,l),
(1953,0,o),
(1977,-2,qs),
(2070,-12,ls),
(2164,-23,o),
(2198,7,qs),
(2209,16,o),
(2218,37,o),
(2218,61,o),
(2198,89,o),
(2182,89,q),
(2130,82,l),
(2106,82,o),
(2069,105,o),
(2033,198,o),
(2033,357,qs),
(2033,705,ls),
(2033,861,o),
(1932,957,qs),
(1883,1003,o),
(1744,1053,o),
(1598,1053,o),
(1540,1039,qs),
(1370,998,o),
(1244,876,q),
(1200,959,o),
(1029,1053,o),
(910,1053,qs),
(715,1053,o),
(536,908,q),
(534,982,o),
(510,1010,qs),
(498,1025,o),
(457,1025,q),
(306,1013,l),
(159,1025,l),
(94,1025,o),
(94,980,qs),
(94,963,o),
(133,947,o),
(186,935,o),
(241,919,o),
(256,899,qs),
(300,841,o),
(300,651,qs),
(300,357,ls),
(300,281,o),
(294,228,qs),
(277,82,o),
(195,82,q),
(145,89,l),
(128,89,o),
(107,62,o),
(107,46,qs),
(107,-15,o),
(208,-15,qs),
(229,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 0 122 121 120 118 115 114 113 112 107 105 99 98 97 96 92 89 81 80 79 78 71 69 63 62 61 60 57 54 46 45 44 43 35 34 29 27 23 22 20 19 7 6 5 4 0 125 1 125 24 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
26 21 2 12 3 108 31 2 1 12 2 33 18 1 12 12 3 1 0 39 6 5 4 3 3 3 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 23 5 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
26 21 2 12 3 108 31 2 1 12 2 33 4 1 3 3 15 34 18 1 12 12 5 1 0 39 6 1 5 5 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 23 5 0 0 13 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2278;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(737,46,qs),
(737,62,o),
(716,89,o),
(699,89,q),
(649,82,l),
(620,82,o),
(578,97,o),
(537,176,o),
(537,342,qs),
(537,711,l),
(594,785,o),
(669,832,qs),
(707,855,o),
(791,882,o),
(898,882,o),
(938,856,qs),
(1041,790,o),
(1041,607,qs),
(1041,342,ls),
(1041,189,o),
(1001,82,o),
(942,82,q),
(889,89,l),
(871,89,o),
(850,62,o),
(850,37,o),
(854,26,qs),
(870,-15,o),
(956,-15,q),
(1167,0,l),
(1201,0,o),
(1316,-12,qs),
(1408,-22,o),
(1444,7,qs),
(1455,16,o),
(1463,37,o),
(1463,61,o),
(1444,89,o),
(1427,89,q),
(1374,82,l),
(1350,82,o),
(1314,100,o),
(1277,183,o),
(1277,342,qs),
(1277,685,ls),
(1277,782,o),
(1251,853,qs),
(1178,1053,o),
(925,1053,qs),
(703,1053,o),
(537,874,q),
(537,901,ls),
(537,982,o),
(512,1010,qs),
(500,1025,o),
(457,1025,q),
(306,1013,l),
(159,1025,l),
(124,1025,o),
(107,1006,qs),
(100,998,o),
(94,980,o),
(94,953,o),
(133,934,o),
(237,903,o),
(256,878,qs),
(300,818,o),
(300,651,qs),
(300,342,ls),
(300,195,o),
(275,137,qs),
(251,82,o),
(195,82,q),
(145,89,l),
(129,89,o),
(107,62,o),
(107,23,o),
(126,7,qs),
(137,-2,o),
(176,-15,o),
(229,-15,o),
(352,0,o),
(416,0,q),
(632,-15,l),
(737,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 0 81 80 79 78 70 69 63 62 61 60 56 53 46 45 44 43 36 34 29 28 26 25 12 11 10 9 4 3 0 84 2 84 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
27 1 12 4 74 33 2 2 12 2 33 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 15 3 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
27 1 12 4 74 33 2 2 12 2 33 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 15 3 0 0 13 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1522;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,266,qs),
(293,-24,o),
(677,-24,qs),
(943,-24,o),
(1096,137,qs),
(1241,289,o),
(1241,532,qs),
(1241,738,o),
(1104,887,qs),
(951,1053,o),
(673,1053,qs),
(433,1053,o),
(266,894,qs),
(189,820,o),
(100,624,o),
(100,538,qs),
(100,379,o)
);
},
{
closed = 1;
nodes = (
(617,901,qs),
(766,901,o),
(870,785,qs),
(923,726,o),
(989,545,o),
(989,343,o),
(968,288,qs),
(907,127,o),
(723,127,qs),
(573,127,o),
(464,251,qs),
(412,311,o),
(349,485,o),
(349,673,o),
(370,730,qs),
(432,901,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 30 24 22 14 12 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(7,-438,o),
(7,-463,o),
(11,-474,qs),
(27,-516,o),
(108,-516,qs),
(316,-510,l),
(532,-516,ls),
(590,-516,o),
(616,-495,qs),
(628,-486,o),
(637,-464,o),
(637,-438,o),
(616,-411,o),
(599,-411,q),
(550,-419,l),
(520,-419,o),
(477,-405,o),
(438,-331,o),
(438,-169,qs),
(438,46,l),
(551,-24,o),
(726,-24,qs),
(962,-24,o),
(1122,134,qs),
(1281,291,o),
(1281,515,qs),
(1281,766,o),
(1130,910,qs),
(1057,979,o),
(848,1053,o),
(559,1053,o),
(433,968,q),
(424,1007,o),
(404,1019,qs),
(395,1025,o),
(371,1029,o),
(314,1029,o),
(243,1013,o),
(153,1013,o),
(88,1025,o),
(39,1025,o),
(26,1020,qs),
(-6,1005,o),
(-6,973,qs),
(-6,950,o),
(27,937,qs),
(42,931,o),
(108,913,o),
(131,900,qs),
(200,864,o),
(200,647,qs),
(200,-169,ls),
(200,-312,o),
(176,-368,qs),
(153,-419,o),
(95,-419,q),
(46,-411,l),
(29,-411,o)
);
},
{
closed = 1;
nodes = (
(461,828,o),
(490,846,qs),
(582,902,o),
(682,902,qs),
(845,902,o),
(940,795,qs),
(1039,682,o),
(1039,464,qs),
(1039,309,o),
(953,219,qs),
(911,175,o),
(789,126,o),
(671,126,o),
(631,136,qs),
(495,168,o),
(438,288,q),
(438,806,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 71 69 62 61 0 57 0 57 53 49 44 43 42 41 36 34 27 26 21 20 19 18 17 16 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1361;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(942,-326,o),
(918,-378,qs),
(895,-429,o),
(837,-429,q),
(788,-421,l),
(771,-421,o),
(749,-448,o),
(749,-473,o),
(753,-484,qs),
(769,-526,o),
(850,-526,qs),
(1058,-520,l),
(1274,-526,ls),
(1332,-526,o),
(1358,-505,qs),
(1370,-496,o),
(1379,-474,o),
(1379,-448,o),
(1358,-421,o),
(1341,-421,q),
(1292,-429,o),
(1292,-429,q),
(1262,-429,o),
(1219,-415,o),
(1180,-341,o),
(1180,-179,qs),
(1180,723,ls),
(1180,863,o),
(1202,932,qs),
(1211,961,o),
(1234,985,o),
(1252,997,o),
(1265,1008,o),
(1265,1022,qs),
(1265,1053,o),
(1230,1053,qs),
(1170,1053,o),
(979,952,q),
(844,1053,o),
(399,1053,o),
(238,896,qs),
(80,741,o),
(80,517,qs),
(80,271,o),
(231,126,qs),
(304,55,o),
(513,-23,o),
(811,-23,o),
(942,73,q),
(942,-179,ls)
);
},
{
closed = 1;
nodes = (
(571,902,o),
(689,902,o),
(732,892,qs),
(881,855,o),
(942,733,q),
(942,241,l),
(845,126,o),
(700,126,qs),
(537,126,o),
(432,243,qs),
(381,300,o),
(322,463,o),
(322,643,o),
(365,767,o),
(449,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
63 62 57 55 46 45 44 43 39 35 30 29 27 26 14 12 10 9 2 1 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 13 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 16 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 13 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 16 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1330;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,-10,o),
(317,-5,o),
(431,5,o),
(546,-8,qs),
(569,-10,o),
(592,-12,qs),
(687,-23,o),
(732,5,qs),
(746,14,o),
(763,36,o),
(763,62,o),
(743,90,o),
(726,90,q),
(657,82,l),
(587,82,o),
(564,124,qs),
(536,176,o),
(536,342,qs),
(536,664,l),
(571,738,o),
(637,796,qs),
(671,825,o),
(751,863,o),
(868,863,o),
(920,830,qs),
(948,811,o),
(992,746,o),
(1016,654,o),
(1042,654,qs),
(1053,654,o),
(1070,673,o),
(1070,687,qs),
(1072,934,ls),
(1072,1053,o),
(886,1053,qs),
(832,1053,o),
(782,1038,qs),
(630,995,o),
(536,851,q),
(536,921,ls),
(536,1025,o),
(457,1025,q),
(306,1013,l),
(159,1025,l),
(124,1025,o),
(107,1006,qs),
(100,998,o),
(94,980,o),
(94,953,o),
(133,933,o),
(186,918,o),
(252,894,o),
(276,845,qs),
(300,793,o),
(300,647,qs),
(300,342,ls),
(300,194,o),
(275,136,qs),
(252,82,o),
(195,82,q),
(145,89,l),
(128,89,o),
(107,62,o),
(107,46,qs),
(107,-15,o),
(208,-15,qs),
(229,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 0 54 53 52 51 43 42 38 36 32 30 25 24 22 21 7 6 5 4 0 66 1 66 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 45 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 1 53 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 1 53 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1149;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(953,1026,qs),
(934,1008,ls),
(925,1000,o),
(900,1000,o),
(878,1008,qs),
(763,1053,o),
(615,1053,qs),
(403,1053,o),
(276,955,qs),
(166,869,o),
(166,759,qs),
(166,641,o),
(255,560,qs),
(304,516,o),
(467,440,o),
(754,368,o),
(826,324,qs),
(862,302,o),
(893,257,o),
(893,189,o),
(861,135,o),
(780,94,o),
(668,94,qs),
(503,94,o),
(373,164,qs),
(312,196,o),
(227,283,o),
(195,373,o),
(170,373,qs),
(156,373,o),
(140,356,o),
(140,345,qs),
(140,95,l),
(206,49,o),
(402,2,qs),
(515,-24,o),
(634,-24,qs),
(902,-24,o),
(1023,84,qs),
(1119,169,o),
(1119,292,qs),
(1119,422,o),
(1018,500,qs),
(966,540,o),
(798,604,o),
(508,673,o),
(447,715,qs),
(415,737,o),
(391,788,o),
(391,868,o),
(498,934,o),
(610,934,qs),
(849,934,o),
(975,758,q),
(996,716,o),
(1019,716,qs),
(1047,716,o),
(1047,744,qs),
(1047,759,o),
(1031,895,o),
(1031,1010,qs),
(1031,1053,o),
(998,1053,qs),
(981,1053,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 60 59 57 55 41 39 35 33 27 25 12 10 8 6 0 63 1 63 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,1034,qs),
(495,1031,l),
(495,1396,ls),
(495,1502,o),
(391,1502,o),
(374,1396,qs),
(349,1227,o),
(300,1150,qs),
(273,1106,o),
(194,1050,o),
(103,1029,o),
(52,990,o),
(52,964,qs),
(52,899,o),
(157,899,qs),
(257,899,l),
(257,289,ls),
(257,202,o),
(281,142,qs),
(347,-24,o),
(595,-24,qs),
(794,-24,o),
(913,136,qs),
(951,187,o),
(951,228,qs),
(951,241,o),
(931,268,o),
(916,268,qs),
(869,268,o),
(836,224,qs),
(760,123,o),
(661,123,qs),
(620,123,o),
(588,140,qs),
(495,188,o),
(495,339,qs),
(495,899,l),
(811,899,ls),
(932,899,o),
(932,971,qs),
(932,1038,o),
(803,1038,qs),
(718,1038,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 38 37 28 26 22 20 15 13 11 9 5 3 0 42 1 40 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1049,-6,q),
(1159,0,ls),
(1171,0,o),
(1209,-3,o),
(1253,-6,o),
(1297,-9,o),
(1365,-9,o),
(1392,14,qs),
(1404,23,o),
(1413,46,o),
(1413,67,o),
(1392,95,o),
(1367,95,o),
(1347,88,o),
(1283,88,o),
(1241,109,o),
(1215,181,o),
(1215,354,qs),
(1215,876,ls),
(1215,970,o),
(1196,1006,qs),
(1185,1029,o),
(1143,1029,q),
(1033,1023,ls),
(1022,1023,o),
(983,1026,o),
(960,1028,qs),
(916,1030,ls),
(894,1032,o),
(826,1032,o),
(800,1010,qs),
(789,1000,o),
(780,977,o),
(780,956,o),
(800,928,o),
(824,928,o),
(846,935,o),
(909,935,o),
(950,916,o),
(977,845,o),
(977,675,qs),
(977,272,l),
(845,138,o),
(713,138,qs),
(665,138,o),
(625,152,qs),
(496,197,o),
(496,370,qs),
(496,857,ls),
(496,905,o),
(492,938,qs),
(483,1029,o),
(424,1029,q),
(313,1023,ls),
(302,1023,o),
(263,1026,o),
(219,1029,o),
(175,1032,o),
(108,1032,o),
(80,1010,qs),
(69,1000,o),
(60,977,o),
(60,956,o),
(81,928,o),
(105,928,o),
(127,935,o),
(190,935,o),
(231,916,o),
(258,844,o),
(258,676,qs),
(258,330,ls),
(258,176,o),
(372,75,qs),
(485,-24,o),
(658,-24,qs),
(837,-24,o),
(978,110,q),
(987,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
77 74 73 70 65 64 63 62 55 52 50 49 48 47 42 41 40 39 34 32 25 22 21 18 13 12 11 10 3 1 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1400,953,o),
(1400,987,o),
(1356,1029,o),
(1271,1029,o),
(1184,1013,o),
(1089,1013,o),
(979,1029,o),
(869,1029,o),
(821,989,o),
(821,953,o),
(841,925,o),
(859,925,q),
(951,934,l),
(1021,934,o),
(1021,884,qs),
(1021,869,o),
(1011,803,o),
(959,691,qs),
(802,362,ls),
(785,324,o),
(775,324,qs),
(758,324,o),
(734,366,qs),
(677,470,o),
(554,666,o),
(498,770,q),
(459,833,o),
(459,884,qs),
(459,934,o),
(539,934,q),
(615,925,l),
(634,925,o),
(653,953,o),
(653,975,o),
(648,986,qs),
(627,1029,o),
(555,1029,q),
(297,1013,l),
(241,1013,o),
(140,1029,o),
(38,1029,o),
(-11,987,o),
(-11,953,o),
(10,925,o),
(27,925,q),
(84,932,l),
(103,932,o),
(149,908,o),
(200,823,qs),
(659,23,ls),
(692,-35,o),
(757,-35,o),
(787,32,q),
(1131,733,ls),
(1182,839,o),
(1237,898,qs),
(1267,932,o),
(1307,932,q),
(1363,925,l),
(1379,925,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 0 59 0 59 56 55 54 53 52 51 48 47 46 45 39 37 30 29 28 27 23 20 19 18 15 14 13 12 8 7 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 15 34 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 15 34 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1366;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2097,953,o),
(2097,990,o),
(2045,1029,o),
(1973,1029,o),
(1910,1018,qs),
(1877,1013,o),
(1852,1013,q),
(1615,1029,l),
(1568,1029,o),
(1541,1009,qs),
(1529,1000,o),
(1518,977,o),
(1518,953,o),
(1540,925,o),
(1555,925,q),
(1647,934,l),
(1718,934,o),
(1718,884,qs),
(1718,866,o),
(1710,797,o),
(1655,687,qs),
(1496,351,ls),
(1474,308,o),
(1462,308,qs),
(1448,308,o),
(1428,350,qs),
(1210,798,l),
(1185,843,ls),
(1174,862,o),
(1174,883,qs),
(1174,934,o),
(1234,934,q),
(1312,925,l),
(1330,925,o),
(1349,953,o),
(1349,987,o),
(1328,1006,qs),
(1316,1016,o),
(1255,1037,o),
(1114,1022,qs),
(1088,1019,ls),
(1042,1013,o),
(1006,1013,qs),
(984,1013,o),
(947,1018,o),
(927,1020,qs),
(900,1023,ls),
(878,1025,o),
(842,1029,o),
(765,1029,o),
(716,987,o),
(716,953,o),
(737,925,o),
(754,925,q),
(810,932,o),
(810,932,q),
(826,932,o),
(858,921,o),
(916,860,o),
(979,738,q),
(803,351,ls),
(782,308,o),
(770,308,qs),
(762,308,o),
(753,323,o),
(742,343,qs),
(490,798,ls),
(445,876,o),
(445,904,qs),
(445,919,o),
(458,934,o),
(480,934,q),
(558,925,l),
(595,925,o),
(595,971,qs),
(595,988,o),
(574,1006,qs),
(563,1016,o),
(525,1029,o),
(440,1029,o),
(340,1013,o),
(252,1013,o),
(215,1019,qs),
(187,1023,ls),
(141,1029,o),
(82,1029,qs),
(43,1029,o),
(-5,987,o),
(-5,953,o),
(16,925,o),
(33,925,q),
(89,932,l),
(104,932,o),
(120,924,qs),
(167,903,o),
(262,731,qs),
(646,23,ls),
(676,-35,o),
(704,-35,qs),
(722,-35,o),
(775,-7,o),
(789,22,qs),
(1044,578,l),
(1338,23,ls),
(1398,-89,o),
(1460,22,q),
(1770,633,ls),
(1865,823,o),
(1926,894,qs),
(1958,932,o),
(2003,932,q),
(2059,925,l),
(2076,925,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 0 0 112 0 112 109 108 106 103 98 97 96 95 89 87 81 80 79 78 70 68 63 62 59 58 56 55 50 48 41 40 39 38 33 32 31 30 27 25 22 21 20 19 14 12 2 1 23 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
52 9 2 9 0 1 33 16 1 9 0 1 0 9 1 53 22 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
52 9 2 9 0 1 33 16 1 9 0 1 0 9 1 53 22 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2047;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,24,o),
(569,52,o),
(566,59,qs),
(556,88,o),
(531,88,q),
(446,79,l),
(407,79,o),
(407,162,o),
(524,279,q),
(632,406,l),
(819,193,ls),
(875,128,o),
(875,105,qs),
(875,78,o),
(795,78,o),
(772,82,qs),
(765,84,o),
(755,87,o),
(748,87,qs),
(710,87,o),
(710,41,qs),
(710,23,o),
(730,6,qs),
(741,-4,o),
(779,-17,o),
(881,-17,o),
(1023,0,o),
(1138,0,o),
(1236,-17,o),
(1286,-17,qs),
(1336,-17,o),
(1384,24,o),
(1384,59,o),
(1363,87,o),
(1345,87,q),
(1289,80,l),
(1272,80,o),
(1256,84,qs),
(1213,97,o),
(1136,185,qs),
(838,527,l),
(1093,792,ls),
(1176,877,o),
(1227,912,qs),
(1257,932,o),
(1290,932,q),
(1345,925,l),
(1363,925,o),
(1384,953,o),
(1384,987,o),
(1339,1029,o),
(1257,1029,o),
(1174,1013,o),
(1092,1013,o),
(996,1029,o),
(890,1029,o),
(860,1009,qs),
(847,1000,o),
(835,977,o),
(835,961,o),
(838,954,qs),
(848,925,o),
(873,925,q),
(959,934,l),
(979,934,o),
(999,912,o),
(999,899,qs),
(999,886,o),
(985,856,o),
(938,809,qs),
(755,622,l),
(524,886,ls),
(514,896,o),
(514,907,qs),
(514,934,o),
(565,934,q),
(642,925,l),
(679,925,o),
(679,970,qs),
(679,988,o),
(659,1006,qs),
(648,1016,o),
(610,1029,o),
(511,1029,o),
(368,1013,o),
(285,1013,o),
(247,1018,o),
(227,1020,qs),
(200,1023,l),
(154,1027,ls),
(132,1029,o),
(53,1029,o),
(5,987,o),
(5,953,o),
(26,925,o),
(44,925,q),
(100,932,l),
(140,932,o),
(174,915,qs),
(200,903,o),
(253,844,q),
(540,501,l),
(275,217,ls),
(152,81,o),
(98,81,q),
(43,88,l),
(25,88,o),
(4,60,o),
(4,25,o),
(49,-16,o),
(129,-16,o),
(212,0,o),
(256,0,q),
(458,-16,l),
(519,-16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 0 0 114 0 114 110 109 108 107 100 99 96 94 89 88 87 86 85 83 80 79 78 77 69 68 67 66 63 62 61 60 59 58 52 51 50 49 39 38 37 36 31 30 29 28 23 22 19 18 17 16 10 9 8 7 4 3 2 1 29 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
104 73 43 12 4 2 4 1 33 17 16 12 11 10 9 5 7 4 4 6 1 0 39 15 14 13 8 7 5 6 6 15 34 26 25 24 23 19 18 3 7 2 2 0 1 0 39 28 27 22 21 20 1 6 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1369;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1370,953,o),
(1370,987,o),
(1324,1029,o),
(1235,1029,o),
(1162,1013,o),
(1080,1013,o),
(983,1029,o),
(878,1029,o),
(832,989,o),
(832,953,o),
(853,925,o),
(870,925,q),
(953,934,l),
(1011,934,o),
(1011,894,qs),
(1011,874,o),
(998,838,qs),
(992,820,o),
(966,759,o),
(755,228,q),
(488,828,ls),
(473,864,o),
(473,883,qs),
(473,934,o),
(541,934,q),
(617,925,l),
(655,925,o),
(655,971,qs),
(655,988,o),
(634,1006,qs),
(623,1016,o),
(585,1029,o),
(487,1029,o),
(347,1013,o),
(288,1013,q),
(89,1029,l),
(39,1029,o),
(-9,987,o),
(-9,953,o),
(12,925,o),
(29,925,q),
(85,932,l),
(101,932,o),
(118,926,qs),
(179,903,o),
(265,731,qs),
(643,-51,l),
(643,-52,l),
(550,-241,o),
(488,-312,qs),
(457,-348,o),
(406,-373,o),
(362,-373,o),
(348,-370,qs),
(309,-360,o),
(278,-304,qs),
(246,-245,o),
(197,-245,qs),
(175,-245,o),
(163,-252,qs),
(121,-279,o),
(121,-335,qs),
(121,-406,o),
(184,-456,qs),
(215,-480,o),
(304,-508,o),
(397,-508,o),
(438,-494,qs),
(580,-443,o),
(728,-136,q),
(1134,776,ls),
(1208,933,o),
(1276,933,q),
(1332,925,l),
(1348,925,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 0 0 74 0 74 71 70 69 68 67 66 63 62 61 60 50 49 48 47 42 41 40 39 38 37 34 33 32 31 22 21 17 15 8 7 2 1 18 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
54 27 26 3 2 0 1 33 0 2 0 3 0 2 3 53 17 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1349;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1101,352,o),
(1081,329,qs),
(995,229,ls),
(957,186,o),
(916,158,qs),
(836,102,o),
(709,102,qs),
(412,102,l),
(1085,917,ls),
(1107,943,o),
(1097,982,qs),
(1093,997,o),
(1056,1013,o),
(1012,1013,qs),
(305,1013,ls),
(289,1013,o),
(250,1034,qs),
(222,1048,ls),
(210,1055,o),
(203,1055,qs),
(166,1055,o),
(166,947,o),
(149,856,qs),
(141,813,o),
(120,728,o),
(106,681,o),
(125,662,o),
(139,662,qs),
(169,662,o),
(246,764,qs),
(309,848,o),
(385,888,qs),
(429,912,o),
(517,912,qs),
(773,912,l),
(116,125,ls),
(90,93,o),
(84,74,qs),
(81,65,o),
(82,50,o),
(88,24,o),
(114,0,o),
(155,0,qs),
(1050,0,l),
(1063,79,o),
(1082,133,qs),
(1091,161,o),
(1115,217,o),
(1162,312,o),
(1162,338,qs),
(1162,368,o),
(1133,368,qs),
(1120,368,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 46 44 39 36 33 31 25 23 19 17 10 8 0 52 1 52 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 53 7 1 0 6 2 0 6 51 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 53 7 1 0 6 2 0 6 51 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1194;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(625,-205,o),
(597,-187,o),
(570,-118,o),
(570,6,qs),
(570,350,o),
(506,527,qs),
(451,682,o),
(333,727,q),
(450,769,o),
(506,926,qs),
(537,1011,o),
(570,1267,o),
(570,1572,o),
(588,1618,qs),
(604,1660,o),
(645,1660,q),
(703,1651,l),
(737,1651,o),
(737,1678,qs),
(737,1689,o),
(728,1698,qs),
(700,1730,o),
(635,1730,qs),
(527,1730,o),
(445,1612,qs),
(404,1554,o),
(345,1379,o),
(305,1058,o),
(278,948,qs),
(264,895,o),
(234,828,o),
(199,789,o),
(158,772,o),
(82,754,o),
(82,727,qs),
(82,700,o),
(130,688,qs),
(158,682,o),
(178,673,qs),
(221,655,o),
(249,592,qs),
(292,498,o),
(332,192,qs),
(357,-32,o),
(445,-158,qs),
(486,-216,o),
(584,-275,o),
(655,-275,o),
(674,-272,qs),
(737,-259,o),
(737,-223,qs),
(737,-197,o),
(703,-197,q),
(645,-205,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
53 52 38 37 36 35 31 29 6 5 1 0 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
45 1 0 3 1 33 5 1 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 809;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,-240,o),
(396,-288,o),
(448,-288,o),
(462,-282,qs),
(514,-261,o),
(514,-207,qs),
(514,1651,ls),
(514,1686,o),
(467,1730,o),
(396,1730,o),
(346,1688,o),
(346,1653,qs),
(346,-204,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
10 9 3 2 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 14 values pushed */
0 1 1 0 1 0 39 0 0 0 14 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (71,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (809,0);
ref = braceleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
54 53 39 38 37 36 32 30 7 6 2 1 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
46 1 0 3 1 33 5 1 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 809;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(554,672,qs),
(590,655,o),
(695,580,qs),
(876,446,o),
(1001,446,qs),
(1230,446,o),
(1342,761,q),
(1211,823,l),
(1170,708,o),
(1115,652,qs),
(1090,626,o),
(1040,604,o),
(991,604,o),
(967,608,qs),
(899,619,o),
(763,719,qs),
(577,856,o),
(445,856,qs),
(336,856,o),
(238,762,qs),
(142,670,o),
(95,541,q),
(227,476,l),
(322,697,o),
(440,697,qs),
(500,697,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 21 19 13 12 8 6 0 25 1 25 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
18 17 2 0 1 3 2 2 3 2 2 33 0 1 4 1 0 2 1 0 1 0 41 0 2 3 3 2 1 0 38 0 2 2 3 1 0 39 0 3 2 3 1 0 36 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1437;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = nonbreakingspace;
layers = (
{
layerId = m01;
width = 550;
}
);
note = nonbreakingspace;
unicode = 160;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (170,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,1062);
ref = exclam;
scale = (1,-0.9999);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 40 39 32 31 13 12 1 25 2 23 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 3 1 0 39 0 3 3 15 34 0 1 1 0 1 0 39 4 1 0 0 17 0 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 3 1 0 39 0 3 3 21 34 0 1 1 0 1 0 39 4 1 0 0 17 0 35 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(729,-210,qs),
(729,-22,l),
(819,-14,o),
(912,30,qs),
(956,50,o),
(1033,102,o),
(1091,160,o),
(1125,220,o),
(1125,255,o),
(1122,264,qs),
(1110,300,o),
(1093,300,qs),
(1057,300,o),
(1018,249,q),
(974,183,o),
(913,157,qs),
(882,144,o),
(810,134,o),
(747,134,o),
(729,136,q),
(729,918,l),
(824,913,o),
(868,893,qs),
(900,878,o),
(970,819,o),
(1057,709,o),
(1084,709,qs),
(1097,709,o),
(1114,716,q),
(1121,720,o),
(1132,731,o),
(1132,757,o),
(1105,836,o),
(1099,886,qs),
(1096,913,o),
(1095,974,o),
(1095,1053,o),
(1061,1053,qs),
(1051,1053,o),
(1035,1046,qs),
(1002,1031,ls),
(984,1023,o),
(950,1009,o),
(926,1009,o),
(916,1012,qs),
(851,1032,ls),
(795,1048,o),
(729,1052,q),
(729,1212,ls),
(729,1252,o),
(703,1291,o),
(671,1291,qs),
(620,1291,o),
(620,1211,qs),
(620,1049,l),
(393,1026,o),
(247,866,qs),
(108,713,o),
(108,515,qs),
(108,283,o),
(257,136,qs),
(395,0,o),
(620,-21,q),
(620,-207,ls),
(620,-288,o),
(677,-288,qs),
(729,-288,o)
);
},
{
closed = 1;
nodes = (
(356,252,o),
(356,543,qs),
(356,858,o),
(620,912,q),
(620,159,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 55 53 48 47 45 44 40 38 29 27 23 22 19 18 15 13 0 66 1 66 10 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 78 values pushed */
11 1 3 2 67 1 5 6 71 46 2 7 8 64 3 2 0 7 4 33 0 8 5 7 5 8 7 53 0 7 0 5 7 0 51 0 1 9 1 0 1 0 1 0 40 0 3 3 15 34 0 6 6 2 1 0 39 4 1 2 2 15 34 0 5 5 2 1 0 39 4 1 2 2 15 5 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1216;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,90,o),
(352,90,qs),
(440,90,o),
(621,33,qs),
(800,-24,o),
(987,-24,qs),
(1090,-24,o),
(1206,32,qs),
(1257,57,o),
(1322,122,o),
(1322,167,o),
(1303,188,qs),
(1295,197,o),
(1276,209,o),
(1245,209,o),
(1214,178,qs),
(1159,123,o),
(1079,123,qs),
(1035,123,o),
(976,140,qs),
(945,149,o),
(864,180,o),
(761,224,o),
(654,257,o),
(514,267,q),
(570,316,o),
(603,379,qs),
(620,411,o),
(640,481,o),
(640,611,o),
(608,718,q),
(987,718,ls),
(1027,718,o),
(1055,732,qs),
(1069,739,o),
(1087,762,o),
(1087,799,o),
(1076,812,qs),
(1046,847,o),
(976,847,qs),
(559,847,l),
(498,979,o),
(476,1070,qs),
(465,1115,o),
(458,1195,o),
(458,1291,o),
(476,1333,qs),
(530,1458,o),
(695,1458,qs),
(809,1458,o),
(933,1384,qs),
(1061,1309,o),
(1145,1184,q),
(1169,1160,o),
(1180,1160,qs),
(1215,1160,o),
(1210,1206,qs),
(1207,1233,o),
(1188,1317,o),
(1169,1410,o),
(1156,1506,o),
(1161,1601,o),
(1127,1601,qs),
(1108,1601,o),
(1059,1548,qs),
(1024,1512,o),
(1004,1512,qs),
(992,1513,o),
(938,1535,qs),
(905,1548,o),
(780,1587,o),
(684,1587,qs),
(495,1587,o),
(364,1464,qs),
(301,1405,o),
(228,1243,o),
(228,1010,o),
(293,847,q),
(208,847,ls),
(161,847,o),
(117,811,o),
(117,756,o),
(170,718,o),
(215,718,qs),
(347,718,l),
(405,563,o),
(405,345,o),
(359,284,qs),
(338,255,o),
(221,194,qs),
(147,154,o),
(98,103,qs),
(76,80,o),
(57,42,o),
(57,11,o),
(72,-5,qs),
(78,-12,o),
(93,-20,o),
(121,-20,o),
(151,13,q),
(151,12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
99 97 95 93 86 85 83 81 69 67 61 59 52 50 46 44 38 36 34 33 29 27 22 20 17 15 2 1 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
75 1 11 1 100 0 2 0 13 2 33 0 4 3 7 3 4 7 53 0 6 7 2 7 6 2 53 0 11 1 10 1 11 10 53 0 13 10 0 10 13 0 53 8 1 2 9 1 1 11 2 1 1 2 41 0 7 7 3 1 0 39 5 1 3 3 12 34 0 10 10 0 1 0 39 12 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
75 1 11 1 100 0 2 0 13 2 33 0 4 3 7 3 4 7 53 0 6 7 2 7 6 2 53 0 11 1 10 1 11 10 53 0 13 10 0 10 13 0 53 8 1 2 9 1 1 11 2 1 1 2 41 0 7 7 3 1 0 39 5 1 3 3 12 34 0 10 10 0 1 0 39 12 1 0 0 16 0 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1367;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1315,196,l),
(1084,417,l),
(1147,516,o),
(1147,642,qs),
(1147,767,o),
(1087,868,q),
(1315,1087,l),
(1206,1196,l),
(990,972,l),
(878,1053,o),
(574,1053,o),
(459,974,q),
(245,1196,l),
(136,1087,l),
(359,873,l),
(290,772,o),
(290,506,o),
(356,408,q),
(136,196,l),
(245,87,l),
(456,307,l),
(566,232,o),
(873,232,o),
(988,314,q),
(1206,87,l)
);
},
{
closed = 1;
nodes = (
(517,846,qs),
(594,927,o),
(717,927,qs),
(839,927,o),
(918,846,qs),
(998,765,o),
(998,643,qs),
(998,511,o),
(920,432,qs),
(846,356,o),
(720,356,qs),
(596,356,o),
(518,437,qs),
(482,475,o),
(441,580,o),
(441,642,qs),
(441,766,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 37 31 29 14 13 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
15 12 2 3 1 22 18 9 6 4 2 3 3 0 2 0 2 3 33 17 16 11 10 4 1 31 24 23 5 4 4 0 30 0 2 0 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 15 3 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1451;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(923,108,o),
(889,195,o),
(889,329,qs),
(889,374,l),
(1318,374,ls),
(1356,374,o),
(1397,392,o),
(1397,445,o),
(1391,456,qs),
(1378,482,o),
(1317,482,qs),
(889,482,l),
(889,736,l),
(1318,736,ls),
(1397,736,o),
(1397,781,qs),
(1397,807,o),
(1391,818,qs),
(1377,845,o),
(1317,845,qs),
(952,845,l),
(1434,1422,ls),
(1464,1458,o),
(1514,1458,qs),
(1544,1458,o),
(1569,1449,o),
(1580,1449,qs),
(1619,1449,o),
(1619,1496,qs),
(1619,1515,o),
(1569,1553,o),
(1499,1553,o),
(1426,1539,o),
(1372,1539,qs),
(1344,1539,o),
(1292,1546,qs),
(1269,1549,o),
(1213,1553,o),
(1127,1553,o),
(1079,1512,o),
(1079,1476,o),
(1100,1450,o),
(1117,1450,q),
(1193,1461,l),
(1258,1461,o),
(1258,1423,qs),
(1258,1397,o),
(1172,1294,qs),
(840,896,l),
(473,1342,l),
(452,1372,ls),
(444,1384,o),
(434,1401,o),
(429,1415,o),
(429,1437,o),
(458,1460,o),
(493,1460,q),
(569,1450,l),
(607,1450,o),
(607,1490,qs),
(607,1515,o),
(555,1553,o),
(505,1553,q),
(237,1539,l),
(37,1553,l),
(-10,1553,o),
(-57,1511,o),
(-57,1476,o),
(-37,1449,o),
(-18,1449,q),
(37,1458,l),
(73,1458,o),
(108,1442,o),
(123,1422,qs),
(579,845,l),
(256,845,ls),
(214,845,o),
(198,837,qs),
(187,832,o),
(175,813,o),
(175,757,o),
(218,736,o),
(253,736,qs),
(655,736,l),
(655,482,l),
(256,482,ls),
(212,482,o),
(198,475,qs),
(187,470,o),
(175,450,o),
(175,394,o),
(218,374,o),
(253,374,qs),
(655,374,l),
(655,329,ls),
(655,196,o),
(634,140,qs),
(610,76,o),
(544,76,q),
(448,87,l),
(430,87,o),
(410,65,o),
(410,34,o),
(460,0,o),
(564,0,o),
(652,8,qs),
(710,12,ls),
(739,15,o),
(772,15,qs),
(805,15,o),
(833,12,qs),
(890,8,ls),
(920,5,o),
(987,0,o),
(1085,0,o),
(1135,34,o),
(1135,65,o),
(1115,87,o),
(1097,87,q),
(1002,76,l),
(967,76,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 0 0 120 0 120 116 114 110 108 107 105 101 99 97 95 94 92 89 88 87 85 82 81 78 77 76 75 64 63 62 61 58 54 51 50 49 48 45 43 38 36 35 33 28 26 22 21 20 19 16 15 14 13 12 10 9 8 6 5 2 1 30 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 74 values pushed */
71 1 11 12 1 33 24 1 11 25 1 10 9 11 10 1 2 41 26 1 9 27 1 8 0 9 8 1 0 41 23 22 18 17 16 15 13 7 12 12 14 1 0 39 21 20 19 3 14 14 12 34 29 28 7 6 4 0 0 1 1 0 39 5 4 3 2 4 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,1656,ls),
(511,1685,o),
(462,1730,o),
(391,1730,o),
(343,1692,o),
(343,1659,qs),
(343,946,ls),
(343,916,o),
(368,894,qs),
(380,885,o),
(408,874,o),
(462,874,o),
(511,919,o),
(511,948,qs)
);
},
{
closed = 1;
nodes = (
(343,-250,o),
(391,-288,o),
(462,-288,o),
(511,-243,o),
(511,-214,qs),
(511,505,ls),
(511,534,o),
(462,578,o),
(392,578,o),
(362,553,qs),
(343,537,o),
(343,507,qs),
(343,-216,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
24 23 18 17 10 9 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 3 2 3 1 0 40 0 0 0 1 1 0 39 0 1 1 14 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 855;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(840,-173,qs),
(961,-68,o),
(961,84,qs),
(961,247,o),
(798,368,q),
(835,390,o),
(870,420,qs),
(993,525,o),
(993,644,qs),
(993,772,o),
(914,863,qs),
(832,957,o),
(610,1066,qs),
(365,1186,o),
(365,1320,qs),
(365,1383,o),
(438,1437,qs),
(508,1489,o),
(599,1489,qs),
(699,1489,o),
(820,1378,o),
(840,1278,qs),
(849,1235,o),
(880,1235,qs),
(906,1235,o),
(908,1281,qs),
(908,1529,l),
(782,1587,o),
(622,1587,qs),
(409,1587,o),
(276,1474,qs),
(155,1371,o),
(155,1237,qs),
(155,1052,o),
(321,929,q),
(235,876,o),
(186,810,qs),
(158,773,o),
(125,689,o),
(125,581,o),
(148,527,qs),
(212,373,o),
(507,234,qs),
(753,117,o),
(753,-13,qs),
(753,-94,o),
(683,-144,qs),
(617,-190,o),
(520,-190,qs),
(411,-190,o),
(272,-66,o),
(249,42,qs),
(240,84,o),
(208,84,qs),
(182,84,o),
(180,38,qs),
(180,-208,l),
(336,-288,o),
(469,-288,qs),
(707,-288,o)
);
},
{
closed = 1;
nodes = (
(472,843,qs),
(819,685,o),
(819,558,qs),
(819,477,o),
(714,422,q),
(682,440,ls),
(664,449,o),
(647,457,qs),
(300,612,o),
(300,742,qs),
(300,819,o),
(404,876,q),
(435,859,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 41 39 36 34 31 29 11 9 6 4 0 59 1 59 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
32 1 5 3 67 60 54 24 4 1 4 2 1 0 2 3 33 0 4 5 1 5 4 1 53 0 1 2 5 1 2 51 0 2 6 1 0 2 0 1 0 40 0 5 5 3 1 0 39 0 3 3 12 5 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1119;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(887,1356,o),
(887,1448,o),
(850,1493,qs),
(831,1515,o),
(774,1542,o),
(669,1542,o),
(626,1497,qs),
(605,1476,o),
(583,1419,o),
(583,1324,o),
(618,1281,qs),
(636,1259,o),
(693,1232,o),
(768,1232,o),
(825,1259,o),
(865,1302,o)
);
},
{
closed = 1;
nodes = (
(402,1356,o),
(402,1450,o),
(366,1493,qs),
(347,1515,o),
(290,1542,o),
(184,1542,o),
(140,1497,qs),
(120,1476,o),
(98,1419,o),
(98,1323,o),
(134,1281,qs),
(152,1259,o),
(209,1232,o),
(284,1232,o),
(341,1259,o),
(380,1302,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 25 18 17 10 9 2 1 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 1 0 38 3 1 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
2 1 0 0 1 1 0 39 3 1 1 1 12 0 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 1 0 38 3 1 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 971;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,376,qs),
(342,193,o),
(532,86,qs),
(728,-24,o),
(959,-24,qs),
(1174,-24,o),
(1368,82,qs),
(1460,132,o),
(1615,276,o),
(1727,454,o),
(1790,664,o),
(1790,901,o),
(1760,1008,qs),
(1699,1220,o),
(1541,1365,qs),
(1300,1587,o),
(960,1587,qs),
(712,1587,o),
(514,1471,qs),
(421,1416,o),
(273,1265,o),
(171,1086,o),
(117,885,o),
(117,778,qs),
(117,563,o)
);
},
{
closed = 1;
nodes = (
(458,1267,qs),
(658,1466,o),
(953,1466,qs),
(1130,1466,o),
(1290,1380,qs),
(1368,1338,o),
(1500,1217,o),
(1596,1065,o),
(1651,884,o),
(1651,679,o),
(1626,588,qs),
(1551,317,o),
(1309,184,qs),
(1153,97,o),
(975,97,qs),
(780,97,o),
(611,190,qs),
(531,234,o),
(401,358,o),
(309,509,o),
(258,683,o),
(258,778,qs),
(258,1069,o)
);
},
{
closed = 1;
nodes = (
(1315,1049,o),
(1312,1088,qs),
(1310,1111,o),
(1309,1165,o),
(1309,1239,o),
(1278,1239,qs),
(1263,1239,o),
(1217,1211,qs),
(1193,1196,o),
(1179,1196,qs),
(1170,1196,o),
(1141,1210,o),
(1121,1210,q),
(1035,1234,o),
(944,1234,qs),
(742,1234,o),
(610,1096,qs),
(480,961,o),
(480,767,qs),
(480,574,o),
(608,445,qs),
(669,383,o),
(845,310,o),
(1066,310,o),
(1251,396,o),
(1346,515,o),
(1346,552,qs),
(1346,562,o),
(1326,593,o),
(1316,593,qs),
(1277,593,o),
(1248,553,q),
(1182,449,o),
(1043,449,qs),
(895,449,o),
(811,545,qs),
(768,594,o),
(720,746,o),
(720,960,o),
(793,1038,qs),
(827,1075,o),
(917,1117,o),
(1068,1117,o),
(1132,1086,qs),
(1165,1070,o),
(1223,1018,o),
(1295,931,o),
(1317,931,qs),
(1342,931,o),
(1342,959,qs),
(1342,973,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
93 91 89 87 86 85 84 82 75 74 69 67 65 63 56 55 51 49 45 43 33 31 20 18 8 6 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
11 1 10 9 5 9 10 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 1 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1907;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(780,764,qs),
(888,769,l),
(1018,762,l),
(1065,762,o),
(1101,793,o),
(1101,822,o),
(1080,843,o),
(1066,843,q),
(1014,834,l),
(993,834,o),
(963,849,o),
(936,916,o),
(936,1053,qs),
(936,1266,ls),
(936,1415,o),
(858,1492,qs),
(815,1536,o),
(665,1587,o),
(459,1587,o),
(390,1569,qs),
(360,1561,o),
(359,1561,qs),
(352,1561,o),
(340,1566,qs),
(291,1587,ls),
(279,1592,o),
(270,1592,qs),
(261,1592,o),
(239,1578,o),
(239,1552,qs),
(239,1447,o),
(218,1387,qs),
(208,1356,o),
(208,1343,qs),
(209,1333,o),
(225,1316,o),
(242,1316,o),
(266,1325,o),
(297,1369,qs),
(349,1438,o),
(452,1494,o),
(516,1494,qs),
(723,1494,o),
(723,1285,qs),
(723,1197,l),
(621,1244,o),
(356,1244,o),
(269,1188,qs),
(168,1124,o),
(168,1000,qs),
(168,888,o),
(331,755,o),
(630,755,o),
(725,835,q),
(733,764,o)
);
},
{
closed = 1;
nodes = (
(648,838,o),
(468,838,o),
(420,890,qs),
(397,915,o),
(374,980,o),
(374,1048,o),
(386,1076,qs),
(429,1173,o),
(548,1173,qs),
(638,1173,o),
(723,1128,q),
(723,905,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
65 64 58 56 54 50 47 46 45 44 36 35 33 31 28 26 18 17 13 11 8 7 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
20 1 3 2 9 1 10 1 66 55 0 3 7 10 3 33 0 3 2 1 2 3 1 53 0 1 0 10 7 1 10 1 0 41 11 8 2 7 9 1 0 7 0 1 2 40 0 4 4 12 34 0 2 2 5 1 0 39 6 1 5 5 12 2 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
20 1 3 2 9 1 10 1 66 55 0 3 7 10 3 33 0 3 2 1 2 3 1 53 0 1 0 10 7 1 10 1 0 41 11 8 2 7 9 1 0 7 0 1 2 40 0 5 5 12 34 0 2 2 4 1 0 39 6 1 4 4 12 2 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1193;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (78,85);
ref = .ttfautohint;
},
{
alignment = -1;
ref = guilsinglleft;
},
{
alignment = -1;
pos = (577,0);
ref = guilsinglleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
59 58 46 45 27 26 14 13 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
52 20 2 1 0 1 33 2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 3 1 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1364;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(992,580,l),
(992,254,l),
(1145,254,l),
(1145,729,l),
(140,729,l),
(140,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
5 4 3 2 1 0 3 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 2 2 1 44 0 0 2 2 0 0 0 38 0 0 0 2 0 0 39 0 2 0 2 0 0 36 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 1 56 0 0 2 2 0 0 0 38 0 0 0 2 0 0 39 0 2 0 2 0 0 36 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
width = 1229;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1082,794,qs),
(1253,952,o),
(1253,1183,qs),
(1253,1422,o),
(1080,1580,qs),
(917,1730,o),
(691,1730,qs),
(440,1730,o),
(275,1564,qs),
(119,1406,o),
(119,1184,qs),
(119,959,o),
(285,799,qs),
(362,725,o),
(571,639,o),
(668,639,qs),
(914,639,o)
);
},
{
closed = 1;
nodes = (
(236,998,o),
(236,1180,qs),
(236,1365,o),
(364,1491,qs),
(492,1618,o),
(680,1618,qs),
(858,1618,o),
(989,1496,qs),
(1125,1370,o),
(1125,1181,qs),
(1125,991,o),
(994,864,qs),
(935,807,o),
(779,744,o),
(688,744,qs),
(501,744,o)
);
},
{
closed = 1;
nodes = (
(483,1305,qs),
(483,1066,ls),
(483,967,o),
(454,967,q),
(425,971,l),
(402,971,o),
(402,950,qs),
(402,920,o),
(445,920,q),
(551,927,l),
(658,920,l),
(699,920,o),
(699,950,qs),
(699,971,o),
(676,971,q),
(648,967,l),
(620,967,o),
(620,1066,qs),
(620,1145,l),
(645,1134,o),
(688,1094,o),
(750,994,o),
(855,915,o),
(939,915,o),
(975,937,o),
(975,971,o),
(956,971,q),
(927,966,l),
(917,966,o),
(897,990,o),
(874,1027,qs),
(823,1110,o),
(754,1149,q),
(826,1153,o),
(876,1193,qs),
(901,1213,o),
(932,1270,o),
(932,1369,o),
(877,1408,qs),
(818,1451,o),
(722,1451,q),
(574,1442,l),
(445,1449,l),
(402,1449,o),
(402,1420,qs),
(402,1412,o),
(416,1398,o),
(434,1398,o),
(454,1402,q),
(483,1402,o)
);
},
{
closed = 1;
nodes = (
(620,1379,o),
(722,1379,o),
(756,1357,qs),
(774,1346,o),
(797,1312,o),
(797,1246,o),
(770,1222,qs),
(758,1212,o),
(726,1202,o),
(663,1202,o),
(620,1219,q),
(620,1338,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
33 33 18 17 1 0 93 92 85 84 33 82 33 82 79 78 77 76 74 70 68 67 66 65 59 58 56 55 54 53 49 48 42 38 35 34 27 25 17 32 18 32 10 8 0 16 1 16 21 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
83 1 16 4 63 1 7 6 2 33 0 16 4 6 7 16 45 0 6 7 4 6 43 0 5 17 20 15 3 4 16 5 4 1 0 41 14 13 11 10 8 5 7 12 1 9 2 7 9 1 2 41 19 1 2 18 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 14 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
83 1 16 4 63 1 7 6 2 33 0 16 4 6 4 16 6 53 0 6 7 4 6 7 51 0 5 17 20 15 3 4 16 5 4 1 0 41 14 13 11 10 8 5 7 12 1 9 2 7 9 1 2 41 19 1 2 18 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 14 3 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1373;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(790,1316,l),
(790,1455,l),
(98,1455,l),
(98,1316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
3 2 1 0 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 1 0 0 0 38 0 0 0 1 0 0 39 0 1 0 1 0 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(632,1099,qs),
(712,1177,o),
(712,1304,qs),
(712,1434,o),
(559,1587,o),
(436,1587,qs),
(298,1587,o),
(218,1503,qs),
(143,1424,o),
(143,1304,qs),
(143,1176,o),
(222,1099,qs),
(259,1062,o),
(364,1021,o),
(428,1021,qs),
(553,1021,o)
);
},
{
closed = 1;
nodes = (
(318,1184,qs),
(298,1207,o),
(277,1268,o),
(277,1376,o),
(316,1422,qs),
(335,1445,o),
(392,1470,o),
(463,1470,o),
(492,1458,qs),
(581,1418,o),
(581,1304,qs),
(581,1224,o),
(501,1137,o),
(359,1137,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
16 16 1 0 16 29 16 29 22 21 10 8 0 15 1 15 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 4 1 0 3 0 1 0 40 0 2 2 1 1 0 39 0 1 1 12 2 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 855;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(718,463,l),
(718,880,l),
(1145,880,l),
(1145,1029,l),
(718,1029,l),
(718,1468,l),
(566,1468,l),
(566,1029,l),
(140,1029,l),
(140,880,l),
(566,880,l),
(566,463,l)
);
},
{
closed = 1;
nodes = (
(1145,173,l),
(1145,322,l),
(140,322,l),
(140,173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 5 6 2 5 0 0 41 0 6 0 7 6 7 0 0 40 4 1 0 0 1 0 0 39 3 1 1 1 15 0 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(720,676,o),
(733,714,qs),
(778,840,ls),
(787,865,o),
(787,887,o),
(765,900,o),
(757,900,qs),
(739,900,o),
(711,874,qs),
(667,828,o),
(601,812,qs),
(563,802,o),
(458,802,qs),
(282,802,l),
(346,914,o),
(496,1028,qs),
(573,1088,o),
(620,1129,qs),
(766,1255,o),
(766,1359,qs),
(766,1459,o),
(682,1521,qs),
(641,1552,o),
(519,1587,o),
(401,1587,o),
(356,1580,qs),
(199,1554,o),
(111,1481,q),
(111,1313,ls),
(111,1287,o),
(140,1268,o),
(151,1268,qs),
(183,1268,o),
(204,1326,qs),
(215,1358,o),
(240,1390,qs),
(313,1488,o),
(407,1488,qs),
(481,1488,o),
(559,1405,o),
(559,1288,o),
(508,1217,qs),
(476,1173,o),
(371,1080,qs),
(216,944,o),
(153,838,qs),
(124,789,o),
(104,710,o),
(104,639,o),
(139,639,qs),
(711,639,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 44 42 38 36 26 25 19 17 13 11 0 50 1 50 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 45 values pushed */
22 1 2 1 1 33 0 2 1 5 1 2 5 53 0 5 4 1 5 4 51 0 4 6 1 0 4 0 1 0 40 0 1 1 3 1 0 39 0 3 3 12 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,624,o),
(689,708,qs),
(739,748,o),
(793,861,o),
(793,979,o),
(774,1020,qs),
(719,1144,o),
(566,1178,q),
(603,1195,o),
(636,1218,qs),
(747,1295,o),
(747,1386,qs),
(747,1479,o),
(660,1534,qs),
(576,1587,o),
(449,1587,qs),
(276,1587,o),
(150,1502,q),
(150,1334,ls),
(150,1307,o),
(179,1288,o),
(190,1288,qs),
(201,1288,o),
(231,1315,o),
(238,1335,qs),
(261,1403,o),
(348,1485,o),
(472,1485,o),
(542,1422,o),
(542,1341,o),
(531,1315,qs),
(497,1235,o),
(386,1187,qs),
(298,1152,o),
(298,1125,qs),
(298,1095,o),
(331,1095,q),
(406,1109,l),
(490,1109,o),
(544,1041,qs),
(568,1010,o),
(594,928,o),
(594,819,o),
(552,775,qs),
(531,753,o),
(469,727,o),
(355,727,o),
(244,807,o),
(223,875,qs),
(216,898,o),
(187,922,o),
(164,922,o),
(135,903,o),
(135,876,qs),
(135,708,l),
(263,624,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
55 54 40 38 34 32 28 27 19 18 17 16 9 8 4 3 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
37 1 4 6 47 1 2 5 0 1 7 1 3 33 0 5 4 2 4 5 2 53 3 1 2 0 4 2 0 51 0 0 1 4 0 1 51 0 1 0 7 1 7 1 0 40 0 4 4 6 1 0 39 0 6 6 12 4 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(593,1402,o),
(622,1443,qs),
(636,1463,o),
(645,1501,o),
(642,1558,o),
(586,1603,o),
(499,1600,o),
(455,1572,qs),
(423,1552,o),
(367,1476,qs),
(214,1268,ls),
(206,1257,o),
(193,1229,o),
(207,1211,qs),
(224,1190,o),
(276,1220,qs),
(511,1355,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 9 1 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 7 values pushed */
0 0 0 12 0 35 1
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = acute;
unicode = 180;
},
{
glyphname = mu;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,-285,ls),
(460,-270,o),
(419,-216,o),
(419,-164,qs),
(419,-62,o),
(456,56,q),
(572,-24,o),
(873,-24,o),
(992,59,q),
(1005,0,o),
(1054,0,q),
(1164,6,ls),
(1176,6,o),
(1214,3,o),
(1258,0,o),
(1302,-3,o),
(1377,-3,o),
(1418,31,o),
(1418,63,o),
(1397,81,o),
(1364,81,o),
(1352,78,qs),
(1324,73,l),
(1288,73,o),
(1246,99,o),
(1220,178,o),
(1220,354,qs),
(1220,876,ls),
(1220,970,o),
(1201,1006,qs),
(1190,1029,o),
(1148,1029,q),
(1038,1023,ls),
(1027,1023,o),
(988,1026,o),
(966,1028,qs),
(921,1030,ls),
(899,1032,o),
(883,1032,qs),
(785,1032,o),
(785,978,qs),
(785,966,o),
(805,949,o),
(838,949,o),
(850,952,q),
(878,956,l),
(914,956,o),
(955,931,o),
(982,849,o),
(982,675,qs),
(982,168,l),
(889,97,o),
(661,97,o),
(580,178,qs),
(501,257,o),
(501,376,qs),
(501,877,ls),
(501,971,o),
(483,1007,qs),
(471,1029,o),
(429,1029,q),
(318,1023,ls),
(307,1023,o),
(268,1026,o),
(224,1029,o),
(180,1032,o),
(164,1032,qs),
(65,1032,o),
(65,978,qs),
(65,966,o),
(86,949,o),
(119,949,o),
(131,952,q),
(159,956,l),
(195,956,o),
(236,930,o),
(263,849,o),
(263,676,qs),
(263,-39,ls),
(263,-317,o),
(328,-434,qs),
(357,-487,o),
(431,-526,o),
(515,-526,o),
(556,-492,qs),
(580,-472,o),
(580,-433,qs),
(580,-372,o),
(516,-317,q),
(517,-317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 0 0 89 0 89 82 81 79 76 75 72 69 68 66 65 58 55 53 52 51 49 46 45 43 42 37 36 29 26 25 21 18 17 15 14 6 5 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
38 1 5 1 83 80 2 13 5 2 33 17 1 16 13 0 13 16 0 53 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 12 11 2 5 5 13 1 0 39 15 14 2 13 13 13 34 0 0 0 17 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
38 1 5 1 83 80 2 13 11 2 33 17 1 16 15 0 15 16 0 53 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 12 1 11 11 13 1 0 39 14 1 13 13 13 34 0 5 5 15 1 0 39 0 15 15 13 34 0 0 0 17 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1532;
}
);
note = mu;
unicode = (181,956);
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(641,6,o),
(697,4,o),
(729,3,qs),
(792,1,ls),
(822,0,o),
(840,0,q),
(840,1557,l),
(797,1557,o),
(747,1560,qs),
(717,1561,o),
(665,1565,o),
(609,1577,o),
(486,1577,qs),
(251,1577,o),
(118,1454,qs),
(3,1346,o),
(3,1187,qs),
(3,993,o),
(143,880,qs),
(208,827,o),
(383,772,o),
(540,772,o),
(609,787,q),
(609,353,ls),
(609,176,o),
(586,120,qs),
(565,72,o),
(498,72,q),
(420,81,l),
(404,81,o),
(384,62,o),
(384,50,qs),
(384,-3,o),
(483,-3,q),
(628,6,ls)
);
},
{
closed = 1;
nodes = (
(1490,1520,qs),
(1490,1541,o),
(1470,1554,qs),
(1460,1562,o),
(1424,1572,o),
(1357,1572,o),
(1310,1570,qs),
(1124,1560,ls),
(1079,1557,o),
(1045,1557,q),
(1045,0,l),
(1275,0,l),
(1275,1244,ls),
(1275,1305,o),
(1280,1352,qs),
(1293,1494,o),
(1387,1494,q),
(1452,1488,l),
(1490,1488,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
35 35 1 0 35 53 35 53 48 43 42 41 37 36 27 24 22 20 13 12 7 6 5 4 0 34 1 28 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
11 1 3 6 1 33 11 9 2 6 6 4 1 0 39 8 5 2 4 4 12 34 0 3 3 4 1 0 39 8 5 2 4 4 12 34 2 1 1 1 0 1 2 39 7 10 2 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1537;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (171,475);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,499);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
15 14 8 6 2 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,-256,l),
(254,-237,o),
(325,-237,qs),
(370,-237,o),
(437,-296,o),
(437,-386,o),
(409,-424,qs),
(392,-448,o),
(356,-448,qs),
(269,-448,o),
(212,-392,qs),
(175,-357,o),
(132,-357,qs),
(108,-357,o),
(78,-394,o),
(78,-445,o),
(104,-466,qs),
(176,-526,o),
(310,-526,qs),
(411,-526,o),
(498,-461,qs),
(536,-432,o),
(582,-357,o),
(582,-282,o),
(562,-252,qs),
(497,-157,o),
(342,-157,qs),
(326,-157,l),
(373,29,l),
(268,46,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
27 25 21 19 17 15 11 9 3 1 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
28 1 2 4 1 33 29 0 2 0 31 0 2 4 3 4 2 3 53 0 0 0 4 2 0 4 1 0 41 0 3 3 1 1 0 39 0 1 1 17 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = onesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,639,o),
(608,674,o),
(608,702,o),
(591,731,o),
(574,731,q),
(519,724,l),
(458,724,o),
(458,875,qs),
(458,1390,l),
(466,1567,ls),
(466,1591,o),
(426,1591,qs),
(411,1591,o),
(390,1574,qs),
(336,1532,ls),
(304,1508,o),
(214,1454,o),
(109,1421,o),
(79,1389,o),
(79,1366,o),
(96,1338,o),
(107,1338,q),
(201,1358,l),
(254,1358,o),
(254,1211,qs),
(254,875,ls),
(254,724,o),
(194,724,q),
(129,731,o),
(129,731,q),
(112,731,o),
(95,702,o),
(95,674,o),
(128,639,o),
(160,639,qs),
(355,649,l),
(542,639,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 0 32 31 30 29 25 23 15 14 13 12 9 8 6 5 0 36 2 35 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
4 1 3 5 1 5 3 1 53 7 6 2 3 1 8 1 0 1 0 1 2 40 0 5 5 12 5 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = onesuperior;
unicode = 185;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(929,871,qs),
(1042,990,o),
(1042,1180,qs),
(1042,1344,o),
(934,1458,qs),
(812,1587,o),
(598,1587,qs),
(411,1587,o),
(280,1462,qs),
(151,1338,o),
(151,1165,qs),
(151,998,o),
(250,884,qs),
(303,823,o),
(475,745,o),
(592,745,qs),
(809,745,o)
);
},
{
closed = 1;
nodes = (
(381,1147,o),
(381,1289,o),
(392,1336,qs),
(430,1491,o),
(558,1491,qs),
(662,1491,o),
(730,1396,qs),
(764,1347,o),
(806,1195,o),
(806,966,o),
(759,900,qs),
(737,870,o),
(677,840,o),
(592,840,o),
(498,899,o),
(425,1003,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 28 26 19 18 10 8 0 16 1 16 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 2 4 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 12 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1193;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (188,85);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (814,0);
ref = guilsinglleft;
scale = (-0.9999,1);
},
{
alignment = -1;
pos = (1391,0);
ref = guilsinglleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
59 58 46 45 27 26 14 13 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
52 20 2 1 0 1 33 2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 3 1 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1364;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,47,qs),
(1618,1433,ls),
(1669,1499,o),
(1669,1535,qs),
(1669,1556,o),
(1632,1587,o),
(1594,1587,o),
(1584,1584,qs),
(1556,1574,o),
(1496,1495,qs),
(454,158,ls),
(416,109,o),
(381,54,o),
(381,8,o),
(414,-24,o),
(485,-24,o)
);
},
{
closed = 1;
nodes = (
(1410,93,o),
(1393,63,o),
(1393,36,o),
(1426,0,o),
(1458,0,q),
(1643,10,l),
(1831,0,l),
(1863,0,o),
(1896,36,o),
(1896,63,o),
(1878,93,o),
(1861,93,q),
(1807,86,l),
(1773,86,o),
(1746,145,o),
(1746,216,qs),
(1746,258,l),
(1883,258,ls),
(1916,258,o),
(1928,285,qs),
(1969,390,o),
(1969,426,o),
(1948,426,qs),
(1941,426,o),
(1935,422,qs),
(1868,377,o),
(1802,377,qs),
(1746,377,l),
(1746,915,ls),
(1746,970,o),
(1692,967,qs),
(1669,965,o),
(1633,924,qs),
(1145,364,ls),
(1114,330,o),
(1114,304,qs),
(1114,291,o),
(1131,272,qs),
(1142,258,o),
(1171,258,qs),
(1547,258,l),
(1547,216,ls),
(1547,86,o),
(1482,86,q),
(1427,93,l)
);
},
{
closed = 1;
nodes = (
(1547,673,l),
(1547,377,l),
(1289,377,l)
);
},
{
closed = 1;
nodes = (
(597,639,o),
(630,674,o),
(630,702,o),
(613,731,o),
(596,731,q),
(541,724,l),
(480,724,o),
(480,875,qs),
(480,1390,l),
(488,1567,ls),
(488,1591,o),
(448,1591,qs),
(433,1591,o),
(412,1574,qs),
(358,1532,ls),
(326,1508,o),
(236,1454,o),
(131,1421,o),
(101,1389,o),
(101,1366,o),
(118,1338,o),
(129,1338,q),
(223,1358,l),
(276,1358,o),
(276,1211,qs),
(276,875,ls),
(276,724,o),
(216,724,q),
(151,731,l),
(134,731,o),
(117,702,o),
(117,674,o),
(150,639,o),
(182,639,qs),
(377,649,l),
(564,639,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
66 64 61 61 0 0 95 94 93 92 88 86 78 77 76 75 72 71 70 69 64 99 66 98 61 63 61 63 60 59 56 52 49 48 47 46 43 41 38 36 34 32 30 29 21 19 17 16 0 15 0 15 9 8 24 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 16 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2043;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,47,qs),
(1618,1433,ls),
(1669,1499,o),
(1669,1535,qs),
(1669,1556,o),
(1633,1587,o),
(1595,1587,o),
(1584,1584,qs),
(1556,1574,o),
(1496,1495,qs),
(454,158,ls),
(416,109,o),
(382,54,o),
(382,8,o),
(414,-24,o),
(485,-24,o)
);
},
{
closed = 1;
nodes = (
(597,639,o),
(630,674,o),
(630,702,o),
(613,731,o),
(596,731,q),
(541,724,l),
(480,724,o),
(480,875,qs),
(480,1390,l),
(488,1567,ls),
(488,1591,o),
(448,1591,qs),
(433,1591,o),
(412,1574,qs),
(358,1532,ls),
(326,1508,o),
(236,1454,o),
(131,1421,o),
(101,1389,o),
(101,1366,o),
(118,1338,o),
(129,1338,q),
(223,1358,l),
(276,1358,o),
(276,1211,qs),
(276,875,ls),
(276,724,o),
(216,724,q),
(151,731,l),
(134,731,o),
(117,702,o),
(117,674,o),
(150,639,o),
(182,639,qs),
(377,649,l),
(564,639,l)
);
},
{
closed = 1;
nodes = (
(1927,35,o),
(1940,72,qs),
(1986,200,ls),
(1994,224,o),
(1994,246,o),
(1972,259,o),
(1964,259,qs),
(1946,259,o),
(1918,233,qs),
(1874,187,o),
(1808,170,qs),
(1770,161,o),
(1665,161,qs),
(1489,161,l),
(1553,273,o),
(1702,388,qs),
(1780,447,o),
(1828,488,qs),
(1973,614,o),
(1973,718,qs),
(1973,818,o),
(1890,880,qs),
(1848,911,o),
(1726,946,o),
(1608,946,o),
(1562,938,qs),
(1406,913,o),
(1318,840,q),
(1318,672,ls),
(1318,646,o),
(1347,627,o),
(1358,627,qs),
(1390,627,o),
(1410,685,qs),
(1422,717,o),
(1446,750,qs),
(1520,847,o),
(1614,847,qs),
(1688,847,o),
(1766,764,o),
(1766,647,o),
(1715,576,qs),
(1683,532,o),
(1578,439,qs),
(1423,303,o),
(1360,196,qs),
(1331,148,o),
(1311,69,o),
(1311,-2,o),
(1346,-2,qs),
(1918,-2,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
53 52 18 16 0 0 96 94 90 88 78 77 71 69 65 63 52 102 53 102 47 46 45 44 40 38 30 29 28 27 24 23 22 21 16 51 18 50 0 15 0 15 9 8 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 16 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2059;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,47,qs),
(1663,1433,ls),
(1714,1499,o),
(1714,1535,qs),
(1714,1556,o),
(1677,1587,o),
(1639,1587,o),
(1628,1584,qs),
(1600,1574,o),
(1540,1495,qs),
(498,158,ls),
(426,67,o),
(426,31,qs),
(426,8,o),
(459,-24,o),
(530,-24,o)
);
},
{
closed = 1;
nodes = (
(1402,93,o),
(1385,63,o),
(1385,36,o),
(1418,0,o),
(1450,0,q),
(1635,10,l),
(1823,0,l),
(1855,0,o),
(1888,36,o),
(1888,63,o),
(1870,93,o),
(1853,93,q),
(1799,86,l),
(1765,86,o),
(1738,145,o),
(1738,216,qs),
(1738,258,l),
(1875,258,ls),
(1908,258,o),
(1920,285,qs),
(1961,390,o),
(1961,426,o),
(1940,426,qs),
(1933,426,o),
(1927,422,qs),
(1860,377,o),
(1794,377,qs),
(1738,377,l),
(1738,915,ls),
(1738,970,o),
(1684,967,qs),
(1661,965,o),
(1625,924,qs),
(1137,364,ls),
(1106,330,o),
(1106,304,qs),
(1106,291,o),
(1123,272,qs),
(1134,258,o),
(1163,258,qs),
(1539,258,l),
(1539,216,ls),
(1539,86,o),
(1474,86,q),
(1419,93,l)
);
},
{
closed = 1;
nodes = (
(1539,673,l),
(1539,377,l),
(1281,377,l)
);
},
{
closed = 1;
nodes = (
(584,624,o),
(689,708,qs),
(739,748,o),
(793,861,o),
(793,979,o),
(774,1020,qs),
(719,1144,o),
(566,1178,q),
(603,1195,o),
(636,1218,qs),
(747,1295,o),
(747,1386,qs),
(747,1479,o),
(660,1534,qs),
(576,1587,o),
(449,1587,qs),
(276,1587,o),
(150,1502,q),
(150,1334,ls),
(150,1307,o),
(179,1288,o),
(190,1288,qs),
(201,1288,o),
(231,1315,o),
(238,1335,qs),
(261,1403,o),
(348,1485,o),
(472,1485,o),
(542,1422,o),
(542,1341,o),
(531,1315,qs),
(497,1235,o),
(386,1187,qs),
(298,1152,o),
(298,1125,qs),
(298,1095,o),
(331,1095,q),
(406,1109,l),
(490,1109,o),
(544,1041,qs),
(568,1010,o),
(594,928,o),
(594,819,o),
(552,775,qs),
(531,753,o),
(469,727,o),
(355,727,o),
(244,807,o),
(223,875,qs),
(216,898,o),
(187,922,o),
(164,922,o),
(135,903,o),
(135,876,qs),
(135,708,l),
(263,624,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
61 61 0 0 119 118 104 102 98 96 92 91 83 82 81 80 73 72 68 67 61 63 61 63 60 59 56 52 49 48 47 46 43 41 38 36 34 32 30 29 21 19 17 16 0 15 0 15 9 8 23 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 16 1 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 13 1 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 16 1 35 13
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2035;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (1034,1062);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
55 54 47 46 27 25 22 20 16 14 4 2 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
24 1 3 1 1 33 0 0 4 2 4 0 2 53 0 2 1 4 2 1 51 0 4 4 5 1 0 39 0 5 5 15 34 0 1 1 3 1 2 39 0 3 3 17 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
24 1 3 1 1 33 0 0 4 2 4 0 2 53 0 2 1 4 2 1 51 0 4 4 5 1 0 39 0 5 5 21 34 0 1 1 3 1 2 39 0 3 3 17 3 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (532,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
64 63 89 88 81 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
1 1 0 1 1 33 0 17 16 17 55 0 16 3 16 55 0 15 3 14 3 15 14 53 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (532,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
64 63 89 88 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
1 1 0 1 1 33 0 17 16 17 55 0 16 3 16 55 0 15 3 14 3 15 14 53 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (412,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
79 78 64 63 93 91 84 83 78 97 79 97 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
81 1 16 18 1 1 0 1 2 33 0 18 16 18 55 17 20 2 16 3 16 55 0 15 3 14 3 15 14 53 19 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (375,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
79 78 64 63 103 101 99 97 93 92 90 88 85 83 78 105 79 105 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 77 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 3 21 17 1 0 41 22 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 2 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (319,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
64 63 104 103 96 95 88 87 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 66 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 19 1 17 18 1 16 3 17 16 1 0 41 20 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (525,0);
ref = ring.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
79 78 64 63 104 103 96 95 88 86 78 93 79 93 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
1 1 0 1 1 33 0 15 16 14 16 15 45 0 17 0 19 3 17 19 1 0 41 20 1 14 0 10 1 14 10 1 0 41 21 1 16 16 3 1 0 39 18 1 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
1 1 0 1 1 33 0 15 16 14 16 15 14 53 0 17 0 19 3 17 19 1 0 41 20 1 14 0 10 1 14 10 1 0 41 21 1 16 16 3 1 0 39 18 1 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,41,o),
(330,81,o),
(312,105,o),
(297,105,q),
(246,98,l),
(181,98,o),
(181,135,qs),
(182,155,o),
(209,193,qs),
(356,402,ls),
(367,418,o),
(377,430,qs),
(407,466,o),
(477,466,qs),
(930,466,l),
(930,381,ls),
(930,260,o),
(922,203,qs),
(917,173,o),
(903,132,o),
(873,83,o),
(818,83,q),
(753,90,l),
(735,90,o),
(715,61,o),
(715,23,o),
(735,7,qs),
(746,-2,o),
(782,-15,o),
(849,-15,o),
(880,-12,qs),
(996,-2,ls),
(1026,0,o),
(1065,0,qs),
(1900,0,l),
(1952,151,o),
(2022,272,qs),
(2059,337,o),
(2059,384,o),
(2035,384,q),
(2029,383,o),
(2005,379,o),
(1972,346,qs),
(1934,308,ls),
(1899,273,o),
(1858,240,qs),
(1717,129,o),
(1469,129,qs),
(1259,129,ls),
(1166,129,o),
(1166,264,qs),
(1166,672,ls),
(1166,698,o),
(1211,734,o),
(1252,734,qs),
(1502,734,ls),
(1546,734,o),
(1586,710,qs),
(1609,696,o),
(1650,652,o),
(1670,605,o),
(1681,589,o),
(1693,589,qs),
(1725,589,o),
(1725,680,o),
(1721,712,q),
(1721,718,ls),
(1717,758,o),
(1717,803,q),
(1725,964,l),
(1725,1020,o),
(1693,1020,qs),
(1681,1020,o),
(1669,1004,o),
(1649,957,o),
(1629,933,qs),
(1571,863,o),
(1502,863,qs),
(1253,863,ls),
(1166,863,o),
(1166,916,qs),
(1166,1325,ls),
(1166,1368,o),
(1206,1414,o),
(1259,1414,qs),
(1529,1414,ls),
(1663,1414,o),
(1762,1346,qs),
(1805,1316,o),
(1872,1241,o),
(1924,1176,o),
(1942,1176,qs),
(1964,1176,o),
(1964,1205,qs),
(1964,1218,o),
(1954,1254,qs),
(1917,1377,ls),
(1891,1464,o),
(1881,1543,q),
(1124,1543,ls),
(1052,1543,o),
(966,1551,qs),
(933,1554,o),
(869,1559,o),
(779,1559,o),
(754,1537,qs),
(743,1528,o),
(734,1506,o),
(734,1481,o),
(754,1455,o),
(772,1455,q),
(822,1461,l),
(853,1461,o),
(901,1453,o),
(901,1409,o),
(868,1362,qs),
(188,401,ls),
(46,201,o),
(-48,132,qs),
(-95,98,o),
(-148,98,q),
(-195,104,l),
(-218,104,o),
(-240,73,o),
(-240,38,o),
(-203,0,o),
(-129,0,o),
(-37,15,o),
(11,15,q),
(219,0,l),
(274,0,o)
);
},
{
closed = 1;
nodes = (
(474,604,o),
(495,633,qs),
(930,1263,l),
(930,564,l),
(522,564,ls),
(474,564,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
132 131 0 0 131 136 132 136 0 130 0 130 127 126 125 124 117 115 109 108 107 106 101 100 98 95 91 90 83 80 76 73 68 66 59 57 53 50 46 43 39 37 31 29 26 25 20 19 18 17 10 9 8 7 4 3 2 1 27 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 129 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 25 23 2 17 17 13 17 35 15
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 25 23 17 16 1 5 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 129 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 25 23 2 17 17 13 17 35 15
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 141 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 14 20 15 14 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 17 1 0 39 25 23 2 17 17 13 17 35 17
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2079;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1546,561,o),
(1509,561,qs),
(1470,561,o),
(1454,498,qs),
(1426,386,o),
(1380,314,qs),
(1259,123,o),
(1027,123,qs),
(733,123,o),
(540,308,qs),
(336,505,o),
(336,832,qs),
(336,1088,o),
(504,1270,qs),
(580,1353,o),
(775,1446,o),
(879,1446,qs),
(1296,1446,o),
(1468,1130,qs),
(1482,1104,o),
(1514,1104,qs),
(1527,1104,o),
(1553,1125,o),
(1553,1175,o),
(1518,1310,qs),
(1501,1373,o),
(1493,1430,qs),
(1489,1459,o),
(1486,1519,o),
(1486,1608,o),
(1458,1608,qs),
(1444,1608,o),
(1415,1582,o),
(1336,1502,o),
(1288,1502,o),
(1259,1516,qs),
(1102,1592,o),
(932,1592,qs),
(571,1592,o),
(338,1368,qs),
(99,1139,o),
(99,764,qs),
(99,463,o),
(286,249,qs),
(480,27,o),
(807,-14,q),
(758,-251,l),
(807,-232,o),
(878,-232,qs),
(923,-232,o),
(990,-291,o),
(990,-381,o),
(962,-420,qs),
(945,-443,o),
(909,-443,qs),
(822,-443,o),
(764,-388,qs),
(728,-352,o),
(685,-352,qs),
(661,-352,o),
(631,-389,o),
(631,-440,o),
(657,-462,qs),
(729,-521,o),
(863,-521,qs),
(964,-521,o),
(1050,-456,qs),
(1089,-427,o),
(1135,-352,o),
(1135,-277,o),
(1115,-248,qs),
(1050,-152,o),
(895,-152,qs),
(879,-152,l),
(911,-22,l),
(919,-23,o),
(935,-23,o),
(943,-23,qs),
(1303,-23,o),
(1546,208,q),
(1546,497,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
79 77 73 71 64 62 60 58 50 48 46 45 43 41 32 30 26 24 22 20 16 14 8 6 4 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (442,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
109 108 101 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 104 values pushed */
0 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 2 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 15
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (442,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
109 108 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 104 values pushed */
0 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 15
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (322,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
99 98 113 111 104 103 98 117 99 117 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 112 values pushed */
101 1 16 18 1 33 0 18 16 18 55 17 19 2 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 16
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (229,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
124 123 116 115 108 107 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 106 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 19 1 17 18 1 16 8 17 16 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (109,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 75 74 67 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
0 14 13 14 55 0 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (109,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 75 74 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
0 14 13 14 55 0 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (86,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-10,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
65 64 1 1 79 77 70 69 64 83 65 83 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
67 1 13 15 1 33 0 15 13 15 55 14 17 2 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 16 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-103,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
1 1 90 89 82 81 74 73 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 48 values pushed */
16 1 14 15 1 13 7 14 13 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 17 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,1447,o),
(320,1363,o),
(320,1232,qs),
(320,823,l),
(200,823,ls),
(156,823,o),
(142,816,qs),
(131,811,o),
(120,792,o),
(120,736,o),
(162,716,o),
(197,716,qs),
(320,716,l),
(320,314,ls),
(320,185,o),
(299,136,qs),
(276,82,o),
(208,82,q),
(143,88,l),
(104,88,o),
(104,41,qs),
(104,22,o),
(124,6,qs),
(135,-3,o),
(171,-16,o),
(254,-16,o),
(329,-8,qs),
(357,-5,o),
(412,0,o),
(502,0,o),
(549,-4,qs),
(684,-16,ls),
(772,-24,o),
(891,-24,qs),
(1144,-24,o),
(1352,81,qs),
(1559,186,o),
(1676,366,qs),
(1799,554,o),
(1799,785,qs),
(1799,1159,o),
(1576,1368,qs),
(1337,1592,o),
(874,1592,qs),
(798,1592,o),
(660,1576,qs),
(611,1571,o),
(510,1561,o),
(383,1561,o),
(322,1568,qs),
(296,1571,o),
(240,1575,o),
(151,1575,o),
(124,1553,qs),
(113,1544,o),
(104,1523,o),
(104,1497,o),
(124,1471,o),
(143,1471,q),
(193,1477,l),
(233,1477,o)
);
},
{
closed = 1;
nodes = (
(896,716,ls),
(933,716,o),
(975,734,o),
(975,786,o),
(969,798,qs),
(956,823,o),
(895,823,qs),
(559,823,l),
(559,1331,ls),
(559,1365,o),
(598,1410,o),
(702,1446,o),
(851,1446,qs),
(1180,1446,o),
(1356,1280,qs),
(1541,1105,o),
(1541,763,qs),
(1541,412,o),
(1367,261,qs),
(1282,187,o),
(1038,125,o),
(689,125,o),
(624,154,qs),
(559,184,o),
(559,269,qs),
(559,716,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 86 84 80 78 74 72 65 64 0 60 0 60 56 54 49 47 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 16 11 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 13 13 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1838;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (456,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
85 84 1 1 109 107 105 103 99 98 96 94 91 89 84 111 85 111 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 22 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1766;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (581,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
52 51 44 42 38 36 30 28 19 17 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (581,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
52 51 43 42 38 36 30 28 19 17 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (461,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
42 41 56 54 47 46 41 60 42 60 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (424,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
42 41 66 64 62 60 56 55 53 51 48 46 41 68 42 68 38 36 30 28 19 17 7 5 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (368,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
67 66 59 58 51 50 43 42 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,547,l),
(938,204,l),
(1047,313,l),
(704,656,l),
(1039,990,l),
(933,1096,l),
(598,762,l),
(255,1106,l),
(146,997,l),
(489,653,l),
(154,319,l),
(260,213,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 9 1 13
CALL[ ]	/* CallFunction */";
};
width = 1193;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1751,609,o),
(1751,807,qs),
(1751,900,o),
(1730,988,qs),
(1666,1258,o),
(1449,1428,q),
(1574,1614,ls),
(1612,1667,o),
(1612,1703,qs),
(1612,1752,o),
(1548,1752,qs),
(1516,1752,o),
(1481,1699,qs),
(1344,1498,l),
(1169,1597,o),
(953,1597,qs),
(567,1597,o),
(332,1356,qs),
(221,1242,o),
(103,931,o),
(103,543,o),
(264,223,o),
(412,122,q),
(280,-72,ls),
(246,-121,o),
(246,-157,qs),
(246,-178,o),
(279,-206,o),
(302,-206,qs),
(344,-206,o),
(379,-155,qs),
(524,60,l),
(698,-18,o),
(1084,-18,o),
(1386,92,o),
(1616,302,o)
);
},
{
closed = 1;
nodes = (
(324,552,o),
(324,911,qs),
(324,1157,o),
(474,1318,qs),
(620,1476,o),
(840,1476,qs),
(1046,1476,o),
(1225,1322,q),
(546,321,l)
);
},
{
closed = 1;
nodes = (
(1505,991,o),
(1505,667,qs),
(1505,401,o),
(1364,248,qs),
(1232,107,o),
(1030,107,qs),
(823,107,o),
(644,237,q),
(1314,1228,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 39 37 25 23 20 18 7 5 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
21 1 4 2 53 45 44 36 29 12 6 5 4 3 1 0 5 3 33 0 1 0 1 56 0 3 3 14 34 0 4 4 2 1 0 39 0 2 2 12 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1850;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (595,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
2 1 112 111 104 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 22 4 22 21 4 53 0 22 21 2 22 1 0 38 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (595,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
2 1 112 111 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 22 4 22 21 4 53 0 22 21 2 22 1 0 38 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (475,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
102 101 2 1 116 114 107 106 101 120 102 120 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
104 1 21 23 49 1 9 2 3 1 17 9 3 33 0 23 21 23 55 22 25 2 21 4 21 55 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 2 39 20 19 1 24 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 24 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (382,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 127 126 119 118 111 110 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 81 values pushed */
49 1 9 2 3 1 17 9 2 33 24 1 22 23 1 21 4 22 21 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (450,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 95 94 86 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 22 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
66 44 5 3 1 0 1 33 0 20 19 20 55 0 19 11 19 55 15 14 13 12 10 9 21 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 2 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1266,445,qs),
(1467,578,o),
(1467,820,qs),
(1467,1022,o),
(1305,1140,qs),
(1226,1197,o),
(996,1260,o),
(730,1260,o),
(576,1223,q),
(576,1228,ls),
(576,1362,o),
(596,1414,qs),
(608,1446,o),
(652,1478,o),
(707,1478,o),
(738,1474,qs),
(749,1472,o),
(770,1469,o),
(802,1469,o),
(822,1499,o),
(822,1535,o),
(797,1554,qs),
(784,1563,o),
(745,1576,o),
(665,1576,o),
(576,1568,qs),
(519,1564,ls),
(491,1561,o),
(459,1561,qs),
(427,1561,o),
(401,1564,qs),
(348,1568,ls),
(321,1571,o),
(259,1576,o),
(171,1576,o),
(145,1554,qs),
(134,1544,o),
(125,1523,o),
(125,1499,o),
(145,1472,o),
(164,1472,q),
(228,1478,l),
(263,1478,o),
(307,1447,o),
(340,1360,o),
(340,1228,qs),
(340,330,ls),
(340,198,o),
(319,144,qs),
(295,83,o),
(228,83,q),
(164,89,l),
(125,89,o),
(125,42,qs),
(125,23,o),
(145,7,qs),
(156,-2,o),
(192,-15,o),
(267,-15,o),
(348,-8,qs),
(401,-2,ls),
(427,0,o),
(459,0,qs),
(491,0,o),
(519,-2,qs),
(576,-8,ls),
(606,-10,o),
(674,-15,o),
(765,-15,o),
(797,7,qs),
(810,16,o),
(822,38,o),
(822,61,o),
(802,92,o),
(770,92,o),
(749,89,o),
(728,86,o),
(704,83,o),
(650,83,o),
(605,122,o),
(576,217,o),
(576,358,q),
(692,329,o),
(801,329,qs),
(1091,329,o)
);
},
{
closed = 1;
nodes = (
(576,1053,o),
(651,1102,qs),
(693,1130,o),
(776,1130,qs),
(970,1130,o),
(1087,1031,qs),
(1145,982,o),
(1211,838,o),
(1211,673,o),
(1185,619,qs),
(1108,460,o),
(854,460,qs),
(692,460,o),
(576,520,q),
(576,989,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
1 0 96 94 88 86 77 76 70 69 66 65 60 59 58 57 56 54 50 49 44 43 42 41 34 33 32 31 26 25 22 20 18 17 16 15 10 9 6 5 0 84 1 84 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
75 1 19 17 85 1 18 19 2 1 0 18 3 33 0 17 0 19 18 17 19 1 0 41 0 18 20 1 0 1 18 0 1 0 41 16 15 10 3 9 9 11 1 0 39 14 13 12 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1518;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,89,o),
(568,89,q),
(518,82,l),
(500,82,o),
(476,92,o),
(457,158,o),
(457,342,qs),
(457,1304,ls),
(457,1614,o),
(870,1614,o),
(870,1299,qs),
(870,1139,o),
(800,1055,qs),
(769,1017,o),
(689,974,o),
(592,950,o),
(592,866,o),
(695,855,q),
(1082,796,o),
(1082,390,qs),
(1082,98,o),
(906,98,qs),
(856,98,o),
(820,116,qs),
(799,127,o),
(765,162,o),
(738,221,o),
(704,221,qs),
(690,221,o),
(662,200,o),
(662,182,qs),
(662,102,o),
(734,41,qs),
(768,12,o),
(859,-24,o),
(1015,-24,o),
(1093,8,qs),
(1330,107,o),
(1330,449,qs),
(1330,633,o),
(1192,779,qs),
(1055,922,o),
(846,959,q),
(961,1012,o),
(1034,1108,qs),
(1113,1214,o),
(1113,1331,qs),
(1113,1507,o),
(998,1616,qs),
(942,1670,o),
(782,1730,o),
(575,1730,o),
(490,1698,qs),
(220,1594,o),
(220,1159,qs),
(220,342,ls),
(218,192,o),
(194,136,qs),
(172,82,o),
(114,82,q),
(66,89,l),
(49,89,o),
(27,62,o),
(27,23,o),
(46,7,qs),
(57,-2,o),
(96,-15,o),
(150,-15,o),
(270,0,o),
(336,0,qs),
(376,0,o),
(456,-15,o),
(500,-15,qs),
(605,-15,o),
(605,46,qs),
(605,62,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
74 73 72 71 66 65 54 52 48 46 40 39 24 23 16 15 14 13 8 7 6 4 3 1 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
32 1 7 9 1 33 0 7 9 3 9 7 3 53 0 9 9 5 1 0 39 0 5 5 14 34 11 10 8 4 4 3 3 0 1 0 39 6 2 1 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1428;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (343,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 75 74 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 12 5 12 55 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (343,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 82 81 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 2 39 1 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (223,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 89 88 83 81 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
92 1 12 13 17 1 10 2 71 60 3 3 8 10 3 33 14 1 12 13 5 13 12 5 53 0 2 0 10 8 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 15 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (216,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 98 97 95 93 89 87 83 82 80 78 75 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 2 39 1 18 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (180,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 1 98 97 90 89 82 81 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (337,0);
ref = ring;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
73 72 2 1 94 93 90 89 81 79 72 87 73 87 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 8 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1749,-24,o),
(1883,158,qs),
(1921,210,o),
(1921,251,qs),
(1921,262,o),
(1894,290,o),
(1847,290,o),
(1816,249,qs),
(1768,180,o),
(1629,123,o),
(1410,123,o),
(1310,194,qs),
(1196,275,o),
(1151,430,q),
(1440,501,ls),
(1637,549,o),
(1891,642,qs),
(1938,658,o),
(1938,709,qs),
(1938,735,o),
(1912,782,qs),
(1759,1053,o),
(1463,1053,qs),
(1403,1053,o),
(1344,1040,qs),
(1160,1002,o),
(1039,875,q),
(922,1053,o),
(643,1053,qs),
(569,1053,o),
(517,1045,qs),
(491,1041,o),
(447,1031,o),
(418,1022,o),
(407,1019,o),
(389,1019,o),
(374,1026,qs),
(330,1046,ls),
(300,1060,o),
(285,1060,qs),
(248,1060,o),
(248,1010,qs),
(248,881,o),
(222,799,qs),
(210,759,o),
(210,741,qs),
(210,711,o),
(268,711,o),
(315,775,qs),
(377,859,o),
(461,892,qs),
(508,911,o),
(601,911,qs),
(751,911,o),
(814,846,qs),
(885,771,o),
(893,573,q),
(765,627,o),
(624,627,qs),
(416,627,o),
(282,536,qs),
(147,443,o),
(147,301,qs),
(147,151,o),
(263,64,qs),
(320,22,o),
(485,-24,o),
(720,-24,o),
(943,70,o),
(1020,155,q),
(1178,-24,o)
);
},
{
closed = 1;
nodes = (
(1128,602,qs),
(1128,759,o),
(1223,844,qs),
(1306,919,o),
(1436,919,qs),
(1541,919,o),
(1621,838,qs),
(1654,804,o),
(1689,729,o),
(1689,684,o),
(1667,676,qs),
(1445,601,o),
(1132,524,q),
(1128,562,o)
);
},
{
closed = 1;
nodes = (
(531,107,o),
(392,213,o),
(392,402,o),
(540,511,o),
(789,511,o),
(895,459,q),
(903,333,o),
(953,246,q),
(921,214,o),
(884,188,qs),
(766,107,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
95 94 91 90 80 78 70 69 64 63 60 59 48 46 42 40 35 34 31 29 23 22 18 16 12 10 3 2 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 15 34 0 3 3 4 1 0 39 7 6 2 4 4 15 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2013;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(993,92,o),
(1059,153,o),
(1097,218,o),
(1097,262,o),
(1067,292,o),
(1016,287,o),
(990,249,qs),
(903,126,o),
(728,126,qs),
(570,126,o),
(462,245,qs),
(348,371,o),
(348,574,qs),
(348,734,o),
(442,822,qs),
(486,862,o),
(599,901,o),
(778,901,o),
(845,878,qs),
(888,864,o),
(968,811,o),
(1049,709,o),
(1075,709,qs),
(1104,709,o),
(1104,739,qs),
(1104,757,o),
(1094,784,qs),
(1076,832,o),
(1070,886,qs),
(1067,913,o),
(1066,974,o),
(1066,1053,o),
(1033,1053,qs),
(1022,1053,o),
(1006,1046,qs),
(974,1031,ls),
(956,1023,o),
(922,1009,o),
(896,1009,o),
(866,1023,o),
(817,1039,o),
(743,1053,o),
(601,1053,o),
(524,1032,qs),
(294,969,o),
(176,775,qs),
(100,649,o),
(100,515,qs),
(100,319,o),
(216,176,qs),
(329,35,o),
(514,-7,q),
(462,-256,l),
(511,-237,o),
(582,-237,qs),
(627,-237,o),
(694,-296,o),
(694,-386,o),
(666,-424,qs),
(649,-448,o),
(613,-448,qs),
(526,-448,o),
(468,-392,qs),
(432,-357,o),
(389,-357,qs),
(365,-357,o),
(335,-394,o),
(335,-445,o),
(361,-466,qs),
(433,-526,o),
(567,-526,qs),
(668,-526,o),
(754,-461,qs),
(793,-432,o),
(839,-357,o),
(839,-282,o),
(819,-252,qs),
(754,-157,o),
(599,-157,qs),
(583,-157,l),
(617,-22,l),
(639,-24,o),
(710,-24,o),
(811,-1,o),
(907,39,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
76 74 67 66 62 60 52 50 46 45 42 41 30 28 24 22 20 18 14 12 6 4 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (339,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
60 59 51 49 39 38 31 29 25 23 8 6 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (339,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
67 66 51 49 39 38 31 29 25 23 8 6 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (219,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
74 73 68 66 59 58 51 49 39 38 31 29 25 23 8 6 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (176,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
83 82 75 74 67 66 59 58 51 49 39 38 31 29 25 23 8 6 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (106,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (81,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 1 52 51 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
39 1 0 5 1 33 0 8 5 8 55 6 1 5 5 15 34 9 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (108,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (81,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 1 59 58 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
39 1 0 5 1 33 0 8 8 12 34 6 1 5 5 15 34 9 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-38,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 66 65 60 58 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 49 values pushed */
69 1 8 9 39 1 0 5 2 33 10 1 8 9 5 9 8 5 53 0 9 9 18 34 6 1 5 5 15 34 11 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (17,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-81,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 75 74 67 66 59 58 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
39 1 0 5 1 33 11 1 9 10 1 8 5 9 8 1 0 41 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
39 1 0 5 1 33 10 1 8 8 9 1 0 39 11 1 9 9 12 34 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
39 1 0 5 1 33 11 1 9 10 1 8 5 9 8 1 0 41 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1314,1464,o),
(1314,1508,qs),
(1314,1528,o),
(1284,1559,o),
(1232,1559,o),
(1158,1535,qs),
(911,1457,l),
(727,1618,o),
(485,1694,qs),
(368,1730,o),
(296,1730,qs),
(244,1730,o),
(244,1691,qs),
(244,1672,o),
(273,1647,o),
(309,1635,qs),
(566,1544,o),
(721,1395,q),
(465,1314,ls),
(403,1294,o),
(403,1252,qs),
(403,1229,o),
(431,1198,o),
(478,1198,o),
(541,1218,qs),
(807,1302,l),
(931,1139,o),
(979,917,q),
(831,1002,o),
(665,1002,qs),
(430,1002,o),
(274,855,qs),
(120,709,o),
(120,487,qs),
(120,255,o),
(276,116,qs),
(430,-20,o),
(685,-20,qs),
(932,-20,o),
(1094,165,qs),
(1264,360,o),
(1264,677,qs),
(1264,1071,o),
(1003,1364,q),
(1229,1436,ls)
);
},
{
closed = 1;
nodes = (
(443,784,qs),
(527,878,o),
(680,878,qs),
(830,878,o),
(922,784,qs),
(967,738,o),
(1017,606,o),
(1017,414,o),
(996,335,qs),
(935,105,o),
(720,105,qs),
(568,105,o),
(467,226,qs),
(419,284,o),
(363,443,o),
(363,528,qs),
(363,694,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
59 57 51 49 40 39 34 32 21 20 15 13 7 5 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
37 26 18 0 4 2 4 16 1 6 1 2 33 0 2 4 1 4 2 1 53 0 1 0 6 5 1 6 1 0 41 0 3 3 14 34 0 4 4 12 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
37 26 18 0 4 2 4 16 1 6 1 2 33 0 2 4 1 4 2 1 53 0 1 0 6 5 1 6 1 0 41 0 3 3 14 34 0 4 4 12 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1355;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (330,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 112 111 109 107 103 101 97 96 94 92 89 87 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
28 1 12 4 75 34 2 2 12 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 4 19 15 1 0 41 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 21 3 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
28 1 12 4 75 34 2 2 12 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 6 19 15 1 0 41 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 21 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1522;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (338,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
37 36 33 31 25 23 15 13 7 5 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (338,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
44 43 33 31 25 23 15 13 7 5 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (218,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
51 50 45 43 36 35 33 31 25 23 15 13 7 5 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (211,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
60 59 57 55 51 49 45 44 42 40 37 35 33 31 25 23 15 13 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (175,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
60 59 52 51 44 43 36 35 33 31 25 23 15 13 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(795,1003,o),
(795,1097,o),
(758,1140,qs),
(740,1162,o),
(683,1189,o),
(577,1189,o),
(534,1144,qs),
(513,1123,o),
(491,1066,o),
(491,971,o),
(526,929,qs),
(545,907,o),
(602,879,o),
(677,879,o),
(734,906,o),
(773,949,o)
);
},
{
closed = 1;
nodes = (
(1145,580,l),
(1145,729,l),
(140,729,l),
(140,580,l)
);
},
{
closed = 1;
nodes = (
(602,120,o),
(709,120,o),
(754,168,qs),
(795,213,o),
(795,270,qs),
(795,338,o),
(758,381,qs),
(740,403,o),
(683,430,o),
(577,430,o),
(534,385,qs),
(513,364,o),
(491,306,o),
(491,246,o),
(508,191,o),
(545,147,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
34 33 26 25 19 18 17 16 10 9 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
0 1 0 0 2 1 0 1 0 41 0 2 0 3 4 2 3 0 0 41 0 4 5 5 4 1 0 38 0 4 4 5 1 0 39 0 5 4 5 1 0 36 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1241,415,o),
(1241,589,o),
(1228,646,qs),
(1187,836,o),
(1038,945,q),
(1136,1089,ls),
(1172,1144,o),
(1172,1176,qs),
(1172,1199,o),
(1140,1225,o),
(1098,1225,o),
(1067,1205,o),
(1045,1173,qs),
(930,1005,l),
(817,1053,o),
(673,1053,qs),
(433,1053,o),
(266,894,qs),
(100,735,o),
(100,513,qs),
(100,231,o),
(304,83,q),
(303,81,l),
(191,-85,ls),
(159,-131,o),
(159,-168,qs),
(159,-188,o),
(189,-216,o),
(212,-216,qs),
(254,-216,o),
(288,-166,qs),
(415,22,l),
(528,-24,o),
(814,-24,o),
(1025,62,o),
(1168,212,o)
);
},
{
closed = 1;
nodes = (
(349,412,o),
(349,586,qs),
(349,673,o),
(370,730,qs),
(432,901,o),
(617,901,qs),
(726,901,o),
(815,835,q),
(440,282,l)
);
},
{
closed = 1;
nodes = (
(989,616,o),
(989,434,qs),
(989,343,o),
(968,288,qs),
(907,127,o),
(723,127,qs),
(617,127,o),
(529,191,q),
(902,744,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 39 37 25 24 20 18 7 5 2 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (336,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
82 81 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (336,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
89 88 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (216,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
96 95 90 88 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (173,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
105 104 97 96 89 88 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (423,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 86 85 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 0 17 17 12 34 18 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1349;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,-448,o),
(2,-473,o),
(6,-484,qs),
(22,-526,o),
(103,-526,qs),
(311,-520,l),
(527,-526,ls),
(585,-526,o),
(612,-505,qs),
(623,-496,o),
(632,-474,o),
(632,-448,o),
(611,-421,o),
(594,-421,q),
(545,-429,l),
(515,-429,o),
(472,-415,o),
(433,-341,o),
(433,-179,qs),
(433,46,l),
(546,-24,o),
(721,-24,qs),
(957,-24,o),
(1118,134,qs),
(1276,291,o),
(1276,515,qs),
(1276,766,o),
(1125,910,qs),
(1052,979,o),
(843,1053,o),
(558,1053,o),
(433,971,q),
(433,1599,ls),
(433,1682,o),
(408,1712,qs),
(394,1728,o),
(353,1728,q),
(201,1716,l),
(54,1718,ls),
(19,1718,o),
(2,1699,qs),
(-5,1691,o),
(-11,1673,o),
(-11,1646,o),
(28,1630,o),
(82,1618,o),
(137,1602,o),
(159,1571,o),
(165,1546,qs),
(195,1418,o),
(195,1155,qs),
(195,-179,ls),
(195,-322,o),
(170,-378,qs),
(148,-429,o),
(90,-429,q),
(41,-421,l),
(24,-421,o)
);
},
{
closed = 1;
nodes = (
(929,794,qs),
(1034,678,o),
(1034,464,qs),
(1034,310,o),
(948,220,qs),
(906,177,o),
(784,130,o),
(666,130,o),
(626,141,qs),
(492,178,o),
(433,298,q),
(433,796,l),
(542,900,o),
(666,900,qs),
(833,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
59 58 0 0 65 64 58 72 59 72 0 57 0 57 53 49 44 43 42 41 36 34 27 26 21 20 19 17 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 16 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 16 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1356;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (260,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
1 1 102 101 94 93 86 85 78 77 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 20 1 18 19 1 17 6 18 17 1 0 41 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 19 1 17 17 18 1 0 39 20 1 18 18 12 34 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 20 1 18 19 1 17 6 18 17 1 0 41 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1349;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (346,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
78 78 64 63 78 91 78 89 85 82 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 0 16 19 1 17 3 16 17 1 0 41 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (227,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
2 1 75 74 73 72 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 14 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (344,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
64 63 95 93 91 89 85 83 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
92 78 2 17 16 1 1 0 1 2 33 18 1 16 17 17 16 43 0 15 3 14 3 15 14 53 20 1 14 0 10 1 14 10 1 2 41 0 19 19 17 1 0 39 0 17 17 14 34 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
92 78 2 17 16 1 1 0 1 2 33 18 1 16 17 16 55 0 15 3 14 3 15 14 53 20 1 14 0 10 1 14 10 1 2 41 0 19 19 17 1 0 39 0 17 17 14 34 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (147,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (155,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 1 91 89 86 84 80 78 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
88 72 2 13 12 17 1 10 2 71 60 3 3 8 10 3 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 8 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,-15,o),
(499,22,o),
(499,63,o),
(478,90,o),
(461,90,q),
(411,83,l),
(339,83,o),
(339,127,qs),
(341,161,o),
(394,286,q),
(423,372,l),
(450,436,o),
(553,436,qs),
(1077,436,ls),
(1130,436,o),
(1181,407,o),
(1195,378,qs),
(1264,246,l),
(1305,157,o),
(1305,115,qs),
(1305,80,o),
(1244,80,q),
(1172,89,l),
(1135,89,o),
(1135,46,qs),
(1135,24,o),
(1158,7,qs),
(1170,-2,o),
(1208,-15,o),
(1290,-15,o),
(1391,-3,o),
(1442,-1,q),
(1331,-112,o),
(1331,-282,qs),
(1331,-333,o),
(1342,-368,qs),
(1372,-465,o),
(1469,-465,qs),
(1690,-463,ls),
(1705,-463,o),
(1724,-446,o),
(1724,-435,qs),
(1724,-409,o),
(1670,-396,qs),
(1633,-387,o),
(1598,-365,qs),
(1497,-302,o),
(1497,-192,qs),
(1497,-76,o),
(1562,-5,q),
(1659,-15,o),
(1725,-15,o),
(1766,23,o),
(1766,61,o),
(1748,90,o),
(1728,90,q),
(1678,83,l),
(1638,83,o),
(1591,131,qs),
(1559,164,o),
(1508,275,qs),
(979,1430,ls),
(935,1527,o),
(909,1566,qs),
(896,1586,o),
(875,1601,o),
(856,1601,o),
(833,1588,o),
(804,1526,qs),
(268,367,ls),
(182,182,o),
(132,118,qs),
(104,83,o),
(58,83,q),
(9,89,l),
(-30,89,o),
(-30,43,qs),
(-30,25,o),
(11,-15,o),
(53,-15,q),
(196,0,l),
(397,-15,l)
);
},
{
closed = 1;
nodes = (
(528,564,o),
(528,591,qs),
(528,603,o),
(542,634,qs),
(774,1164,ls),
(803,1233,o),
(821,1233,qs),
(838,1233,o),
(875,1139,qs),
(1090,615,ls),
(1098,597,o),
(1098,591,qs),
(1098,564,o),
(986,564,qs),
(639,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
83 82 90 88 82 96 83 95 81 80 77 76 75 74 69 66 60 59 58 57 52 51 50 49 44 41 30 29 26 25 24 23 15 14 8 7 6 5 2 1 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 0 7 0 7 56 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 34 0 7 7 17 7 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 0 7 0 7 56 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1015,-4,q),
(906,-117,o),
(906,-281,qs),
(906,-376,o),
(955,-432,qs),
(982,-463,o),
(1044,-463,qs),
(1264,-461,ls),
(1279,-461,o),
(1298,-445,o),
(1298,-434,qs),
(1298,-423,o),
(1282,-405,o),
(1207,-385,o),
(1172,-364,qs),
(1072,-302,o),
(1072,-191,qs),
(1072,-70,o),
(1138,-2,q),
(1229,-9,o),
(1234,-9,qs),
(1286,-9,o),
(1314,14,qs),
(1325,23,o),
(1334,45,o),
(1334,66,o),
(1313,95,o),
(1296,95,q),
(1239,87,l),
(1207,87,o),
(1164,100,o),
(1128,175,o),
(1128,354,qs),
(1128,643,ls),
(1128,837,o),
(1036,932,qs),
(982,988,o),
(793,1053,o),
(545,1053,o),
(401,1017,q),
(395,1017,o),
(355,1042,qs),
(326,1060,o),
(286,1060,qs),
(248,1060,o),
(248,1010,qs),
(248,881,o),
(222,799,qs),
(210,759,o),
(210,741,qs),
(210,711,o),
(268,711,o),
(315,775,qs),
(377,859,o),
(446,888,qs),
(479,902,o),
(551,911,o),
(656,911,o),
(712,900,qs),
(895,864,o),
(895,667,qs),
(895,553,l),
(755,627,o),
(584,627,qs),
(405,627,o),
(286,553,qs),
(147,466,o),
(147,301,qs),
(147,149,o),
(254,64,qs),
(307,22,o),
(467,-24,o),
(619,-24,o),
(664,-16,qs),
(810,12,o),
(897,99,q),
(908,-6,o),
(966,-6,qs),
(993,-6,o)
);
},
{
closed = 1;
nodes = (
(796,117,o),
(644,117,qs),
(520,117,o),
(383,220,o),
(383,323,qs),
(383,362,o),
(400,394,qs),
(456,501,o),
(643,501,qs),
(777,501,o),
(895,427,q),
(895,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 89 87 82 80 72 69 58 56 51 50 49 48 40 39 38 37 35 33 27 26 21 20 15 13 6 5 0 78 1 78 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
16 1 12 2 90 79 2 3 8 12 77 59 2 0 8 3 33 0 2 0 12 8 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 13 9 2 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1351;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (576,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
64 63 55 54 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,15);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (339,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
66 65 49 47 43 42 40 38 18 16 9 8 4 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
0 2 0 2 56 0 6 6 12 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (456,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
54 53 68 66 59 58 53 72 54 72 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,15);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (219,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
73 72 67 65 58 57 49 47 43 42 40 38 18 16 9 8 4 2 9 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
76 1 6 7 1 33 8 1 6 7 3 7 6 3 53 0 2 0 2 56 0 7 7 18 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (623,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
54 53 63 61 53 69 54 69 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,15);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (368,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
57 56 66 64 56 72 57 72 49 47 43 42 40 38 18 16 9 8 4 2 9 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 49 values pushed */
0 2 0 2 56 0 7 8 1 6 3 7 6 1 0 41 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (456,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
70 68 64 62 56 54 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1667;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,15);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (219,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
67 65 59 57 49 47 43 42 40 38 18 16 9 8 4 2 8 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
74 69 2 6 7 1 33 0 6 7 3 7 6 3 53 0 2 0 2 56 0 7 7 12 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (495,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 86 84 80 78 72 70 65 63 56 55 1 51 1 51 44 43 42 41 36 35 32 31 28 26 18 16 13 12 9 8 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 15 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1838;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (80,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,5);
ref = d;
},
{
alignment = -1;
pos = (1207,150);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
88 87 71 70 68 67 61 59 56 53 52 51 50 48 43 42 41 40 32 31 27 26 23 22 12 10 3 2 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 12 12 2 1 0 39 13 4 3 3 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 12 12 2 1 0 39 13 4 3 3 2 2 14 34 0 10 10 1 1 0 39 0 1 1 21 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 4 3 2 2 2 14 34 0 12 12 13 1 0 39 0 13 13 14 34 0 10 10 1 1 0 39 0 1 1 21 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1682;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,1447,o),
(320,1363,o),
(320,1232,qs),
(320,823,l),
(200,823,ls),
(156,823,o),
(142,816,qs),
(131,811,o),
(120,792,o),
(120,736,o),
(162,716,o),
(197,716,qs),
(320,716,l),
(320,314,ls),
(320,185,o),
(299,136,qs),
(276,82,o),
(208,82,q),
(143,88,l),
(104,88,o),
(104,41,qs),
(104,22,o),
(124,6,qs),
(135,-3,o),
(171,-16,o),
(254,-16,o),
(329,-8,qs),
(357,-5,o),
(412,0,o),
(502,0,o),
(549,-4,qs),
(684,-16,ls),
(772,-24,o),
(891,-24,qs),
(1144,-24,o),
(1352,81,qs),
(1559,186,o),
(1676,366,qs),
(1799,554,o),
(1799,785,qs),
(1799,1159,o),
(1576,1368,qs),
(1337,1592,o),
(874,1592,qs),
(798,1592,o),
(660,1576,qs),
(611,1571,o),
(510,1561,o),
(383,1561,o),
(322,1568,qs),
(296,1571,o),
(240,1575,o),
(151,1575,o),
(124,1553,qs),
(113,1544,o),
(104,1523,o),
(104,1497,o),
(124,1471,o),
(143,1471,q),
(193,1477,l),
(233,1477,o)
);
},
{
closed = 1;
nodes = (
(896,716,ls),
(933,716,o),
(975,734,o),
(975,786,o),
(969,798,qs),
(956,823,o),
(895,823,qs),
(559,823,l),
(559,1331,ls),
(559,1365,o),
(598,1410,o),
(702,1446,o),
(851,1446,qs),
(1180,1446,o),
(1356,1280,qs),
(1541,1105,o),
(1541,763,qs),
(1541,412,o),
(1367,261,qs),
(1282,187,o),
(1038,125,o),
(689,125,o),
(624,154,qs),
(559,184,o),
(559,269,qs),
(559,716,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 86 84 80 78 74 72 65 64 0 60 0 60 56 54 49 47 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 16 11 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 13 13 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1838;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(977,-6,q),
(1087,0,ls),
(1098,0,o),
(1137,-3,o),
(1160,-4,qs),
(1204,-8,ls),
(1225,-9,o),
(1292,-9,o),
(1320,14,qs),
(1331,23,o),
(1340,46,o),
(1340,67,o),
(1319,85,o),
(1303,85,q),
(1246,78,l),
(1210,78,o),
(1169,102,o),
(1142,180,o),
(1142,354,qs),
(1142,1222,l),
(1223,1222,ls),
(1318,1222,o),
(1318,1265,qs),
(1318,1283,o),
(1289,1315,o),
(1222,1315,qs),
(1142,1315,l),
(1142,1600,ls),
(1142,1688,o),
(1131,1710,qs),
(1124,1723,o),
(1100,1730,o),
(1067,1730,o),
(1046,1726,o),
(1035,1725,qs),
(973,1718,ls),
(950,1716,o),
(891,1716,o),
(828,1722,qs),
(807,1724,o),
(765,1728,o),
(711,1728,o),
(680,1696,o),
(680,1682,qs),
(680,1638,o),
(752,1632,qs),
(790,1628,o),
(856,1603,o),
(905,1520,o),
(905,1350,qs),
(905,1315,l),
(562,1315,ls),
(466,1315,o),
(466,1271,qs),
(466,1222,o),
(559,1222,qs),
(905,1222,l),
(905,997,l),
(787,1053,o),
(634,1053,qs),
(399,1053,o),
(238,896,qs),
(80,741,o),
(80,517,qs),
(80,271,o),
(231,126,qs),
(304,55,o),
(513,-23,o),
(789,-23,o),
(914,54,q),
(933,-6,o)
);
},
{
closed = 1;
nodes = (
(528,126,o),
(427,243,qs),
(322,365,o),
(322,567,qs),
(322,722,o),
(407,810,qs),
(494,901,o),
(649,901,qs),
(818,901,o),
(905,788,q),
(905,201,l),
(825,126,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
82 81 75 73 70 67 66 65 64 62 57 56 55 54 50 48 45 43 38 37 33 32 29 28 19 17 15 13 11 9 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 13 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 16 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 13 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 16 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1342;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (256,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
98 98 98 111 98 109 105 102 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 105 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 16 18 1 17 8 16 17 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (223,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
60 59 58 57 51 49 39 38 31 29 25 23 8 6 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (254,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
115 113 111 109 105 103 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 120 values pushed */
112 98 2 17 16 1 33 18 1 16 17 17 16 43 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 0 19 19 17 1 0 39 0 17 17 14 34 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 17
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 119 values pushed */
112 98 2 17 16 1 33 18 1 16 17 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 0 19 19 17 1 0 39 0 17 17 14 34 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 17
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (151,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
76 74 71 69 65 63 59 58 51 49 39 38 31 29 25 23 8 6 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (489,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
99 98 108 106 98 114 99 114 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 105 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 17 18 1 16 8 17 16 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (368,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
58 57 67 65 57 73 58 73 51 49 39 38 31 29 25 23 8 6 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(968,-367,qs),
(1010,-465,o),
(1143,-465,qs),
(1364,-463,ls),
(1379,-463,o),
(1397,-446,o),
(1397,-435,qs),
(1397,-410,o),
(1357,-399,q),
(1291,-387,o),
(1246,-365,qs),
(1119,-303,o),
(1119,-192,qs),
(1119,-91,o),
(1215,0,q),
(1289,0,l),
(1329,152,o),
(1389,272,qs),
(1448,387,o),
(1396,384,qs),
(1388,383,o),
(1365,379,o),
(1332,346,qs),
(1297,308,ls),
(1265,273,o),
(1229,240,qs),
(1105,129,o),
(858,129,qs),
(649,129,ls),
(555,129,o),
(555,264,qs),
(555,672,ls),
(555,698,o),
(600,734,o),
(642,734,qs),
(890,734,ls),
(934,734,o),
(976,704,qs),
(998,689,o),
(1039,642,o),
(1059,595,o),
(1071,578,o),
(1083,578,qs),
(1115,578,o),
(1115,634,q),
(1107,803,l),
(1115,964,l),
(1115,1020,o),
(1083,1020,qs),
(1071,1020,o),
(1058,1004,o),
(1038,957,o),
(1018,933,qs),
(960,863,o),
(890,863,qs),
(643,863,ls),
(555,863,o),
(555,916,qs),
(555,1342,ls),
(555,1385,o),
(595,1431,o),
(649,1431,qs),
(919,1431,ls),
(1002,1431,o),
(1052,1420,qs),
(1079,1414,o),
(1146,1383,o),
(1202,1324,qs),
(1262,1258,o),
(1262,1258,q),
(1297,1219,o),
(1310,1219,qs),
(1331,1219,o),
(1331,1247,qs),
(1331,1261,o),
(1324,1294,qs),
(1297,1407,ls),
(1278,1488,o),
(1271,1561,q),
(444,1561,ls),
(389,1561,o),
(316,1568,qs),
(264,1574,ls),
(238,1576,o),
(149,1576,o),
(124,1554,qs),
(113,1545,o),
(104,1524,o),
(104,1498,o),
(124,1472,o),
(143,1472,q),
(192,1478,l),
(232,1478,o),
(283,1448,o),
(320,1366,o),
(320,1233,qs),
(320,330,ls),
(320,194,o),
(300,144,qs),
(276,83,o),
(207,83,q),
(143,90,l),
(124,90,o),
(104,61,o),
(104,24,o),
(124,7,qs),
(134,-2,o),
(171,-15,o),
(238,-15,o),
(268,-12,qs),
(384,-2,ls),
(414,0,o),
(455,0,qs),
(1083,0,l),
(953,-123,o),
(953,-282,qs),
(953,-332,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
114 111 101 100 97 96 89 86 82 79 74 72 68 66 62 59 55 52 45 43 37 35 32 31 26 25 24 23 16 15 14 13 8 7 5 2 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 17 0 17 56 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 34 0 17 17 17 17 35 14
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 17 0 17 56 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 0 35 14
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(703,-281,qs),
(703,-463,o),
(841,-463,qs),
(1061,-461,ls),
(1075,-461,o),
(1094,-445,o),
(1094,-434,qs),
(1094,-408,o),
(1041,-394,qs),
(1004,-385,o),
(969,-364,qs),
(868,-301,o),
(868,-191,qs),
(868,-52,o),
(962,47,q),
(999,69,o),
(1030,96,qs),
(1127,181,o),
(1127,247,qs),
(1127,255,o),
(1123,264,qs),
(1107,300,o),
(1085,300,qs),
(1050,300,o),
(1019,254,qs),
(1001,228,o),
(969,204,qs),
(868,126,o),
(747,126,qs),
(607,126,o),
(504,196,qs),
(387,276,o),
(353,422,q),
(528,464,ls),
(840,538,o),
(1095,631,qs),
(1126,642,o),
(1137,666,qs),
(1142,676,o),
(1145,697,o),
(1145,736,o),
(1104,808,qs),
(1045,907,o),
(956,968,qs),
(833,1053,o),
(669,1053,qs),
(423,1053,o),
(257,888,qs),
(100,733,o),
(100,515,qs),
(100,269,o),
(269,118,qs),
(347,49,o),
(556,-24,o),
(733,-24,o),
(789,-14,q),
(703,-137,o)
);
},
{
closed = 1;
nodes = (
(338,566,qs),
(338,583,ls),
(338,759,o),
(464,841,qs),
(557,901,o),
(662,901,qs),
(769,901,o),
(836,839,qs),
(865,812,o),
(893,749,o),
(893,714,o),
(890,708,qs),
(879,690,o),
(624,622,qs),
(339,548,l),
(338,557,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
67 65 54 51 34 32 28 26 11 9 2 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (322,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
115 113 109 107 101 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 112 values pushed */
116 111 2 16 17 1 33 18 1 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 2 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 16
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1440;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (219,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
68 66 60 58 51 49 39 38 31 29 25 23 8 6 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1220;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (523,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
83 82 1 1 97 95 88 87 82 101 83 101 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 4 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 4 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1827;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (113,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (186,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
101 100 95 93 86 85 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 95 values pushed */
104 1 12 13 6 1 4 8 1 1 11 6 3 33 14 1 12 13 2 13 12 2 53 0 2 0 13 2 0 51 0 3 1 9 1 3 9 53 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 13 13 18 34 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1276;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (455,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 99 97 95 93 89 87 84 83 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 15 14 43 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1827;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (113,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (118,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
103 101 98 96 92 90 86 85 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 99 values pushed */
100 84 2 13 12 6 1 4 8 1 1 11 6 3 33 0 2 15 0 15 2 0 53 0 3 1 9 1 3 9 53 0 13 0 15 2 13 15 1 2 41 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 14 1 12 12 12 34 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1276;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (690,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
83 82 1 1 92 90 82 98 83 98 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 4 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 4 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1827;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (113,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (335,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
85 84 94 92 84 100 85 100 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 89 values pushed */
6 1 4 8 1 1 11 6 2 33 0 2 12 0 12 2 0 53 0 3 1 9 1 3 9 53 0 13 14 1 12 2 13 12 1 0 41 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1276;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Gcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (713,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
1 1 93 91 86 85 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 34 0 14 14 15 1 0 39 0 15 15 17 15 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1827;
}
);
note = Gcommaaccent;
unicode = 290;
},
{
glyphname = gcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(738,1216,qs),
(757,1233,o),
(778,1278,o),
(778,1343,o),
(741,1378,o),
(696,1399,o),
(659,1419,o),
(659,1462,o),
(684,1496,o),
(765,1539,o),
(765,1585,o),
(742,1613,o),
(719,1613,qs),
(629,1613,o),
(561,1551,qs),
(527,1520,o),
(484,1429,o),
(484,1271,o),
(567,1179,o),
(698,1179,o)
);
},
{
closed = 1;
nodes = (
(231,-78,qs),
(113,-149,o),
(113,-257,qs),
(113,-367,o),
(229,-436,qs),
(366,-516,o),
(641,-516,qs),
(908,-516,o),
(1066,-425,qs),
(1220,-336,o),
(1220,-190,qs),
(1220,-66,o),
(1105,2,qs),
(1044,38,o),
(849,85,o),
(519,106,o),
(438,134,qs),
(400,147,o),
(400,178,qs),
(400,203,o),
(446,224,qs),
(470,234,o),
(547,247,o),
(613,247,o),
(635,247,o),
(647,246,q),
(865,252,o),
(1004,380,qs),
(1143,508,o),
(1143,699,qs),
(1143,844,o),
(1021,938,q),
(1139,942,o),
(1269,1010,o),
(1269,1060,qs),
(1269,1082,o),
(1242,1114,o),
(1179,1114,o),
(1140,1090,qs),
(1104,1068,ls),
(1027,1018,o),
(889,1016,q),
(787,1053,o),
(674,1053,qs),
(429,1053,o),
(278,940,qs),
(206,886,o),
(126,735,o),
(126,590,o),
(140,540,qs),
(187,376,o),
(363,297,q),
(282,269,o),
(199,175,o),
(199,127,qs),
(199,28,o),
(332,-33,q),
(273,-52,o)
);
},
{
closed = 1;
nodes = (
(380,794,qs),
(433,901,o),
(608,901,qs),
(734,901,o),
(812,827,qs),
(905,740,o),
(905,573,qs),
(905,387,o),
(667,387,qs),
(361,387,o),
(361,707,qs),
(361,758,o)
);
},
{
closed = 1;
nodes = (
(413,-103,o),
(491,-80,q),
(792,-91,o),
(928,-149,qs),
(988,-175,o),
(1034,-235,o),
(1034,-292,o),
(1001,-336,o),
(892,-378,o),
(723,-378,qs),
(333,-378,o),
(333,-223,qs),
(333,-182,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 100 99 93 91 87 85 81 79 71 69 62 61 54 52 51 50 45 44 40 39 36 35 34 32 0 19 0 19 7 5 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 91 values pushed */
25 1 6 10 20 1 13 8 2 33 0 4 1 2 1 4 2 53 0 5 3 11 3 5 11 53 0 10 7 1 6 8 10 6 1 0 41 0 8 0 13 12 8 13 1 0 41 14 1 1 1 0 1 0 39 0 0 0 18 34 0 3 3 15 34 0 11 11 2 1 0 39 0 2 2 15 34 0 12 12 9 1 2 39 0 9 9 17 9 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1276;
}
);
note = gcommaaccent;
unicode = 291;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = H;
},
{
alignment = -1;
pos = (511,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
151 150 1 1 165 163 156 155 150 169 151 169 1 149 1 149 143 140 134 133 132 131 126 125 122 121 118 117 111 110 109 108 101 100 99 98 93 92 89 88 84 83 78 77 75 74 69 66 61 60 59 58 53 52 49 47 43 42 37 36 35 34 27 26 25 24 19 18 15 13 10 9 3 2 35 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
153 1 30 32 1 33 0 32 30 32 55 31 34 2 30 8 30 55 0 13 0 28 0 13 28 1 2 41 20 19 15 14 12 11 7 7 6 6 8 1 0 39 18 17 16 10 9 5 8 8 12 34 33 29 27 26 22 21 5 4 8 0 0 1 1 0 39 25 24 23 3 2 5 1 1 13 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1937;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,46,qs),
(749,62,o),
(728,89,o),
(711,89,q),
(661,82,l),
(632,82,o),
(590,97,o),
(549,176,o),
(549,342,qs),
(549,711,l),
(606,785,o),
(681,832,qs),
(719,855,o),
(803,882,o),
(910,882,o),
(991,836,o),
(1053,735,o),
(1053,627,qs),
(1053,342,ls),
(1053,189,o),
(1013,82,o),
(954,82,q),
(901,89,l),
(883,89,o),
(862,62,o),
(862,37,o),
(866,26,qs),
(882,-15,o),
(968,-15,q),
(1179,0,l),
(1213,0,o),
(1328,-12,qs),
(1420,-22,o),
(1456,7,qs),
(1467,16,o),
(1475,37,o),
(1475,61,o),
(1456,89,o),
(1439,89,q),
(1386,82,l),
(1362,82,o),
(1326,100,o),
(1289,183,o),
(1289,342,qs),
(1289,685,ls),
(1289,782,o),
(1263,853,qs),
(1190,1053,o),
(937,1053,qs),
(715,1053,o),
(549,874,q),
(549,1600,ls),
(549,1708,o),
(526,1723,q),
(671,1811,l),
(929,1656,ls),
(963,1634,o),
(986,1634,qs),
(1016,1634,o),
(1012,1690,o),
(999,1705,qs),
(782,1941,ls),
(712,2020,o),
(676,2020,qs),
(660,2020,o),
(621,2009,o),
(564,1941,q),
(357,1716,l),
(333,1716,ls),
(298,1716,o),
(234,1722,qs),
(192,1726,ls),
(172,1728,o),
(118,1728,o),
(87,1696,o),
(87,1682,qs),
(87,1638,o),
(160,1632,qs),
(197,1628,o),
(263,1603,o),
(312,1520,o),
(312,1351,qs),
(312,342,ls),
(312,195,o),
(287,137,qs),
(263,82,o),
(207,82,q),
(157,89,l),
(140,89,o),
(119,62,o),
(119,23,o),
(138,7,qs),
(149,-2,o),
(188,-15,o),
(241,-15,o),
(364,0,o),
(428,0,q),
(644,-15,l),
(749,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 0 95 94 93 92 84 83 77 76 75 74 70 67 60 59 58 57 50 48 41 39 35 33 30 28 25 24 12 11 10 9 4 3 0 98 2 98 18 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
43 1 4 6 44 1 7 4 88 47 2 2 14 3 33 0 6 4 6 55 0 7 4 8 4 7 8 53 5 1 4 4 14 34 0 14 14 8 1 0 39 0 8 8 15 34 16 15 13 12 10 9 3 7 2 2 0 1 2 39 11 1 17 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1534;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,109,o),
(556,184,o),
(556,315,qs),
(556,766,ls),
(556,792,o),
(605,829,o),
(662,829,qs),
(1276,829,ls),
(1332,829,o),
(1382,792,o),
(1382,766,qs),
(1382,315,ls),
(1382,186,o),
(1361,137,qs),
(1338,83,o),
(1270,83,q),
(1204,89,l),
(1187,89,o),
(1167,61,o),
(1167,24,o),
(1186,7,qs),
(1197,-2,o),
(1233,-15,o),
(1308,-15,o),
(1389,-8,qs),
(1442,-2,ls),
(1468,0,o),
(1531,0,o),
(1558,-2,qs),
(1611,-8,ls),
(1638,-10,o),
(1668,-12,qs),
(1780,-22,o),
(1814,7,qs),
(1824,16,o),
(1833,38,o),
(1833,61,o),
(1812,89,o),
(1795,89,q),
(1730,83,l),
(1695,83,o),
(1651,109,o),
(1617,187,o),
(1617,315,qs),
(1617,1087,l),
(1743,1087,ls),
(1841,1087,o),
(1841,1137,qs),
(1841,1157,o),
(1832,1168,qs),
(1812,1193,o),
(1742,1193,qs),
(1617,1193,l),
(1617,1245,ls),
(1617,1374,o),
(1638,1424,qs),
(1662,1478,o),
(1730,1478,q),
(1795,1472,l),
(1812,1472,o),
(1833,1499,o),
(1833,1536,o),
(1814,1554,qs),
(1803,1563,o),
(1766,1576,o),
(1692,1576,o),
(1611,1568,qs),
(1558,1564,ls),
(1531,1561,o),
(1468,1561,o),
(1442,1564,qs),
(1389,1568,ls),
(1362,1571,o),
(1301,1576,o),
(1211,1576,o),
(1186,1554,qs),
(1176,1544,o),
(1167,1523,o),
(1167,1499,o),
(1187,1472,o),
(1204,1472,q),
(1270,1478,o),
(1270,1478,q),
(1305,1478,o),
(1349,1452,o),
(1382,1375,o),
(1382,1245,qs),
(1382,1193,l),
(556,1193,l),
(556,1245,ls),
(556,1377,o),
(576,1424,qs),
(599,1478,o),
(668,1478,q),
(732,1472,l),
(771,1472,o),
(771,1518,qs),
(771,1536,o),
(751,1554,qs),
(740,1563,o),
(704,1576,o),
(629,1576,o),
(548,1568,qs),
(494,1564,ls),
(468,1561,o),
(437,1561,qs),
(406,1561,o),
(380,1564,qs),
(327,1568,ls),
(300,1571,o),
(238,1576,o),
(150,1576,o),
(124,1554,qs),
(113,1544,o),
(104,1523,o),
(104,1499,o),
(124,1472,o),
(142,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,1193,l),
(190,1193,ls),
(91,1193,o),
(91,1144,qs),
(91,1087,o),
(187,1087,qs),
(320,1087,l),
(320,315,ls),
(320,186,o),
(299,137,qs),
(276,83,o),
(208,83,q),
(142,89,l),
(124,89,o),
(104,61,o),
(104,23,o),
(124,7,qs),
(135,-2,o),
(171,-15,o),
(246,-15,o),
(327,-8,qs),
(380,-2,ls),
(406,0,o),
(437,0,qs),
(468,0,o),
(494,-2,qs),
(548,-8,ls),
(575,-10,o),
(606,-12,qs),
(716,-22,o),
(751,7,qs),
(762,16,o),
(771,38,o),
(771,61,o),
(751,89,o),
(732,89,q),
(668,83,l),
(632,83,o)
);
},
{
closed = 1;
nodes = (
(556,972,o),
(556,1023,qs),
(556,1087,l),
(1382,1087,l),
(1382,1023,ls),
(1382,972,o),
(1276,972,qs),
(662,972,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
162 161 0 0 165 164 161 168 162 167 0 160 0 160 154 151 145 144 143 142 137 136 133 132 129 128 122 121 120 119 115 113 109 107 103 102 101 100 95 94 91 90 86 85 80 79 77 76 72 71 67 66 65 64 59 58 55 53 49 48 43 42 41 40 36 34 32 30 26 25 24 23 18 17 14 12 9 8 2 1 38 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 76 values pushed */
23 15 2 7 35 24 2 6 34 7 6 1 0 41 37 1 34 0 32 0 34 32 1 0 41 22 21 17 16 14 13 9 7 8 8 10 1 0 39 20 19 18 12 11 5 10 10 12 34 36 33 31 30 26 25 5 4 8 0 0 1 1 0 39 29 28 27 3 2 5 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1937;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,46,qs),
(749,62,o),
(728,89,o),
(711,89,q),
(661,82,l),
(632,82,o),
(590,97,o),
(549,176,o),
(549,342,qs),
(549,711,l),
(606,785,o),
(681,832,qs),
(719,855,o),
(803,882,o),
(910,882,o),
(991,836,o),
(1053,735,o),
(1053,627,qs),
(1053,342,ls),
(1053,189,o),
(1013,82,o),
(954,82,q),
(901,89,l),
(883,89,o),
(862,62,o),
(862,37,o),
(866,26,qs),
(882,-15,o),
(968,-15,q),
(1179,0,l),
(1213,0,o),
(1328,-12,qs),
(1420,-22,o),
(1456,7,qs),
(1467,16,o),
(1475,37,o),
(1475,61,o),
(1456,89,o),
(1439,89,q),
(1386,82,l),
(1362,82,o),
(1326,100,o),
(1289,183,o),
(1289,342,qs),
(1289,685,ls),
(1289,782,o),
(1263,853,qs),
(1190,1053,o),
(937,1053,qs),
(715,1053,o),
(549,874,q),
(549,1189,l),
(904,1189,ls),
(943,1189,o),
(971,1203,qs),
(985,1210,o),
(1002,1233,o),
(1002,1269,o),
(992,1282,qs),
(967,1315,o),
(903,1315,qs),
(549,1315,l),
(549,1600,ls),
(549,1688,o),
(538,1710,qs),
(532,1723,o),
(507,1730,o),
(470,1730,o),
(442,1725,qs),
(380,1718,o),
(380,1718,q),
(357,1716,o),
(298,1716,o),
(234,1722,qs),
(192,1726,ls),
(172,1728,o),
(118,1728,o),
(87,1696,o),
(87,1682,qs),
(87,1638,o),
(160,1632,qs),
(197,1628,o),
(263,1603,o),
(312,1520,o),
(312,1351,qs),
(312,1315,l),
(200,1315,ls),
(153,1315,o),
(101,1280,o),
(101,1227,o),
(152,1189,o),
(197,1189,qs),
(312,1189,l),
(312,342,ls),
(312,195,o),
(287,137,qs),
(263,82,o),
(207,82,q),
(157,89,l),
(140,89,o),
(119,62,o),
(119,23,o),
(138,7,qs),
(149,-2,o),
(188,-15,o),
(241,-15,o),
(364,0,o),
(428,0,q),
(644,-15,l),
(749,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 0 106 105 104 103 95 94 88 87 86 85 81 78 71 70 69 68 61 59 57 55 49 47 42 41 37 36 33 32 23 21 18 16 12 11 10 9 4 3 0 109 2 109 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
99 58 2 2 17 1 33 9 1 5 10 1 4 11 5 4 1 2 41 8 7 2 6 6 14 34 0 17 17 11 1 0 39 0 11 11 15 34 19 18 16 15 13 12 3 7 2 2 0 1 0 39 14 1 20 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1534;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-47,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
65 64 1 1 89 87 85 83 79 78 76 74 71 69 64 91 65 91 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 59 values pushed */
17 20 2 13 0 15 14 13 15 1 0 41 0 18 16 1 14 7 18 14 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 19 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (53,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-45,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 1 75 74 72 70 66 64 60 59 57 55 52 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
39 1 0 5 1 33 13 1 11 0 9 8 11 9 1 0 41 0 12 10 1 8 5 12 8 1 0 41 6 1 5 5 15 34 14 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (23,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-76,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
64 64 1 1 64 77 64 75 71 68 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
0 13 16 1 14 7 13 14 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (64,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-34,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 1 52 51 50 49 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 11 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 41 values pushed */
39 1 0 5 1 33 0 8 0 9 5 8 9 0 0 41 6 1 5 5 15 34 10 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (10,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-78,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
1 1 81 79 77 75 71 69 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
78 64 2 14 13 1 33 15 1 13 14 5 13 1 0 38 0 16 16 14 1 0 39 0 14 14 14 34 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 17 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-106,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 68 66 63 61 57 55 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 13 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
65 49 2 9 8 39 1 0 5 2 33 0 9 0 11 5 9 11 1 2 41 10 1 8 8 12 34 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,-367,qs),
(326,-465,o),
(459,-465,qs),
(680,-463,ls),
(695,-463,o),
(713,-446,o),
(713,-435,qs),
(713,-410,o),
(673,-399,q),
(607,-387,o),
(562,-365,qs),
(435,-303,o),
(435,-192,qs),
(435,-92,o),
(526,-5,q),
(593,-11,ls),
(628,-14,o),
(726,-14,o),
(752,8,qs),
(762,17,o),
(771,39,o),
(771,62,o),
(752,90,o),
(733,90,q),
(668,84,l),
(633,84,o),
(589,110,o),
(556,187,o),
(556,316,qs),
(556,1245,ls),
(556,1375,o),
(577,1424,qs),
(600,1478,o),
(668,1478,q),
(733,1472,l),
(771,1472,o),
(771,1517,qs),
(771,1536,o),
(752,1554,qs),
(741,1563,o),
(705,1576,o),
(630,1576,o),
(549,1568,qs),
(496,1564,ls),
(470,1561,o),
(407,1561,o),
(381,1564,qs),
(328,1568,ls),
(301,1571,o),
(239,1576,o),
(149,1576,o),
(124,1554,qs),
(114,1544,o),
(105,1523,o),
(105,1499,o),
(125,1472,o),
(144,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,316,ls),
(320,187,o),
(299,138,qs),
(276,84,o),
(208,84,q),
(144,90,l),
(125,90,o),
(105,62,o),
(105,25,o),
(124,8,qs),
(135,-1,o),
(172,-14,o),
(257,-14,o),
(325,-7,qs),
(366,-2,o),
(398,-1,q),
(269,-123,o),
(269,-282,qs),
(269,-332,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
78 75 63 62 57 56 55 54 47 46 45 44 39 38 35 34 30 29 24 23 22 21 14 13 12 11 6 5 3 2 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 14 0 14 56 10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 34 0 14 14 17 14 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 14 0 14 56 10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 0 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,1357,o),
(558,1449,o),
(520,1494,qs),
(502,1516,o),
(445,1543,o),
(339,1543,o),
(296,1498,qs),
(276,1477,o),
(253,1420,o),
(253,1324,o),
(288,1282,qs),
(307,1260,o),
(364,1233,o),
(439,1233,o),
(496,1260,o),
(536,1303,o)
);
},
{
closed = 1;
nodes = (
(289,-367,qs),
(331,-465,o),
(464,-465,qs),
(685,-463,ls),
(700,-463,o),
(718,-446,o),
(718,-435,qs),
(718,-410,o),
(678,-399,q),
(612,-387,o),
(567,-365,qs),
(440,-303,o),
(440,-192,qs),
(440,-93,o),
(529,-6,q),
(586,-12,ls),
(613,-15,o),
(641,-15,qs),
(746,-15,o),
(746,46,qs),
(746,62,o),
(726,89,o),
(708,89,q),
(659,82,l),
(629,82,o),
(587,102,o),
(547,189,o),
(547,357,qs),
(547,897,ls),
(547,979,o),
(522,1009,qs),
(508,1025,o),
(467,1025,q),
(316,1013,l),
(169,1025,o),
(169,1025,q),
(134,1025,o),
(117,1006,qs),
(110,998,o),
(104,980,o),
(104,953,o),
(143,933,o),
(197,918,o),
(251,898,o),
(276,863,o),
(284,846,qs),
(310,793,o),
(310,651,qs),
(310,357,ls),
(310,282,o),
(304,230,qs),
(287,82,o),
(204,82,q),
(155,89,l),
(138,89,o),
(117,62,o),
(117,23,o),
(136,7,qs),
(147,-2,o),
(186,-15,o),
(238,-15,o),
(256,-13,qs),
(316,-6,ls),
(358,-1,o),
(404,0,q),
(274,-123,o),
(274,-282,qs),
(274,-332,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
81 78 66 64 61 60 59 58 51 50 47 46 31 30 29 28 23 22 19 18 10 9 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
49 1 4 6 1 33 0 11 2 11 56 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 2 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
49 1 4 6 1 33 0 0 0 1 1 0 39 0 1 1 12 34 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 34 0 11 11 17 11 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
49 1 4 6 1 33 0 11 2 11 56 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 2 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (156,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
65 64 1 1 74 72 64 80 65 80 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
0 14 16 1 13 7 14 13 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,110,o),
(543,185,o),
(543,350,qs),
(543,883,ls),
(543,963,o),
(519,993,qs),
(506,1009,o),
(464,1009,q),
(316,997,l),
(172,1009,l),
(138,1009,o),
(121,990,qs),
(114,982,o),
(108,965,o),
(108,938,o),
(147,919,o),
(199,904,o),
(263,880,o),
(286,833,qs),
(310,781,o),
(310,638,qs),
(310,350,ls),
(310,206,o),
(286,148,qs),
(263,95,o),
(207,95,q),
(158,102,l),
(142,102,o),
(121,76,o),
(121,38,o),
(140,22,qs),
(150,13,o),
(189,0,o),
(241,0,o),
(281,5,o),
(327,10,o),
(385,15,o),
(481,15,o),
(532,8,qs),
(677,-14,o),
(718,20,qs),
(729,29,o),
(738,50,o),
(738,76,o),
(718,102,o),
(701,102,q),
(653,95,l),
(624,95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 47 0 47 40 39 37 36 22 21 20 19 14 13 10 9 2 1 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
38 1 0 5 1 33 6 1 5 5 15 34 8 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (876,0);
ref = J;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
64 64 1 1 64 117 64 117 112 111 108 107 105 103 98 97 96 95 87 86 82 80 75 73 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 25 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
78 1 0 15 1 33 0 15 5 0 5 15 0 53 24 22 18 17 13 11 10 6 8 5 5 7 1 0 39 21 20 19 9 8 5 7 7 12 34 16 23 12 4 3 5 0 0 1 1 0 39 14 2 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
78 1 0 16 1 33 0 15 5 16 5 15 16 53 24 22 18 17 13 11 10 6 8 5 5 7 1 0 39 21 20 19 9 8 5 7 7 12 34 0 16 16 1 1 0 39 14 2 2 1 1 13 34 23 12 4 3 4 0 0 1 1 0 39 14 2 2 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2297;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (807,0);
ref = j;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
19 17 116 114 107 104 101 100 86 85 81 79 72 71 64 63 58 57 56 55 48 47 45 44 29 28 27 26 21 20 17 61 19 61 11 10 3 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 11 1 1 10 1 0 6 1 0 1 0 41 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 10 1 0 0 1 1 0 39 11 1 1 1 12 34 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 11 1 1 10 1 0 6 1 0 1 0 41 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1580;
}
);
note = ij;
unicode = 307;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (156,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (597,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
56 55 1 1 70 68 61 60 55 74 56 74 1 54 1 54 49 48 45 44 42 40 35 34 33 32 24 23 19 17 12 10 3 2 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1421;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessj;
},
{
alignment = -1;
pos = (-27,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
58 57 52 50 43 42 39 37 30 27 24 23 9 8 4 2 8 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
61 1 5 6 40 1 4 1 2 33 7 1 5 6 2 6 5 2 53 0 0 2 1 2 0 1 53 0 6 6 18 34 3 1 2 2 15 34 0 1 1 4 1 2 39 0 4 4 17 4 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = Kcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (624,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
1 1 130 128 123 122 1 118 1 118 106 105 99 98 97 96 86 85 84 83 80 79 78 76 73 70 59 58 57 56 51 50 47 45 41 40 35 34 33 32 25 24 23 22 17 16 14 12 10 8 3 2 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
114 89 63 3 0 6 1 33 17 16 13 12 11 7 6 6 6 8 1 0 39 15 14 10 9 4 8 8 12 34 24 21 19 18 5 4 6 0 0 1 1 0 39 20 3 2 3 1 1 13 34 0 22 22 23 1 0 39 0 23 23 17 23 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1625;
}
);
note = Kcommaaccent;
unicode = 310;
},
{
glyphname = kcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (87,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (450,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
3 1 109 107 102 101 89 88 87 86 78 77 76 75 72 71 65 64 63 62 57 56 55 54 51 49 48 47 46 45 40 39 38 37 29 28 27 26 23 22 10 9 8 7 1 97 3 97 23 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 67 values pushed */
83 60 33 3 1 6 1 33 5 4 2 3 3 14 34 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 15 34 19 18 14 13 2 5 1 1 0 1 2 39 17 16 15 22 4 0 0 13 34 0 20 20 21 1 2 39 0 21 21 17 21 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1425;
}
);
note = kcommaaccent;
unicode = 311;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,15,o),
(581,2,qs),
(604,0,o),
(632,0,qs),
(727,0,o),
(727,50,qs),
(727,82,o),
(691,82,q),
(640,75,l),
(616,75,o),
(580,99,o),
(544,192,o),
(544,350,qs),
(544,519,l),
(750,310,l),
(896,166,ls),
(956,108,o),
(1034,42,o),
(1098,0,o),
(1134,0,q),
(1254,9,ls),
(1265,9,o),
(1301,6,o),
(1322,4,qs),
(1362,2,ls),
(1382,0,o),
(1397,0,qs),
(1482,0,o),
(1482,52,qs),
(1482,65,o),
(1461,83,o),
(1445,83,q),
(1401,76,l),
(1332,76,o),
(1188,209,qs),
(783,583,l),
(1010,696,o),
(1207,870,qs),
(1290,943,o),
(1331,943,q),
(1386,936,l),
(1403,936,o),
(1423,954,o),
(1423,966,qs),
(1423,1019,o),
(1336,1019,qs),
(1290,1019,o),
(1212,1003,o),
(1171,1003,q),
(946,1019,l),
(856,1019,o),
(856,966,qs),
(856,954,o),
(876,936,o),
(892,936,q),
(950,943,l),
(1024,943,o),
(1024,903,qs),
(1024,875,o),
(952,816,qs),
(783,678,o),
(544,595,q),
(544,884,ls),
(544,965,o),
(520,994,qs),
(507,1009,o),
(466,1009,q),
(318,997,l),
(265,997,o),
(202,1009,o),
(174,1009,qs),
(110,1009,o),
(110,966,qs),
(110,949,o),
(148,933,o),
(249,910,o),
(269,885,qs),
(312,828,o),
(312,637,qs),
(312,350,ls),
(312,75,o),
(212,75,q),
(160,82,l),
(123,82,o),
(123,50,qs),
(123,0,o),
(227,0,q),
(437,15,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
87 86 84 82 80 79 78 77 68 67 66 65 63 62 61 59 56 55 54 53 48 47 46 45 42 40 39 36 33 32 31 30 21 20 19 18 17 15 6 5 4 3 1 0 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
73 51 25 3 1 6 1 33 11 10 7 3 6 6 3 1 0 39 9 8 5 4 4 3 3 15 34 19 18 13 12 2 5 1 1 0 1 2 39 21 20 17 16 15 14 6 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1427;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1214,1852,o),
(1214,1932,qs),
(1214,1973,o),
(1162,2020,o),
(1102,2020,o),
(1082,2016,qs),
(1019,2002,o),
(941,1905,qs),
(782,1708,ls),
(765,1685,o),
(765,1672,qs),
(765,1663,o),
(779,1643,o),
(809,1643,o),
(841,1659,qs),
(1077,1779,ls)
);
},
{
closed = 1;
nodes = (
(1326,365,qs),
(1188,223,o),
(1063,162,qs),
(990,126,o),
(851,126,qs),
(642,126,ls),
(551,126,o),
(551,259,qs),
(551,1204,ls),
(551,1333,o),
(571,1378,qs),
(594,1432,o),
(661,1432,q),
(725,1426,l),
(743,1426,o),
(763,1453,o),
(763,1489,o),
(744,1506,qs),
(733,1515,o),
(697,1528,o),
(624,1528,o),
(544,1520,qs),
(492,1516,ls),
(466,1513,o),
(405,1513,o),
(353,1518,o),
(301,1523,o),
(241,1528,o),
(154,1528,o),
(128,1506,qs),
(118,1497,o),
(109,1476,o),
(109,1453,o),
(129,1426,o),
(147,1426,q),
(210,1432,l),
(245,1432,o),
(288,1406,o),
(320,1333,o),
(320,1204,qs),
(320,324,ls),
(320,188,o),
(302,140,qs),
(279,81,o),
(210,81,q),
(147,88,l),
(129,88,o),
(109,60,o),
(109,24,o),
(128,7,qs),
(139,-2,o),
(174,-15,o),
(241,-15,o),
(272,-12,qs),
(369,-5,ls),
(434,0,o),
(502,0,qs),
(1275,0,l),
(1297,95,o),
(1319,160,qs),
(1330,193,o),
(1356,254,o),
(1400,345,o),
(1400,372,qs),
(1400,398,o),
(1376,398,qs),
(1357,398,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
17 16 78 75 70 69 68 67 62 61 58 57 54 53 48 47 46 45 38 37 36 35 30 29 26 24 16 82 17 82 11 10 2 1 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 63 values pushed */
0 1 0 1 55 0 0 9 0 55 15 1 2 7 14 7 2 14 53 11 10 2 9 13 12 8 3 7 2 9 7 1 0 41 0 14 14 3 1 2 39 4 1 3 3 13 34 6 1 5 5 3 1 0 39 4 1 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1390;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,5,o),
(332,10,o),
(393,15,o),
(456,15,o),
(569,2,qs),
(592,0,o),
(620,0,qs),
(715,0,o),
(715,50,qs),
(715,82,o),
(679,82,q),
(628,75,l),
(604,75,o),
(568,99,o),
(533,189,o),
(533,350,qs),
(533,1398,ls),
(533,1485,o),
(522,1505,qs),
(515,1518,o),
(491,1525,o),
(459,1525,o),
(438,1521,o),
(428,1520,qs),
(367,1514,ls),
(344,1511,o),
(286,1511,o),
(223,1517,qs),
(182,1521,ls),
(162,1523,o),
(141,1523,qs),
(79,1523,o),
(79,1484,qs),
(79,1467,o),
(114,1452,o),
(188,1445,o),
(253,1412,o),
(300,1319,o),
(300,1151,qs),
(300,350,ls),
(300,194,o),
(281,138,qs),
(260,75,o),
(203,75,q),
(151,82,l),
(114,82,o),
(114,50,qs),
(114,0,o),
(218,0,qs),
(233,0,o)
);
},
{
closed = 1;
nodes = (
(755,1856,o),
(755,1936,qs),
(755,1977,o),
(703,2024,o),
(643,2024,o),
(622,2020,qs),
(560,2006,o),
(482,1909,qs),
(323,1722,l),
(306,1699,o),
(306,1686,qs),
(306,1677,o),
(320,1657,o),
(350,1657,o),
(382,1673,qs),
(618,1783,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 61 60 52 51 46 45 43 41 39 38 37 36 28 27 23 22 19 17 6 5 4 3 0 49 1 49 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 37 values pushed */
0 11 10 11 55 0 10 3 10 55 5 4 2 3 1 3 55 7 6 2 3 1 1 0 1 2 39 9 8 12 3 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Lcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (504,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 80 78 73 72 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 5 12 5 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 34 0 13 13 14 1 0 39 0 14 14 17 14 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1394;
}
);
note = Lcommaaccent;
unicode = 315;
},
{
glyphname = lcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (176,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 60 58 53 52 1 48 1 48 41 40 39 38 35 34 22 21 20 19 14 13 12 11 3 2 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 38 values pushed */
7 6 2 5 5 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 34 0 9 9 10 1 0 39 0 10 10 17 10 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = lcommaaccent;
unicode = 316;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,5);
ref = L;
},
{
alignment = -1;
pos = (870,0);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 88 87 71 70 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
15 1 0 13 12 13 0 12 53 11 10 6 3 5 5 7 1 0 39 14 9 8 3 7 7 12 34 0 13 13 7 1 0 39 14 9 8 3 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 13 12 13 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 13 13 14 1 0 39 0 14 14 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1394;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,5);
ref = l;
},
{
alignment = -1;
pos = (553,150);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 68 67 51 50 1 48 1 48 41 40 39 38 35 34 22 21 20 19 14 13 12 11 3 2 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 9 9 5 1 0 39 10 7 6 3 5 5 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 6 2 5 5 14 34 0 9 9 10 1 0 39 0 10 10 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 988;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (918,790);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 83 82 76 74 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 21 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 21 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1394;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1154,465,o),
(1271,465,o),
(1320,517,qs),
(1365,566,o),
(1365,622,qs),
(1365,688,o),
(1324,737,qs),
(1278,794,o),
(1202,794,qs),
(1128,794,o),
(1078,743,qs),
(1056,720,o),
(1031,659,o),
(1031,599,o),
(1051,542,o),
(1091,495,o)
);
},
{
closed = 1;
nodes = (
(573,100,o),
(537,182,o),
(537,342,qs),
(537,1600,ls),
(537,1683,o),
(521,1713,qs),
(511,1730,o),
(473,1730,q),
(320,1716,l),
(285,1716,o),
(220,1722,qs),
(179,1726,ls),
(159,1728,o),
(105,1728,o),
(74,1696,o),
(74,1682,qs),
(74,1638,o),
(148,1632,qs),
(185,1628,o),
(251,1602,o),
(300,1520,o),
(300,1348,qs),
(300,342,ls),
(300,186,o),
(280,136,qs),
(260,82,o),
(201,82,q),
(148,89,l),
(131,89,o),
(110,62,o),
(110,22,o),
(130,7,qs),
(141,-2,o),
(182,-15,o),
(248,-15,o),
(362,0,o),
(457,0,o),
(481,-2,qs),
(574,-12,ls),
(667,-23,o),
(703,7,qs),
(714,16,o),
(723,37,o),
(723,61,o),
(703,89,o),
(686,89,q),
(634,82,l),
(609,82,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
16 16 16 63 16 63 56 55 54 53 50 49 37 36 35 34 29 28 27 26 18 17 14 13 7 5 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
0 0 0 1 2 0 1 1 0 41 9 8 2 7 7 14 34 11 10 6 5 4 2 2 3 1 0 39 4 1 3 3 13 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1407;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1266,372,q),
(1202,295,o),
(1099,200,o),
(968,129,o),
(851,129,qs),
(648,129,ls),
(555,129,o),
(555,264,qs),
(555,750,l),
(822,895,ls),
(906,940,o),
(906,982,qs),
(906,1003,o),
(876,1028,o),
(837,1028,o),
(753,983,qs),
(555,876,l),
(555,1245,ls),
(555,1376,o),
(576,1424,qs),
(601,1478,o),
(668,1478,q),
(733,1472,o),
(733,1472,q),
(751,1472,o),
(772,1499,o),
(772,1536,o),
(752,1554,qs),
(741,1563,o),
(704,1576,o),
(630,1576,o),
(549,1568,qs),
(496,1564,ls),
(469,1561,o),
(406,1561,o),
(380,1564,qs),
(327,1568,ls),
(300,1571,o),
(239,1576,o),
(149,1576,o),
(124,1554,qs),
(114,1544,o),
(105,1523,o),
(105,1499,o),
(125,1472,o),
(143,1472,q),
(208,1478,l),
(243,1478,o),
(287,1452,o),
(320,1375,o),
(320,1245,qs),
(320,750,l),
(181,676,ls),
(120,643,o),
(120,602,qs),
(120,579,o),
(148,553,o),
(192,553,o),
(257,588,qs),
(320,622,l),
(320,330,ls),
(320,192,o),
(301,144,qs),
(277,83,o),
(208,83,q),
(143,90,l),
(125,90,o),
(105,61,o),
(105,24,o),
(124,7,qs),
(135,-2,o),
(171,-15,o),
(239,-15,o),
(272,-12,qs),
(370,-5,ls),
(436,0,o),
(505,0,qs),
(1284,0,l),
(1281,33,o),
(1281,138,o),
(1310,274,qs),
(1323,331,o),
(1341,368,o),
(1341,379,qs),
(1341,406,o),
(1317,406,qs),
(1298,406,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 0 82 79 72 71 65 64 62 61 56 55 52 51 47 46 41 40 39 38 29 28 22 21 20 19 14 13 10 8 0 86 1 86 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 76 values pushed */
77 69 34 26 4 5 13 1 33 0 5 13 0 13 5 0 53 15 1 0 14 13 0 14 51 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 12 34 0 13 13 15 34 0 14 14 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1394;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,118,o),
(533,197,o),
(533,355,qs),
(533,914,l),
(669,1003,ls),
(751,1055,o),
(751,1093,qs),
(751,1114,o),
(722,1139,o),
(705,1139,qs),
(677,1139,o),
(598,1089,qs),
(533,1047,l),
(533,1574,ls),
(533,1661,o),
(522,1681,qs),
(515,1694,o),
(491,1701,o),
(459,1701,o),
(386,1687,o),
(315,1687,qs),
(286,1687,o),
(223,1693,qs),
(182,1697,ls),
(162,1699,o),
(109,1699,o),
(79,1668,o),
(79,1654,qs),
(79,1611,o),
(151,1604,qs),
(188,1601,o),
(253,1575,o),
(300,1493,o),
(300,1327,qs),
(300,895,l),
(156,802,ls),
(133,786,o),
(96,753,o),
(96,706,o),
(124,680,o),
(170,680,o),
(234,719,qs),
(300,762,l),
(300,355,ls),
(300,203,o),
(281,152,qs),
(261,100,o),
(203,100,q),
(151,107,l),
(134,107,o),
(114,81,o),
(114,43,o),
(133,27,qs),
(144,18,o),
(185,5,o),
(233,5,o),
(278,10,o),
(332,15,o),
(393,20,o),
(456,20,o),
(569,8,qs),
(592,5,o),
(620,5,qs),
(670,5,o),
(696,27,qs),
(706,36,o),
(715,57,o),
(715,80,o),
(695,107,o),
(679,107,q),
(628,100,l),
(604,100,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 71 0 71 62 60 53 52 51 49 46 45 31 30 24 23 22 21 16 15 12 11 9 7 2 1 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 51 values pushed */
67 58 36 28 4 6 10 1 33 0 10 7 6 7 10 6 53 0 6 6 7 1 0 39 9 8 2 7 7 14 34 12 11 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (613,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 95 94 86 85 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 18 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1766;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (457,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
3 1 96 95 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 15 15 12 34 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 16 3 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 15 15 12 34 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 16 3 0 0 13 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1522;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (705,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 95 93 88 87 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 16 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 18 15 1 3 0 0 13 34 0 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1766;
}
);
note = Ncommaaccent;
unicode = 325;
},
{
glyphname = ncommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (597,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 97 95 90 89 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
28 1 12 4 75 34 2 2 12 2 33 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1522;
}
);
note = ncommaaccent;
unicode = 326;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (493,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
1 1 101 99 95 93 87 85 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 18 1 17 16 5 17 1 0 38 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 19 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1766;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (337,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 97 95 89 87 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
104 99 2 15 16 28 1 12 4 75 34 2 2 12 3 33 0 15 16 4 16 15 4 53 0 16 16 12 34 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
104 99 2 15 16 28 1 12 4 75 34 2 2 12 3 33 0 15 16 6 16 15 6 53 0 16 16 12 34 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1522;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,-8,qs),
(310,-2,ls),
(330,0,o),
(351,0,q),
(542,-15,l),
(597,-15,o),
(639,19,o),
(639,37,qs),
(639,68,o),
(600,68,q),
(526,62,l),
(491,62,o),
(447,95,o),
(414,183,o),
(414,315,qs),
(414,1155,l),
(1358,133,l),
(1358,-20,ls),
(1358,-131,o),
(1328,-205,qs),
(1244,-407,o),
(1014,-407,qs),
(720,-407,o),
(614,-204,q),
(600,-144,o),
(579,-144,qs),
(567,-144,o),
(560,-149,qs),
(538,-163,o),
(538,-266,qs),
(538,-387,l),
(593,-423,o),
(652,-448,qs),
(815,-518,o),
(964,-518,qs),
(1200,-518,o),
(1365,-402,qs),
(1553,-270,o),
(1553,-26,qs),
(1553,184,l),
(1554,187,l),
(1554,1246,ls),
(1554,1380,o),
(1575,1436,qs),
(1599,1500,o),
(1666,1500,q),
(1731,1493,l),
(1769,1493,o),
(1769,1525,qs),
(1769,1546,o),
(1750,1560,qs),
(1739,1567,o),
(1702,1577,o),
(1637,1577,o),
(1574,1570,qs),
(1534,1564,ls),
(1514,1562,o),
(1492,1562,q),
(1301,1577,l),
(1274,1577,o),
(1256,1572,qs),
(1205,1558,o),
(1205,1525,qs),
(1205,1493,o),
(1244,1493,q),
(1317,1500,l),
(1352,1500,o),
(1396,1468,o),
(1429,1380,o),
(1429,1246,qs),
(1429,441,l),
(383,1561,l),
(68,1572,ls),
(10,1572,o),
(10,1544,qs),
(10,1531,o),
(30,1512,o),
(116,1479,o),
(210,1389,o),
(291,1253,o),
(291,1186,qs),
(290,315,ls),
(290,183,o),
(269,127,qs),
(245,62,o),
(177,62,q),
(113,68,l),
(74,68,o),
(74,37,qs),
(74,-15,o),
(169,-15,qs),
(204,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 0 88 87 86 85 82 81 80 79 70 68 66 64 57 55 46 45 44 43 38 37 34 33 32 31 27 26 25 24 19 17 6 5 4 3 0 91 1 91 19 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 72 values pushed */
75 74 51 50 20 5 1 4 60 1 13 12 2 33 0 12 0 13 0 12 13 53 10 9 5 3 4 4 3 1 0 39 8 7 6 3 3 3 12 34 15 14 2 3 1 1 0 1 2 39 17 16 18 3 0 0 13 34 0 13 13 11 1 0 39 0 11 11 17 11 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1748;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,-10,o),
(319,-5,o),
(377,0,o),
(431,0,o),
(450,-1,qs),
(486,-3,ls),
(504,-4,o),
(537,-7,o),
(549,-8,qs),
(572,-11,ls),
(596,-15,o),
(632,-15,qs),
(737,-15,o),
(737,36,qs),
(737,68,o),
(699,68,q),
(650,61,l),
(621,61,o),
(578,83,o),
(538,175,o),
(538,342,qs),
(538,748,l),
(682,923,o),
(835,923,qs),
(899,923,o),
(939,897,qs),
(1041,831,o),
(1041,648,qs),
(1039,84,ls),
(1039,-118,o),
(1016,-235,qs),
(1005,-291,o),
(973,-363,o),
(921,-419,o),
(866,-419,qs),
(770,-419,o),
(696,-260,qs),
(673,-214,o),
(642,-214,qs),
(615,-214,o),
(615,-246,qs),
(615,-488,l),
(731,-516,o),
(818,-516,qs),
(1272,-516,o),
(1276,84,qs),
(1278,685,ls),
(1278,779,o),
(1251,853,qs),
(1178,1053,o),
(925,1053,qs),
(708,1053,o),
(538,870,q),
(538,896,ls),
(538,978,o),
(513,1008,qs),
(499,1024,o),
(458,1024,q),
(306,1012,l),
(160,1024,l),
(94,1024,o),
(94,979,qs),
(94,962,o),
(134,946,o),
(187,935,o),
(242,919,o),
(257,898,qs),
(300,843,o),
(300,651,qs),
(300,342,ls),
(300,266,o),
(294,212,qs),
(279,61,o),
(195,61,q),
(146,68,l),
(107,68,o),
(107,36,qs),
(107,-15,o),
(208,-15,qs),
(230,-15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 76 72 68 66 64 63 62 61 56 54 45 43 41 39 36 34 29 27 22 21 19 18 6 5 4 3 0 79 1 79 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 4 1 3 3 15 34 0 9 9 5 1 0 39 0 5 5 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 0 9 9 3 1 0 39 5 4 2 3 3 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 4 1 3 3 15 34 0 9 9 5 1 0 39 0 5 5 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1523;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Omacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (395,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
41 41 41 54 41 52 48 45 38 36 30 28 19 17 7 5 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (222,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
37 36 35 34 33 31 25 23 15 13 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (393,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
58 56 54 52 48 46 43 42 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
55 41 2 5 4 1 33 6 1 4 5 5 4 43 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (150,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
53 51 48 46 42 40 36 35 33 31 25 23 15 13 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (99,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (628,0);
ref = hungarumlaut.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
60 59 42 41 68 67 59 76 60 76 50 49 41 58 42 58 38 36 30 28 19 17 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1847;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (100,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (16,0);
ref = hungarumlaut;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
51 50 35 34 57 56 50 65 51 65 41 40 34 49 35 49 33 31 25 23 15 13 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2214,378,o),
(2182,346,qs),
(2145,308,ls),
(2110,273,o),
(2069,240,qs),
(1928,129,o),
(1679,129,qs),
(1469,129,ls),
(1377,129,o),
(1377,264,qs),
(1377,682,ls),
(1377,708,o),
(1421,745,o),
(1462,745,qs),
(1712,745,ls),
(1752,745,o),
(1798,715,qs),
(1820,700,o),
(1860,652,o),
(1887,589,o),
(1905,589,qs),
(1936,589,o),
(1936,645,q),
(1927,803,l),
(1936,964,l),
(1936,1020,o),
(1905,1020,qs),
(1893,1020,o),
(1879,1004,o),
(1860,957,o),
(1840,933,qs),
(1782,863,o),
(1712,863,qs),
(1463,863,ls),
(1377,863,o),
(1377,916,qs),
(1377,1342,ls),
(1377,1385,o),
(1416,1431,o),
(1469,1431,qs),
(1741,1431,ls),
(1873,1431,o),
(1972,1363,qs),
(2015,1333,o),
(2083,1258,o),
(2134,1193,o),
(2153,1193,qs),
(2174,1193,o),
(2174,1222,qs),
(2174,1236,o),
(2164,1272,qs),
(2127,1396,ls),
(2101,1483,o),
(2092,1561,q),
(1438,1561,ls),
(1321,1561,o),
(1217,1569,qs),
(1178,1572,o),
(1049,1592,o),
(954,1592,qs),
(568,1592,o),
(332,1350,qs),
(104,1116,o),
(104,744,qs),
(104,400,o),
(325,189,qs),
(547,-23,o),
(917,-23,qs),
(1003,-23,o),
(1143,-8,qs),
(1217,0,o),
(1277,0,qs),
(2111,0,l),
(2165,158,o),
(2232,272,qs),
(2270,336,o),
(2270,384,o),
(2246,384,q),
(2240,383,o)
);
},
{
closed = 1;
nodes = (
(1097,122,o),
(1031,122,qs),
(853,122,o),
(696,214,qs),
(528,311,o),
(432,480,qs),
(325,667,o),
(325,906,qs),
(325,1149,o),
(474,1302,qs),
(544,1373,o),
(732,1450,o),
(997,1450,o),
(1141,1376,q),
(1141,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
92 90 81 80 72 69 65 62 58 56 52 50 46 43 39 36 32 30 24 22 19 17 11 9 7 5 1 0 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 90 values pushed */
79 1 5 6 93 1 11 0 2 33 0 5 6 8 6 5 8 53 0 0 9 11 9 0 11 53 0 7 0 10 9 7 10 1 0 41 12 1 6 6 3 1 0 39 0 3 3 12 34 12 1 6 6 4 1 0 39 0 4 4 12 34 0 9 9 8 1 0 39 0 8 8 15 34 13 1 11 11 1 1 0 39 2 1 1 1 13 1 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2290;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,894,qs),
(189,820,o),
(100,624,o),
(100,379,o),
(154,266,qs),
(183,206,o),
(273,100,o),
(401,22,o),
(570,-24,o),
(746,-24,o),
(810,-10,qs),
(1000,32,o),
(1122,164,q),
(1203,76,o),
(1430,-24,o),
(1689,-24,o),
(1906,67,o),
(1975,158,qs),
(2014,209,o),
(2014,250,qs),
(2014,262,o),
(1986,290,o),
(1955,290,o),
(1933,270,o),
(1897,218,o),
(1864,193,qs),
(1758,113,o),
(1633,113,qs),
(1500,113,o),
(1397,194,qs),
(1287,280,o),
(1252,432,q),
(1286,441,l),
(1547,505,ls),
(1732,551,o),
(1982,642,qs),
(2015,654,o),
(2031,687,o),
(2031,737,o),
(1988,810,qs),
(1931,907,o),
(1841,970,qs),
(1720,1053,o),
(1555,1053,qs),
(1281,1053,o),
(1115,860,q),
(954,1053,o),
(673,1053,qs),
(433,1053,o)
);
},
{
closed = 1;
nodes = (
(427,840,qs),
(501,930,o),
(617,930,qs),
(763,930,o),
(870,800,qs),
(922,735,o),
(988,545,o),
(988,271,o),
(904,180,qs),
(825,95,o),
(712,95,qs),
(565,95,o),
(459,235,qs),
(409,301,o),
(349,485,o),
(349,579,qs),
(349,746,o)
);
},
{
closed = 1;
nodes = (
(1238,546,qs),
(1238,563,ls),
(1238,662,o),
(1261,732,qs),
(1326,929,o),
(1527,929,qs),
(1633,929,o),
(1712,842,qs),
(1745,807,o),
(1780,729,o),
(1780,684,o),
(1759,676,qs),
(1555,605,o),
(1239,527,q),
(1238,537,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 75 73 63 61 55 53 39 38 33 32 26 25 21 19 5 3 0 48 1 48 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2106;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (103,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (509,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
90 88 1 1 115 114 106 105 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
102 1 16 17 1 33 0 19 18 19 55 0 18 8 18 55 21 1 16 14 1 11 0 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
102 1 16 17 1 33 0 19 18 19 55 0 18 8 18 55 0 13 11 0 11 13 0 53 21 1 16 14 1 11 13 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1618;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (201,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 78 77 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 45 0 10 10 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 10 10 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 10 10 12 34 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1149;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (103,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (547,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
90 88 1 1 115 113 108 107 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
102 1 16 17 1 33 21 1 16 14 1 11 0 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 34 0 18 18 19 1 2 39 0 19 19 17 19 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 88 values pushed */
102 1 16 17 1 33 0 13 11 0 11 13 0 53 21 1 16 14 1 11 13 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 34 0 18 18 19 1 2 39 0 19 19 17 19 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1618;
}
);
note = Rcommaaccent;
unicode = 342;
},
{
glyphname = rcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (312,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 79 77 72 71 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 45 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1149;
}
);
note = rcommaaccent;
unicode = 343;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (103,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (389,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
90 88 1 1 121 119 115 113 107 105 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 23 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
122 117 2 18 19 102 1 16 17 2 33 20 1 19 18 19 55 0 18 8 18 55 22 1 16 14 1 11 0 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 21 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
122 117 2 18 19 102 1 16 17 2 33 20 1 19 18 19 55 0 18 8 18 55 0 13 11 0 11 13 0 53 22 1 16 14 1 11 13 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 21 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1618;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (81,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 79 77 71 69 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 3 11 10 3 53 0 6 7 1 7 6 45 0 11 11 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 3 11 10 3 53 0 6 7 1 7 6 1 53 0 11 11 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 5 11 10 5 53 0 6 7 1 7 6 1 53 0 11 11 12 34 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1149;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (153,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (376,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 78 77 69 68 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 7 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (140,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (303,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 75 74 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (153,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (256,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
68 67 2 1 82 80 73 72 67 86 68 86 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 7 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (140,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (183,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 82 81 76 74 67 66 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1213,1222,o),
(1184,1343,qs),
(1166,1418,o),
(1161,1564,qs),
(1159,1616,o),
(1119,1616,qs),
(1102,1616,o),
(1070,1574,qs),
(1053,1551,o),
(1043,1544,qs),
(1037,1539,o),
(1028,1537,o),
(1023,1537,o),
(1002,1546,qs),
(890,1592,o),
(717,1592,qs),
(454,1592,o),
(306,1455,qs),
(177,1336,o),
(177,1159,qs),
(177,996,o),
(301,878,qs),
(437,748,o),
(705,687,qs),
(925,636,o),
(1018,537,qs),
(1087,463,o),
(1087,354,qs),
(1087,116,o),
(736,116,qs),
(557,116,o),
(412,229,qs),
(254,353,o),
(233,543,qs),
(224,603,o),
(195,603,qs),
(153,603,o),
(153,481,qs),
(153,127,l),
(252,80,ls),
(303,56,o),
(489,-9,o),
(647,-20,q),
(599,-251,l),
(648,-232,o),
(719,-232,qs),
(764,-232,o),
(831,-291,o),
(831,-381,o),
(803,-420,qs),
(786,-443,o),
(750,-443,qs),
(663,-443,o),
(606,-388,qs),
(569,-352,o),
(526,-352,qs),
(502,-352,o),
(472,-389,o),
(472,-440,o),
(498,-462,qs),
(570,-521,o),
(704,-521,qs),
(805,-521,o),
(892,-456,qs),
(930,-427,o),
(976,-352,o),
(976,-277,o),
(956,-248,qs),
(891,-152,o),
(736,-152,qs),
(720,-152,l),
(752,-23,l),
(1011,-21,o),
(1160,102,qs),
(1307,225,o),
(1307,432,qs),
(1307,613,o),
(1178,730,qs),
(1111,792,o),
(894,891,o),
(537,984,o),
(456,1069,qs),
(390,1138,o),
(390,1244,qs),
(390,1328,o),
(459,1382,qs),
(539,1446,o),
(689,1446,qs),
(850,1446,o),
(958,1389,qs),
(1014,1359,o),
(1104,1266,o),
(1150,1171,o),
(1169,1143,o),
(1183,1143,qs),
(1213,1143,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 90 88 83 82 80 78 66 64 60 58 53 52 50 48 44 42 40 38 34 32 26 24 23 22 8 6 0 95 1 95 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 13 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 96 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 13 13 18 34 0 1 1 11 1 0 39 0 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(953,1026,qs),
(934,1008,ls),
(925,1000,o),
(900,1000,o),
(878,1008,qs),
(763,1053,o),
(615,1053,qs),
(403,1053,o),
(276,955,qs),
(166,869,o),
(166,759,qs),
(166,641,o),
(255,560,qs),
(304,516,o),
(467,440,o),
(754,368,o),
(826,324,qs),
(862,302,o),
(893,257,o),
(893,189,o),
(861,135,o),
(780,94,o),
(668,94,qs),
(503,94,o),
(373,164,qs),
(312,196,o),
(227,283,o),
(195,373,o),
(170,373,qs),
(156,373,o),
(140,356,o),
(140,345,qs),
(140,95,l),
(168,74,o),
(218,55,qs),
(381,-8,o),
(574,-21,q),
(526,-251,l),
(575,-232,o),
(646,-232,qs),
(691,-232,o),
(758,-291,o),
(758,-381,o),
(730,-420,qs),
(713,-443,o),
(677,-443,qs),
(590,-443,o),
(532,-388,qs),
(496,-352,o),
(453,-352,qs),
(429,-352,o),
(399,-389,o),
(399,-440,o),
(425,-462,qs),
(497,-521,o),
(631,-521,qs),
(732,-521,o),
(818,-456,qs),
(857,-427,o),
(903,-352,o),
(903,-277,o),
(883,-248,qs),
(818,-152,o),
(663,-152,qs),
(647,-152,l),
(679,-23,l),
(920,-15,o),
(1032,92,qs),
(1119,175,o),
(1119,292,qs),
(1119,422,o),
(1018,500,qs),
(966,540,o),
(798,604,o),
(508,673,o),
(447,715,qs),
(415,737,o),
(391,788,o),
(391,868,o),
(498,934,o),
(610,934,qs),
(849,934,o),
(975,758,q),
(996,716,o),
(1019,716,qs),
(1047,716,o),
(1047,744,qs),
(1047,759,o),
(1031,895,o),
(1031,1010,qs),
(1031,1053,o),
(998,1053,qs),
(981,1053,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 89 88 86 84 70 68 64 62 56 55 53 51 47 45 43 41 37 35 29 27 26 25 12 10 8 6 0 92 1 92 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 99 values pushed */
59 1 11 10 54 1 6 8 2 33 0 13 0 2 0 13 2 53 0 10 1 11 1 10 11 53 0 6 8 7 8 6 7 53 0 4 0 8 6 4 8 1 0 41 0 2 2 0 1 0 39 12 14 2 0 0 15 34 0 1 1 0 1 0 39 12 14 2 0 0 15 34 0 11 11 3 1 2 39 9 1 3 3 13 34 0 7 7 5 1 0 39 0 5 5 17 5 35 13
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = Scaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (153,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (256,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 84 82 78 76 70 68 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 7 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (140,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (183,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 76 74 68 66 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (537,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 96 94 89 88 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
4 17 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
4 17 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Tcommaaccent;
unicode = 354;
},
{
glyphname = tcommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (52,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (291,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 55 53 48 47 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = tcommaaccent;
unicode = 355;
},
{
glyphname = Tcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (331,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 102 100 96 94 88 86 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
103 98 2 15 16 1 33 17 1 16 15 16 55 0 15 1 15 55 4 18 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
103 98 2 15 16 1 33 17 1 16 15 16 55 0 15 1 15 55 4 18 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (52,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,5);
ref = t;
},
{
alignment = -1;
pos = (885,0);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 63 62 46 45 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
0 6 8 0 8 6 0 53 0 3 1 2 1 3 2 53 0 7 7 8 1 0 39 0 8 8 12 34 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1354;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1194,948,qs),
(1181,974,o),
(1120,974,qs),
(908,974,l),
(908,1420,l),
(1262,1420,o),
(1330,1300,qs),
(1341,1280,o),
(1355,1231,o),
(1366,1168,o),
(1392,1168,qs),
(1417,1168,o),
(1431,1238,qs),
(1442,1289,o),
(1469,1382,qs),
(1484,1433,o),
(1520,1540,o),
(1549,1609,o),
(1532,1619,qs),
(1526,1623,o),
(1513,1625,o),
(1497,1625,o),
(1473,1605,o),
(1409,1561,o),
(1346,1561,qs),
(334,1561,ls),
(305,1561,o),
(242,1564,o),
(226,1583,qs),
(194,1625,o),
(174,1625,qs),
(162,1625,o),
(142,1604,o),
(124,1496,o),
(100,1428,qs),
(81,1376,ls),
(72,1351,o),
(58,1299,o),
(49,1241,o),
(49,1171,o),
(73,1171,qs),
(86,1171,o),
(135,1227,o),
(207,1300,o),
(301,1371,o),
(375,1389,o),
(388,1393,qs),
(475,1421,o),
(673,1421,q),
(673,974,l),
(395,974,ls),
(296,974,o),
(296,924,qs),
(296,867,o),
(392,867,qs),
(673,867,l),
(673,336,ls),
(673,203,o),
(652,147,qs),
(640,115,o),
(596,83,o),
(542,83,o),
(510,88,qs),
(500,89,o),
(479,92,o),
(447,92,o),
(427,61,o),
(427,25,o),
(452,7,qs),
(465,-2,o),
(504,-15,o),
(585,-15,o),
(672,-8,qs),
(730,-2,ls),
(758,0,o),
(791,0,qs),
(824,0,o),
(852,-2,qs),
(910,-8,ls),
(939,-10,o),
(1006,-15,o),
(1097,-15,o),
(1129,7,qs),
(1142,16,o),
(1154,38,o),
(1154,61,o),
(1134,92,o),
(1103,92,o),
(1077,88,o),
(1048,84,qs),
(1036,83,o),
(985,83,o),
(941,116,o),
(908,204,o),
(908,336,qs),
(908,867,l),
(1101,867,ls),
(1200,867,o),
(1200,917,qs),
(1200,937,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
97 95 94 93 89 87 78 77 75 71 69 67 59 57 51 50 49 47 45 43 38 37 34 33 28 27 24 22 20 19 18 17 12 11 8 7 3 1 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
16 1 12 11 10 11 12 45 18 1 10 9 1 0 1 10 0 1 0 41 15 1 13 13 18 34 17 1 11 11 14 1 0 39 0 14 14 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
16 1 12 11 10 11 12 10 53 18 1 10 9 1 0 1 10 0 1 0 41 15 1 13 13 18 34 17 1 11 11 14 1 0 39 0 14 14 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(872,671,o),
(805,671,qs),
(495,671,l),
(495,899,l),
(811,899,ls),
(932,899,o),
(932,971,qs),
(932,1038,o),
(803,1038,qs),
(718,1038,o),
(598,1034,qs),
(495,1031,l),
(495,1396,ls),
(495,1502,o),
(391,1502,o),
(374,1396,qs),
(349,1227,o),
(300,1150,qs),
(273,1106,o),
(194,1050,o),
(103,1029,o),
(52,990,o),
(52,964,qs),
(52,899,o),
(157,899,qs),
(257,899,l),
(257,671,l),
(146,671,ls),
(50,671,o),
(50,628,qs),
(50,578,o),
(143,578,qs),
(257,578,l),
(257,289,ls),
(257,202,o),
(281,142,qs),
(347,-24,o),
(595,-24,qs),
(794,-24,o),
(913,136,qs),
(951,187,o),
(951,228,qs),
(951,241,o),
(931,268,o),
(916,268,qs),
(869,268,o),
(836,224,qs),
(760,123,o),
(661,123,qs),
(620,123,o),
(588,140,qs),
(495,188,o),
(495,339,qs),
(495,578,l),
(806,578,ls),
(901,578,o),
(901,622,qs),
(901,640,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
56 54 53 51 49 45 43 42 33 31 30 28 26 24 20 18 13 11 9 7 3 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (438,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
102 101 2 1 126 124 122 120 116 115 113 111 108 106 101 128 102 128 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 29 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 92 values pushed */
49 1 9 2 3 1 17 9 2 33 25 28 2 21 0 23 22 21 23 1 0 41 0 26 24 1 22 4 26 22 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 27 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 27 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (209,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
105 104 102 100 96 94 90 89 87 85 82 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (409,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
101 101 2 1 101 114 101 112 108 105 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 80 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 24 1 22 4 21 22 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (220,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
82 81 80 79 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (407,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 118 116 114 112 108 106 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
115 101 2 22 21 49 1 9 2 3 1 17 9 3 33 23 1 21 22 22 21 43 0 24 24 22 1 0 39 0 22 22 14 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
115 101 2 22 21 49 1 9 2 3 1 17 9 3 33 23 1 21 22 21 55 0 24 24 22 1 0 39 0 22 22 14 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (148,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
98 96 93 91 87 85 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (588,0);
ref = ring.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
102 101 2 1 127 126 119 118 111 109 101 116 102 116 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 27 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 92 values pushed */
49 1 9 2 3 1 17 9 2 33 0 22 0 24 23 22 24 1 0 41 26 1 21 21 23 1 0 39 0 23 23 18 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (330,0);
ref = ring;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
80 79 101 100 97 96 88 86 79 94 80 94 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (642,0);
ref = hungarumlaut.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
120 119 102 101 2 1 128 127 119 136 120 136 110 109 101 118 102 118 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 28 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 87 values pushed */
112 1 22 21 49 1 9 2 3 1 17 9 3 33 27 23 26 3 21 22 21 55 24 1 22 4 22 55 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (60,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (14,0);
ref = hungarumlaut;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
96 95 80 79 102 101 95 110 96 110 86 85 79 94 80 94 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1310,-282,qs),
(1310,-332,o),
(1326,-367,qs),
(1371,-465,o),
(1507,-465,qs),
(1728,-463,ls),
(1743,-463,o),
(1762,-446,o),
(1762,-435,qs),
(1762,-410,o),
(1721,-399,q),
(1655,-387,o),
(1608,-365,qs),
(1475,-302,o),
(1475,-192,qs),
(1475,-92,o),
(1528,0,q),
(1541,0,o),
(1560,-2,qs),
(1600,-4,ls),
(1620,-6,o),
(1661,-9,o),
(1728,-9,o),
(1756,14,qs),
(1767,23,o),
(1776,46,o),
(1776,68,o),
(1755,91,o),
(1730,91,o),
(1701,79,o),
(1644,79,o),
(1603,104,o),
(1577,182,o),
(1577,355,qs),
(1574,1245,ls),
(1574,1303,o),
(1578,1346,qs),
(1590,1478,o),
(1686,1478,q),
(1752,1472,l),
(1789,1472,o),
(1789,1517,qs),
(1789,1536,o),
(1770,1554,qs),
(1759,1563,o),
(1723,1576,o),
(1648,1576,o),
(1567,1568,qs),
(1514,1564,ls),
(1488,1561,o),
(1425,1561,o),
(1399,1564,qs),
(1346,1568,ls),
(1319,1571,o),
(1257,1576,o),
(1169,1576,o),
(1143,1554,qs),
(1132,1544,o),
(1123,1523,o),
(1123,1499,o),
(1143,1472,o),
(1161,1472,q),
(1226,1478,l),
(1261,1478,o),
(1305,1452,o),
(1338,1375,o),
(1338,1245,qs),
(1338,277,l),
(1161,126,o),
(740,126,o),
(627,228,qs),
(507,337,o),
(507,538,qs),
(507,1245,ls),
(507,1377,o),
(527,1424,qs),
(550,1478,o),
(619,1478,q),
(685,1472,l),
(702,1472,o),
(722,1499,o),
(722,1536,o),
(702,1554,qs),
(692,1563,o),
(656,1576,o),
(580,1576,o),
(499,1568,qs),
(446,1564,ls),
(420,1561,o),
(389,1561,qs),
(358,1561,o),
(332,1564,qs),
(278,1568,ls),
(251,1571,o),
(189,1576,o),
(100,1576,o),
(76,1554,qs),
(65,1544,o),
(56,1523,o),
(56,1499,o),
(76,1472,o),
(94,1472,q),
(159,1478,l),
(194,1478,o),
(238,1452,o),
(272,1374,o),
(272,1245,qs),
(272,557,ls),
(272,283,o),
(436,131,qs),
(601,-23,o),
(908,-23,qs),
(1138,-23,o),
(1339,115,q),
(1346,10,o),
(1393,-3,q),
(1310,-129,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
112 109 99 98 97 96 94 93 88 87 86 85 78 77 76 75 70 69 66 65 61 60 55 54 53 52 47 46 39 38 37 36 31 30 27 25 21 20 15 14 13 12 5 3 22 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 0 21 0 21 56 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 16 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 16 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 0 21 0 21 56 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 16 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1014,6,q),
(920,-119,o),
(920,-281,qs),
(920,-331,o),
(936,-366,qs),
(980,-463,o),
(1117,-463,qs),
(1337,-461,ls),
(1352,-461,o),
(1371,-445,o),
(1371,-434,qs),
(1371,-423,o),
(1355,-405,o),
(1265,-385,o),
(1218,-364,qs),
(1086,-302,o),
(1086,-191,qs),
(1086,-95,o),
(1141,0,q),
(1159,0,ls),
(1171,0,o),
(1209,-3,o),
(1253,-6,o),
(1297,-9,o),
(1365,-9,o),
(1392,14,qs),
(1404,23,o),
(1413,46,o),
(1413,67,o),
(1392,95,o),
(1367,95,o),
(1347,88,o),
(1283,88,o),
(1241,109,o),
(1215,181,o),
(1215,354,qs),
(1215,876,ls),
(1215,970,o),
(1196,1006,qs),
(1185,1029,o),
(1143,1029,q),
(1033,1023,ls),
(1022,1023,o),
(983,1026,o),
(960,1028,qs),
(916,1030,ls),
(894,1032,o),
(826,1032,o),
(800,1010,qs),
(789,1000,o),
(780,977,o),
(780,956,o),
(800,928,o),
(824,928,o),
(846,935,o),
(909,935,o),
(950,916,o),
(977,845,o),
(977,675,qs),
(977,272,l),
(845,138,o),
(713,138,qs),
(665,138,o),
(625,152,qs),
(496,197,o),
(496,370,qs),
(496,857,ls),
(496,905,o),
(492,938,qs),
(483,1029,o),
(424,1029,q),
(313,1023,ls),
(302,1023,o),
(263,1026,o),
(219,1029,o),
(175,1032,o),
(108,1032,o),
(80,1010,qs),
(69,1000,o),
(60,977,o),
(60,956,o),
(81,928,o),
(105,928,o),
(127,935,o),
(190,935,o),
(231,916,o),
(258,844,o),
(258,676,qs),
(258,330,ls),
(258,176,o),
(372,75,qs),
(485,-24,o),
(658,-24,qs),
(837,-24,o),
(978,110,q),
(984,30,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
89 86 76 74 73 70 65 64 63 62 55 52 50 49 48 47 42 41 40 39 34 32 25 22 21 18 13 12 11 10 3 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
35 1 5 1 0 1 11 5 94 1 14 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 13 1 0 0 13 34 0 14 14 13 34 12 1 11 11 0 1 0 39 13 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (751,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
131 130 2 1 145 143 136 135 130 149 131 149 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
133 1 24 26 125 47 2 8 1 2 33 0 26 24 26 55 25 28 2 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 27 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
133 1 24 26 125 47 2 8 1 2 33 0 26 24 26 55 25 28 2 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 27 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2389;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (588,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
1 1 131 130 125 123 116 115 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 26 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
134 1 22 23 53 10 2 9 0 2 33 24 1 22 23 4 23 22 4 53 16 1 9 0 1 0 9 1 53 0 23 23 18 34 25 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
134 1 22 23 53 10 2 9 0 2 33 24 1 22 23 4 23 22 4 53 16 1 9 0 1 0 9 1 53 0 23 23 18 34 25 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2047;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (330,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
85 84 3 1 99 97 90 89 84 103 85 103 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
87 1 19 21 66 44 5 3 1 0 2 33 20 23 2 19 21 11 21 19 11 53 0 21 21 3 1 0 39 6 5 4 3 3 3 13 34 15 14 13 12 10 9 22 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (303,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
1 1 93 92 87 85 78 77 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
96 1 17 18 55 28 27 3 2 0 2 33 19 1 17 18 6 18 17 6 53 0 2 0 3 0 2 3 53 0 18 18 18 34 20 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1349;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (237,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
3 1 110 109 102 101 94 93 86 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
66 44 5 3 1 0 1 33 22 1 20 21 1 19 11 20 19 1 0 41 15 14 13 12 10 9 23 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (112,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (447,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 59 58 50 49 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 11 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
0 9 8 9 55 0 8 3 8 55 0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 10 1 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1537;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (81,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (277,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 64 63 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 0 2 3 0 53 8 1 0 6 2 0 6 51 0 7 7 12 34 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 0 2 3 0 53 8 1 0 6 2 0 6 51 0 7 7 12 34 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1194;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (112,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (494,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
49 48 2 1 58 56 48 64 49 64 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 9 11 1 8 3 9 8 1 0 41 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 10 1 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1537;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (81,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (306,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
55 54 2 1 64 62 54 70 55 70 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 10 1 7 4 8 7 1 0 41 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 10 1 7 4 8 7 1 0 41 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1194;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (112,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (327,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 65 63 59 57 51 49 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 72 values pushed */
66 61 2 8 9 1 33 10 1 9 8 9 55 0 8 3 8 55 0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 11 1 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1537;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (81,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (157,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 65 63 57 55 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
72 67 2 7 8 1 33 0 7 8 4 8 7 4 53 0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 8 12 34 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
72 67 2 7 8 1 33 0 7 8 4 8 7 4 53 0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 8 12 34 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1194;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(994,991,qs),
(994,1038,o),
(826,1038,o),
(746,1035,q),
(758,1172,ls),
(764,1239,o),
(787,1474,o),
(837,1568,qs),
(861,1613,o),
(919,1659,o),
(991,1659,o),
(1029,1609,qs),
(1049,1583,o),
(1084,1503,o),
(1105,1420,o),
(1120,1404,o),
(1133,1404,qs),
(1161,1404,o),
(1165,1440,qs),
(1189,1730,l),
(1077,1757,o),
(894,1757,o),
(816,1724,qs),
(560,1615,o),
(518,1140,qs),
(508,1032,l),
(349,1039,o),
(347,1039,qs),
(250,1039,o),
(250,939,o),
(354,939,qs),
(398,938,o),
(501,943,q),
(435,191,ls),
(418,28,o),
(365,-70,qs),
(341,-115,o),
(284,-161,o),
(213,-161,o),
(176,-112,qs),
(156,-87,o),
(120,-7,o),
(99,77,o),
(84,93,o),
(70,93,qs),
(45,93,o),
(41,56,qs),
(16,-234,l),
(122,-260,o),
(219,-260,qs),
(411,-260,o),
(528,-120,qs),
(659,37,o),
(686,357,qs),
(737,942,l),
(851,939,o),
(870,939,qs),
(994,939,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 0 55 53 47 46 41 39 36 35 31 28 27 24 19 18 13 11 8 6 0 57 2 57 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
37 1 8 6 9 1 1 3 2 33 0 7 8 5 8 7 5 53 0 2 0 3 0 2 3 53 0 3 0 1 3 1 1 0 40 0 8 8 6 1 0 39 0 6 6 14 34 4 10 2 0 0 5 1 0 39 9 1 5 5 15 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1179;
}
);
note = florin;
unicode = 402;
},
{
glyphname = AEacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (688,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
133 132 1 1 149 148 140 139 132 137 133 137 1 131 1 131 128 127 126 125 118 116 110 109 108 107 102 101 99 96 92 91 84 81 77 74 69 67 60 58 54 51 47 44 40 38 32 30 27 26 21 20 19 18 11 10 9 8 5 4 3 2 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 139 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 27 23 2 17 17 13 17 35 17
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 122 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 27 23 17 16 1 5 0 0 13 0 35 15
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 139 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 27 23 2 17 17 13 17 35 17
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 151 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 14 20 15 14 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 17 1 0 39 27 23 2 17 17 13 17 35 19
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2079;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = aeacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (175,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (28,0);
ref = ae;
},
{
alignment = -1;
pos = (732,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
107 106 96 95 92 91 81 79 71 70 65 64 61 60 49 47 43 41 36 35 32 30 24 23 19 17 13 11 4 3 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 15 34 0 3 3 4 1 0 39 7 6 2 4 4 15 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2012;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = Scommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (153,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (462,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 78 76 71 70 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = Scommaaccent;
unicode = 536;
},
{
glyphname = scommaaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (140,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (389,5);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 76 74 69 68 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = scommaaccent;
unicode = 537;
},
{
glyphname = dotlessj;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,-516,o),
(129,-516,qs),
(340,-516,o),
(457,-374,qs),
(587,-215,o),
(587,104,qs),
(587,897,ls),
(587,982,o),
(572,1009,qs),
(563,1025,o),
(525,1025,q),
(356,1013,l),
(317,1013,o),
(268,1019,qs),
(251,1021,o),
(223,1025,o),
(174,1025,o),
(156,1006,qs),
(149,998,o),
(143,980,o),
(143,953,o),
(183,933,o),
(287,904,o),
(306,878,qs),
(349,814,o),
(349,636,qs),
(349,104,ls),
(349,-191,o),
(300,-302,qs),
(276,-354,o),
(213,-388,o),
(127,-388,o),
(78,-349,qs),
(46,-323,o),
(6,-240,qs),
(-19,-194,o),
(-47,-194,qs),
(-74,-194,o),
(-74,-226,qs),
(-74,-488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
38 36 29 26 23 22 8 7 3 1 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
39 1 4 1 1 33 0 0 2 1 2 0 1 53 3 1 2 2 15 34 0 1 1 4 1 2 39 0 4 4 17 4 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = dotlessj;
unicode = 567;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(710,1229,ls),
(748,1204,o),
(768,1207,q),
(801,1207,o),
(797,1247,qs),
(795,1266,o),
(781,1280,q),
(560,1530,ls),
(491,1611,o),
(452,1611,qs),
(435,1611,o),
(397,1600,o),
(338,1530,qs),
(116,1280,ls),
(98,1258,o),
(98,1236,qs),
(98,1227,o),
(113,1207,o),
(153,1207,o),
(187,1229,qs),
(447,1397,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
17 16 11 9 2 1 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
20 1 0 1 1 33 2 1 0 1 0 56 0 1 1 18 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(780,1523,o),
(783,1550,q),
(783,1580,o),
(746,1577,qs),
(723,1575,o),
(696,1558,qs),
(438,1392,l),
(183,1558,ls),
(151,1579,o),
(128,1579,qs),
(96,1579,o),
(96,1545,qs),
(96,1530,o),
(114,1508,qs),
(331,1262,ls),
(352,1237,o),
(404,1183,o),
(442,1183,qs),
(480,1183,o),
(549,1262,qs),
(766,1508,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
11 9 3 1 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
18 13 2 0 1 1 33 0 0 1 0 56 0 1 1 12 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,1414,qs),
(261,1211,o),
(507,1211,qs),
(824,1211,o),
(927,1560,q),
(911,1564,ls),
(824,1592,o),
(776,1592,qs),
(740,1592,o),
(709,1580,q),
(700,1518,o),
(682,1468,qs),
(622,1308,o),
(507,1308,qs),
(469,1308,o),
(436,1328,qs),
(333,1388,o),
(305,1580,q),
(267,1592,o),
(178,1592,o),
(88,1559,q),
(112,1478,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 17 14 12 8 6 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
16 0 2 1 0 1 33 0 1 0 3 1 3 1 2 40 2 1 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,1245,qs),
(459,1294,o),
(459,1350,qs),
(459,1416,o),
(418,1465,qs),
(372,1522,o),
(296,1522,qs),
(222,1522,o),
(172,1471,qs),
(150,1448,o),
(125,1387,o),
(125,1294,o),
(165,1246,qs),
(185,1223,o),
(248,1193,o),
(289,1193,qs),
(365,1193,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 10 8 0 16 1 16 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,1266,qs),
(557,1327,o),
(557,1422,qs),
(557,1517,o),
(490,1580,qs),
(423,1643,o),
(326,1643,qs),
(229,1643,o),
(163,1580,qs),
(96,1517,o),
(96,1422,qs),
(96,1327,o),
(163,1266,qs),
(229,1205,o),
(326,1205,qs),
(423,1205,o)
);
},
{
closed = 1;
nodes = (
(213,1422,qs),
(213,1470,o),
(242,1503,qs),
(257,1519,o),
(298,1538,o),
(376,1538,o),
(439,1472,o),
(439,1366,o),
(373,1306,o),
(302,1306,o),
(261,1325,o),
(213,1376,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 22 21 18 17 9 7 0 15 1 15 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 2 4 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 18 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(439,-463,qs),
(659,-461,ls),
(674,-461,o),
(692,-445,o),
(692,-434,qs),
(692,-409,o),
(652,-398,q),
(527,-373,o),
(464,-314,qs),
(435,-286,o),
(407,-223,o),
(407,-144,o),
(419,-101,qs),
(456,30,o),
(523,74,q),
(435,102,l),
(351,46,o),
(299,-52,qs),
(273,-102,o),
(242,-218,o),
(242,-331,o),
(258,-366,qs),
(302,-463,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
22 19 1 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
7 6 2 0 31 0 0 0 46 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
7 6 2 0 31 0 0 0 17 0 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
7 6 2 0 31 0 0 0 46 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1229;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(813,1523,o),
(762,1523,o),
(732,1481,qs),
(688,1417,o),
(641,1417,qs),
(617,1417,o),
(560,1444,qs),
(506,1472,ls),
(476,1488,o),
(394,1525,o),
(335,1525,qs),
(255,1525,o),
(184,1449,qs),
(98,1358,o),
(98,1285,qs),
(98,1251,o),
(149,1251,o),
(178,1292,qs),
(223,1357,o),
(267,1357,qs),
(293,1357,o),
(348,1330,qs),
(395,1307,ls),
(502,1248,o),
(577,1248,qs),
(678,1248,o),
(760,1365,qs),
(813,1440,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
26 25 23 21 17 15 11 10 8 6 3 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 4 1 0 4 1 0 38 5 1 3 0 1 0 3 1 1 0 41 0 4 4 0 1 0 39 2 1 0 4 0 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 898;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1074,1552,qs),
(1012,1542,o),
(932,1441,qs),
(773,1244,ls),
(755,1222,o),
(755,1208,qs),
(755,1198,o),
(770,1178,o),
(804,1178,o),
(832,1194,qs),
(1048,1315,ls),
(1185,1387,o),
(1185,1470,qs),
(1185,1556,o),
(1115,1556,qs),
(1094,1556,o)
);
},
{
closed = 1;
nodes = (
(562,1531,qs),
(529,1513,o),
(472,1441,qs),
(314,1244,ls),
(295,1221,o),
(296,1208,qs),
(296,1198,o),
(311,1178,o),
(342,1178,o),
(372,1194,qs),
(588,1315,ls),
(726,1387,o),
(726,1470,qs),
(726,1556,o),
(655,1556,qs),
(608,1556,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
17 16 1 0 23 22 16 31 17 31 7 6 0 15 1 15 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 22 values pushed */
25 1 1 0 1 33 3 1 1 0 1 56 5 2 4 3 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1288;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Delta;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,0,qs),
(1533,0,ls),
(1564,0,o),
(1594,29,o),
(1594,65,o),
(1585,80,q),
(866,1563,ls),
(851,1591,o),
(801,1591,o),
(785,1564,q),
(119,57,l),
(120,57,l),
(112,44,o),
(112,31,qs),
(112,0,o)
);
},
{
closed = 1;
nodes = (
(789,1285,l),
(1327,130,l),
(291,130,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 15 15 17 15 17 14 11 6 5 3 2 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
16 1 3 1 1 33 0 0 3 2 3 0 2 53 0 1 1 12 34 4 1 3 3 2 1 2 39 0 2 2 13 2 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1706;
}
);
note = Delta;
unicode = (916,8710);
},
{
glyphname = Omega;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(915,164,o),
(894,177,qs),
(758,257,o),
(659,419,qs),
(608,503,o),
(544,715,o),
(544,1001,o),
(580,1116,qs),
(682,1447,o),
(1028,1447,qs),
(1227,1447,o),
(1350,1318,qs),
(1414,1250,o),
(1491,1031,o),
(1491,753,o),
(1468,648,qs),
(1398,328,o),
(1166,177,qs),
(1146,164,o),
(1122,103,o),
(1122,73,qs),
(1122,8,o),
(1161,0,q),
(1848,0,l),
(1844,371,ls),
(1844,408,o),
(1798,408,qs),
(1775,408,o),
(1734,390,o),
(1732,379,qs),
(1700,195,l),
(1374,195,l),
(1513,316,o),
(1612,506,qs),
(1720,714,o),
(1720,895,qs),
(1720,1219,o),
(1528,1405,qs),
(1344,1584,o),
(1041,1584,qs),
(750,1584,o),
(544,1398,qs),
(316,1194,o),
(316,838,qs),
(316,635,o),
(426,450,qs),
(523,289,o),
(661,195,q),
(337,195,l),
(304,379,ls),
(302,390,o),
(263,408,o),
(240,408,qs),
(194,408,o),
(194,371,qs),
(194,0,l),
(900,0,l),
(941,9,o),
(941,69,qs),
(941,101,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
50 48 36 35 33 31 28 27 20 18 11 10 7 5 3 2 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 1 7 2 2 1 45 0 7 7 3 1 0 39 0 3 3 12 34 4 1 2 2 0 0 2 39 6 1 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
5 1 1 7 2 7 1 2 53 0 7 7 3 1 0 39 0 3 3 12 34 4 1 2 2 0 0 2 39 6 1 0 0 13 0 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2042;
}
);
note = Omega;
unicode = (937,8486);
},
{
glyphname = pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(611,12,qs),
(635,42,o),
(652,139,qs),
(810,1041,l),
(1188,1038,l),
(1095,370,ls),
(1084,276,o),
(1084,183,qs),
(1086,76,o),
(1211,-42,o),
(1337,-42,qs),
(1383,-42,o),
(1414,-26,qs),
(1432,-17,o),
(1456,14,o),
(1456,57,o),
(1448,72,qs),
(1424,112,o),
(1355,119,qs),
(1280,127,o),
(1280,208,qs),
(1280,234,o),
(1286,284,qs),
(1302,416,ls),
(1313,500,o),
(1384,1037,q),
(1446,1037,ls),
(1526,1037,o),
(1576,1050,qs),
(1702,1081,o),
(1702,1163,qs),
(1702,1212,o),
(1624,1212,qs),
(1586,1212,o),
(1505,1193,qs),
(1463,1183,o),
(1425,1183,qs),
(618,1187,ls),
(528,1187,o),
(454,1179,qs),
(408,1174,o),
(319,1156,o),
(249,1125,o),
(206,1080,o),
(206,1015,o),
(222,980,qs),
(231,961,o),
(262,931,o),
(320,931,o),
(362,958,qs),
(400,984,o),
(400,984,q),
(484,1039,o),
(636,1041,q),
(464,214,l),
(444,86,o),
(444,58,qs),
(444,-33,o),
(526,-33,qs),
(575,-33,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 55 54 49 47 33 31 27 25 23 20 11 10 6 5 0 59 1 59 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 0 1 2 0 53 4 1 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 13 0 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 0 1 2 0 53 4 1 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 16 0 35 3
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 4 55 0 2 1 0 1 2 0 53 0 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 13 0 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1874;
}
);
note = pi;
unicode = 960;
},
{
glyphname = uni1E02;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = B;
},
{
alignment = -1;
pos = (506,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
82 81 3 1 91 89 81 97 82 97 75 74 70 69 64 62 57 56 52 50 35 34 30 29 26 25 20 19 18 17 10 9 8 7 1 54 3 54 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 95 values pushed */
55 1 9 10 43 1 11 9 71 1 12 11 3 33 0 14 16 1 13 5 14 13 1 0 41 0 9 0 11 12 9 11 1 0 41 4 1 3 3 5 1 0 39 7 6 2 5 5 12 34 0 10 10 5 1 0 39 7 6 2 5 5 12 34 0 12 12 0 1 0 39 8 15 2 0 0 13 34 2 1 1 1 0 1 2 39 8 15 2 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1581;
}
);
note = uni1E02;
unicode = 7682;
},
{
glyphname = uni1E03;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = b;
},
{
alignment = -1;
pos = (554,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
66 65 2 1 75 73 65 81 66 81 61 59 53 51 46 45 42 40 34 32 26 25 24 22 19 18 1 49 2 49 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1365;
}
);
note = uni1E03;
unicode = 7683;
},
{
glyphname = uni1E0A;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (104,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (662,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
70 69 1 1 79 77 69 85 70 85 65 63 56 55 1 51 1 51 44 43 42 41 36 35 32 31 28 26 18 16 13 12 9 8 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
0 13 15 1 12 1 13 12 1 0 41 14 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1838;
}
);
note = uni1E0A;
unicode = 7690;
},
{
glyphname = uni1E0B;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (80,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (117,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
70 69 79 77 69 85 70 85 68 67 61 59 56 53 52 51 50 48 43 42 41 40 32 31 27 26 23 22 12 10 3 2 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1342;
}
);
note = uni1E0B;
unicode = 7691;
},
{
glyphname = uni1E1E;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (105,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = F;
},
{
alignment = -1;
pos = (448,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
91 90 3 1 100 98 90 106 91 106 84 81 75 72 68 66 62 60 56 53 49 46 42 40 35 33 31 29 24 23 22 21 14 13 12 11 6 5 1 89 3 89 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 86 values pushed */
0 8 9 11 9 8 11 53 0 16 18 1 15 6 16 15 1 0 41 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 14 3 2 2 2 0 1 0 39 1 17 2 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1411;
}
);
note = uni1E1E;
unicode = 7710;
},
{
glyphname = uni1E1F;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (123,505);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
76 75 2 1 85 83 75 91 76 91 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
30 1 12 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 0 13 15 1 12 7 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 11 10 2 3 1 1 0 1 0 39 14 1 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = uni1E1F;
unicode = 7711;
},
{
glyphname = uni1E40;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (59,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = M;
},
{
alignment = -1;
pos = (757,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
109 108 1 1 118 116 108 124 109 124 1 107 1 107 102 101 100 99 90 88 82 81 80 79 74 73 70 68 65 64 58 57 56 55 48 47 46 45 40 39 37 36 34 33 31 29 15 14 13 12 7 6 3 2 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
95 86 35 3 17 8 1 33 0 17 8 2 8 17 2 53 0 22 24 1 21 4 22 21 1 0 41 9 1 8 8 4 1 0 39 7 6 5 3 4 4 12 34 19 18 16 15 11 10 3 7 2 2 0 1 2 39 23 20 14 13 12 1 6 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2115;
}
);
note = uni1E40;
unicode = 7744;
},
{
glyphname = uni1E41;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (94,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = m;
},
{
alignment = -1;
pos = (846,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
128 127 2 1 137 135 127 143 128 143 123 122 121 119 116 115 114 113 108 106 100 99 98 97 93 90 82 81 80 79 72 70 64 63 62 61 58 55 47 46 45 44 36 35 30 28 24 23 21 20 8 7 6 5 1 126 2 126 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 22 2 12 3 109 32 2 1 12 2 33 0 24 26 1 23 3 24 23 1 0 41 18 1 12 12 3 1 0 39 6 5 4 3 3 3 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 25 5 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
27 22 2 12 3 109 32 2 1 12 2 33 0 24 26 1 23 5 24 23 1 0 41 4 1 3 3 15 34 18 1 12 12 5 1 0 39 6 1 5 5 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 25 5 0 0 13 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2278;
}
);
note = uni1E41;
unicode = 7745;
},
{
glyphname = uni1E56;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (125,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = P;
},
{
alignment = -1;
pos = (538,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
80 79 67 66 2 1 89 87 79 95 80 95 72 70 66 78 67 78 58 57 52 51 48 47 42 41 40 39 32 31 30 29 20 18 13 12 8 7 1 65 2 65 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
69 1 12 11 3 1 0 12 2 33 0 14 17 1 13 8 14 13 1 0 41 0 12 15 1 0 1 12 0 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 16 1 11 11 8 1 0 39 10 9 2 8 8 12 34 5 4 2 3 1 1 3 1 0 39 0 3 3 13 3 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1487;
}
);
note = uni1E56;
unicode = 7766;
},
{
glyphname = uni1E57;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = p;
},
{
alignment = -1;
pos = (415,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
77 76 1 1 86 84 76 92 77 92 72 70 63 62 1 58 1 58 54 50 45 44 43 42 37 35 28 27 22 21 20 19 18 17 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 4 13 12 1 0 41 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 4 13 12 1 0 41 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1361;
}
);
note = uni1E57;
unicode = 7767;
},
{
glyphname = uni1E60;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (153,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (423,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
68 67 2 1 77 75 67 83 68 83 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 7 9 8 1 0 41 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = uni1E60;
unicode = 7776;
},
{
glyphname = uni1E61;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (140,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (332,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
66 65 2 1 75 73 65 81 66 81 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = uni1E61;
unicode = 7777;
},
{
glyphname = uni1E6A;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (498,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
86 85 2 1 95 93 85 101 86 101 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
4 17 2 0 5 6 5 0 45 0 16 18 1 15 1 16 15 1 0 41 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
4 17 2 0 5 6 5 0 6 53 0 16 18 1 15 1 16 15 1 0 41 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = uni1E6A;
unicode = 7786;
},
{
glyphname = uni1E6B;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (52,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (72,296);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
45 44 2 1 54 52 44 60 45 60 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 6 8 43 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = uni1E6B;
unicode = 7787;
},
{
glyphname = Wgrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (871,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
2 1 141 140 133 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2389;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (708,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 1 117 116 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
53 10 2 9 0 1 33 0 22 4 22 55 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
53 10 2 9 0 1 33 0 22 4 22 55 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2047;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (871,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
2 1 141 140 132 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2389;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (708,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 1 124 123 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 22 1 0 39 0 22 22 12 34 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 22 1 0 39 0 22 22 12 34 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2047;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (658,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
2 1 156 155 148 147 140 139 132 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
125 47 2 8 1 1 33 0 8 1 0 1 8 0 53 27 1 25 26 1 24 3 25 24 1 0 41 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 28 2 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
125 47 2 8 1 1 33 0 8 1 0 1 8 0 53 27 1 25 26 1 24 3 25 24 1 0 41 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 28 2 0 0 16 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2389;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (545,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
1 1 140 139 132 131 124 123 116 115 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 25 1 23 24 1 22 4 23 22 1 0 41 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 24 1 22 22 23 1 0 39 25 1 23 23 12 34 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 25 1 23 24 1 22 4 23 22 1 0 41 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2047;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (450,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 95 94 87 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 22 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
66 44 5 3 1 0 1 33 0 20 19 20 55 0 19 11 19 55 15 14 13 12 10 9 21 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1539;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (423,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 79 78 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
55 28 27 3 2 0 1 33 0 17 6 17 55 0 2 0 3 0 2 3 53 18 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1349;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1298,549,ls),
(1333,549,o),
(1374,598,o),
(1374,669,o),
(1331,717,o),
(1296,717,qs),
(63,717,ls),
(28,717,o),
(-15,669,o),
(-15,598,o),
(26,549,o),
(61,549,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1359;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1640,549,ls),
(1675,549,o),
(1718,598,o),
(1718,669,o),
(1673,717,o),
(1638,717,qs),
(63,717,ls),
(28,717,o),
(-17,669,o),
(-17,598,o),
(25,549,o),
(60,549,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1701;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,977,qs),
(431,1014,o),
(431,1115,qs),
(431,1224,o),
(318,1258,qs),
(265,1274,o),
(239,1303,o),
(239,1368,o),
(275,1410,qs),
(293,1432,o),
(345,1473,o),
(428,1510,o),
(428,1541,qs),
(428,1587,o),
(374,1587,qs),
(278,1587,o),
(87,1336,o),
(87,1206,qs),
(87,1088,o),
(188,965,o),
(276,965,qs),
(312,965,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 7 5 0 21 1 21 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 15 values pushed */
2 1 0 0 1 1 0 39 0 1 1 12 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (89,978);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (521,2566);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 8 6 1 22 2 22 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 15 values pushed */
0 1 1 0 1 0 39 2 1 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (171,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (603,1192);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 8 6 1 22 2 22 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (106,965);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (19,0);
ref = quoteleft;
},
{
alignment = -1;
pos = (509,0);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 18 values pushed */
5 2 4 3 0 0 1 1 0 39 3 1 1 1 12 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,978);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (530,2566);
ref = quoteleft;
},
{
alignment = -1;
angle = 180;
pos = (1020,2566);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 18 values pushed */
3 1 1 1 0 1 0 39 5 2 4 3 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (98,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (530,1190);
ref = quoteleft;
},
{
alignment = -1;
angle = 180;
pos = (1020,1190);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 30 values pushed */
5 2 4 3 0 1 1 0 1 0 38 5 2 4 3 0 0 1 1 0 39 3 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,1651,ls),
(501,1686,o),
(463,1730,o),
(428,1730,qs),
(393,1730,o),
(353,1688,o),
(353,1653,qs),
(353,1180,l),
(200,1180,ls),
(122,1180,o),
(122,1106,qs),
(122,1071,o),
(163,1031,o),
(198,1031,qs),
(353,1031,l),
(353,-204,ls),
(353,-240,o),
(393,-288,o),
(460,-288,o),
(501,-243,o),
(501,-207,qs),
(501,1031,l),
(656,1031,ls),
(691,1031,o),
(733,1071,o),
(733,1106,qs),
(733,1180,o),
(654,1180,qs),
(501,1180,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 25 23 20 18 15 13 10 9 6 4 0 28 1 28 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 27 values pushed */
4 6 2 0 3 1 1 2 0 1 1 0 41 0 2 2 5 1 0 39 0 5 5 14 2 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 856;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,1651,ls),
(501,1686,o),
(463,1730,o),
(428,1730,qs),
(393,1730,o),
(353,1688,o),
(353,1653,qs),
(353,1180,l),
(200,1180,ls),
(122,1180,o),
(122,1106,qs),
(122,1071,o),
(163,1031,o),
(198,1031,qs),
(353,1031,l),
(353,521,l),
(200,521,ls),
(165,521,o),
(122,484,o),
(122,413,o),
(163,372,o),
(198,372,qs),
(353,372,l),
(353,-204,ls),
(353,-240,o),
(393,-288,o),
(460,-288,o),
(501,-243,o),
(501,-207,qs),
(501,372,l),
(656,372,ls),
(691,372,o),
(733,413,o),
(733,484,o),
(689,521,o),
(654,521,qs),
(501,521,l),
(501,1031,l),
(656,1031,ls),
(691,1031,o),
(733,1071,o),
(733,1106,qs),
(733,1180,o),
(654,1180,qs),
(501,1180,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 0 41 39 36 34 31 29 28 26 23 21 18 17 14 12 9 7 6 4 0 44 1 44 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 39 values pushed */
8 10 2 0 7 1 1 2 0 1 1 0 41 6 1 2 5 1 3 4 2 3 1 0 41 0 4 4 9 1 0 39 0 9 9 14 4 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 856;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,494,qs),
(566,559,o),
(566,633,qs),
(566,720,o),
(512,786,qs),
(451,861,o),
(348,861,qs),
(249,861,o),
(184,792,qs),
(122,726,o),
(122,637,qs),
(122,556,o),
(175,495,qs),
(202,464,o),
(286,424,o),
(340,424,qs),
(440,424,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 10 8 0 16 1 16 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1664,-24,o),
(1781,-24,o),
(1830,28,qs),
(1875,77,o),
(1875,133,qs),
(1875,199,o),
(1834,248,qs),
(1788,305,o),
(1712,305,qs),
(1638,305,o),
(1588,254,qs),
(1566,231,o),
(1541,170,o),
(1541,110,o),
(1561,53,o),
(1601,6,o)
);
},
{
closed = 1;
nodes = (
(980,-24,o),
(1097,-24,o),
(1146,28,qs),
(1191,77,o),
(1191,133,qs),
(1191,199,o),
(1150,248,qs),
(1104,305,o),
(1028,305,qs),
(954,305,o),
(904,254,qs),
(882,231,o),
(857,170,o),
(857,110,o),
(877,53,o),
(917,6,o)
);
},
{
closed = 1;
nodes = (
(296,-24,o),
(413,-24,o),
(462,28,qs),
(507,77,o),
(507,133,qs),
(507,199,o),
(466,248,qs),
(420,305,o),
(344,305,qs),
(270,305,o),
(220,254,qs),
(198,231,o),
(173,170,o),
(173,110,o),
(193,53,o),
(233,6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
46 45 39 37 30 29 23 21 14 13 7 5 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2052;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,46,qs),
(1518,1405,ls),
(1564,1465,o),
(1564,1505,qs),
(1564,1526,o),
(1530,1556,o),
(1475,1556,o),
(1427,1515,o),
(1390,1466,qs),
(368,155,ls),
(303,71,o),
(303,30,qs),
(303,7,o),
(335,-24,o),
(405,-24,o)
);
},
{
closed = 1;
nodes = (
(750,942,qs),
(862,1043,o),
(862,1212,qs),
(862,1359,o),
(762,1456,qs),
(657,1556,o),
(487,1556,qs),
(330,1556,o),
(219,1450,qs),
(110,1347,o),
(110,1200,qs),
(110,1059,o),
(194,963,qs),
(238,912,o),
(383,846,o),
(473,846,qs),
(644,846,o)
);
},
{
closed = 1;
nodes = (
(307,1189,o),
(307,1312,o),
(318,1351,qs),
(353,1467,o),
(453,1467,qs),
(537,1467,o),
(600,1374,qs),
(630,1329,o),
(666,1207,o),
(666,1027,o),
(626,976,qs),
(607,952,o),
(558,932,o),
(490,932,o),
(409,982,o),
(346,1069,o)
);
},
{
closed = 1;
nodes = (
(1980,94,qs),
(2081,-24,o),
(2275,-24,qs),
(2431,-24,o),
(2536,72,qs),
(2649,175,o),
(2649,343,qs),
(2649,491,o),
(2548,586,qs),
(2443,686,o),
(2273,686,qs),
(2115,686,o),
(2005,582,qs),
(1954,533,o),
(1896,404,o),
(1896,338,qs),
(1896,190,o)
);
},
{
closed = 1;
nodes = (
(1094,94,qs),
(1196,-24,o),
(1390,-24,qs),
(1545,-24,o),
(1650,72,qs),
(1763,175,o),
(1763,343,qs),
(1763,490,o),
(1662,586,qs),
(1559,686,o),
(1388,686,qs),
(1230,686,o),
(1120,582,qs),
(1069,533,o),
(1011,404,o),
(1011,338,qs),
(1011,190,o)
);
},
{
closed = 1;
nodes = (
(2240,598,qs),
(2322,598,o),
(2386,504,qs),
(2416,460,o),
(2452,337,o),
(2452,207,o),
(2441,168,qs),
(2411,62,o),
(2319,62,qs),
(2231,62,o),
(2164,156,qs),
(2132,200,o),
(2093,319,o),
(2093,442,o),
(2104,482,qs),
(2138,598,o)
);
},
{
closed = 1;
nodes = (
(1354,598,qs),
(1437,598,o),
(1501,504,qs),
(1531,460,o),
(1567,337,o),
(1567,207,o),
(1556,168,qs),
(1526,62,o),
(1434,62,qs),
(1346,62,o),
(1278,156,qs),
(1247,200,o),
(1208,319,o),
(1208,442,o),
(1220,482,qs),
(1253,598,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
16 15 0 0 113 111 105 103 97 95 89 87 79 77 71 69 62 60 54 52 43 41 34 33 25 23 15 31 16 31 0 14 0 14 8 7 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 2759;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(475,200,o),
(538,128,o),
(553,105,o),
(563,91,o),
(572,85,o),
(593,85,o),
(625,101,o),
(625,120,qs),
(625,176,o),
(536,331,qs),
(484,424,o),
(382,533,q),
(482,639,o),
(556,769,qs),
(589,826,o),
(625,920,o),
(625,965,o),
(593,981,o),
(568,981,o),
(545,952,qs),
(523,922,ls),
(449,818,o),
(306,702,qs),
(248,655,o),
(142,583,o),
(78,549,o),
(78,533,qs),
(78,522,o),
(93,510,o),
(142,484,o),
(244,409,o),
(359,312,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
26 25 13 12 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
19 1 1 0 1 33 0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (80,85);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (706,0);
ref = guilsinglleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
27 26 14 13 2 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
20 1 1 0 1 33 0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,47,qs),
(1531,1433,ls),
(1578,1496,o),
(1578,1535,qs),
(1578,1556,o),
(1542,1587,o),
(1487,1587,o),
(1437,1545,o),
(1400,1495,qs),
(358,158,ls),
(291,72,o),
(291,31,qs),
(291,8,o),
(323,-24,o),
(396,-24,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 14 0 14 8 7 3 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1869;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,262,o),
(456,118,qs),
(671,-23,o),
(998,-23,qs),
(1234,-23,o),
(1414,122,qs),
(1495,186,o),
(1589,348,o),
(1589,430,qs),
(1589,449,o),
(1570,460,qs),
(1562,464,o),
(1544,468,o),
(1531,468,o),
(1522,464,qs),
(1488,445,o),
(1488,406,q),
(1435,272,o),
(1310,191,qs),
(1189,113,o),
(1042,113,qs),
(831,113,o),
(682,204,qs),
(510,309,o),
(440,527,q),
(1088,527,ls),
(1131,527,o),
(1178,561,o),
(1178,606,qs),
(1178,646,o),
(1087,646,qs),
(420,646,l),
(408,702,o),
(408,860,o),
(412,896,q),
(1210,896,ls),
(1256,896,o),
(1280,911,qs),
(1298,921,o),
(1298,963,qs),
(1298,1013,o),
(1208,1013,qs),
(420,1013,l),
(449,1208,o),
(578,1329,qs),
(642,1389,o),
(817,1458,o),
(1076,1458,o),
(1256,1376,qs),
(1439,1293,o),
(1516,1183,qs),
(1532,1160,o),
(1552,1160,qs),
(1581,1160,o),
(1581,1238,o),
(1560,1311,qs),
(1546,1365,ls),
(1530,1422,o),
(1530,1535,qs),
(1530,1579,o),
(1516,1601,o),
(1483,1601,o),
(1425,1542,qs),
(1391,1508,o),
(1362,1508,qs),
(1348,1508,o),
(1316,1520,qs),
(1146,1587,o),
(961,1587,qs),
(660,1587,o),
(444,1420,qs),
(240,1263,o),
(180,1013,q),
(94,1013,ls),
(46,1013,o),
(22,1000,qs),
(3,990,o),
(3,948,qs),
(3,896,o),
(71,896,qs),
(159,896,l),
(155,869,o),
(154,830,qs),
(152,794,ls),
(152,777,o),
(152,765,qs),
(152,753,o),
(152,737,qs),
(154,692,ls),
(155,662,o),
(158,646,q),
(94,646,ls),
(46,646,o),
(22,633,qs),
(3,623,o),
(3,580,qs),
(3,527,o),
(71,527,qs),
(177,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
1 0 95 93 85 84 78 76 73 71 68 66 63 61 57 55 51 50 46 44 37 36 34 32 30 28 25 23 19 17 7 5 0 98 1 98 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 13 15 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 16 15 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 13 15 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 16 15 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1700;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(860,525,o),
(894,550,o),
(894,562,qs),
(894,587,o),
(866,587,q),
(802,581,l),
(767,581,o),
(752,602,q),
(729,646,o),
(729,749,qs),
(729,1461,l),
(859,1459,o),
(918,1430,qs),
(953,1414,o),
(997,1355,o),
(1013,1284,o),
(1032,1284,qs),
(1044,1284,o),
(1068,1368,qs),
(1090,1443,ls),
(1101,1483,o),
(1116,1515,q),
(1115,1515,l),
(1119,1523,l),
(1130,1548,ls),
(1134,1559,o),
(1134,1566,qs),
(1134,1591,o),
(1111,1591,qs),
(1102,1591,o),
(1094,1584,qs),
(1065,1563,ls),
(1044,1548,o),
(1001,1548,qs),
(333,1548,ls),
(292,1548,o),
(280,1551,qs),
(273,1553,o),
(265,1558,o),
(241,1589,o),
(225,1591,qs),
(210,1591,o),
(188,1511,qs),
(180,1479,o),
(166,1413,o),
(139,1329,o),
(139,1304,qs),
(139,1286,o),
(157,1286,qs),
(167,1286,o),
(186,1306,qs),
(292,1425,o),
(365,1441,qs),
(427,1456,ls),
(452,1462,o),
(481,1462,qs),
(526,1462,l),
(526,749,ls),
(526,642,o),
(502,601,q),
(487,581,o),
(452,581,q),
(387,587,l),
(360,587,o),
(360,562,qs),
(360,549,o),
(394,525,o),
(432,525,qs),
(512,525,ls),
(562,525,o),
(627,535,q),
(823,525,l)
);
},
{
closed = 1;
nodes = (
(1613,525,o),
(1641,550,o),
(1641,562,qs),
(1641,585,o),
(1613,585,q),
(1568,581,l),
(1524,581,o),
(1506,631,qs),
(1495,659,o),
(1495,749,qs),
(1495,1222,l),
(1832,710,ls),
(1848,684,o),
(1868,660,o),
(1879,660,qs),
(1901,660,o),
(1921,698,qs),
(2262,1337,l),
(2262,749,ls),
(2262,642,o),
(2238,601,q),
(2223,581,o),
(2188,581,q),
(2145,585,l),
(2116,585,o),
(2116,562,qs),
(2116,549,o),
(2144,525,o),
(2182,525,qs),
(2254,525,ls),
(2300,525,o),
(2363,535,q),
(2524,525,l),
(2562,525,o),
(2589,550,o),
(2589,562,qs),
(2589,585,o),
(2562,585,q),
(2518,581,l),
(2503,581,o),
(2490,586,qs),
(2444,603,o),
(2444,749,qs),
(2444,1331,ls),
(2444,1425,o),
(2476,1504,o),
(2518,1504,q),
(2562,1497,l),
(2589,1497,o),
(2589,1522,qs),
(2589,1534,o),
(2562,1559,o),
(2523,1559,q),
(2270,1547,l),
(1930,914,l),
(1507,1551,l),
(1272,1559,ls),
(1232,1559,o),
(1232,1536,qs),
(1232,1526,o),
(1243,1519,qs),
(1271,1500,ls),
(1288,1489,o),
(1332,1453,o),
(1399,1357,o),
(1399,1290,qs),
(1398,749,ls),
(1398,642,o),
(1374,601,q),
(1359,581,o),
(1325,581,q),
(1281,585,l),
(1253,585,o),
(1253,562,qs),
(1253,525,o),
(1343,525,qs),
(1404,525,o),
(1442,535,q),
(1575,525,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
92 73 29 1 2 13
CALL[ ]	/* CallFunction */";
};
width = 2729;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,110,qs),
(486,-24,o),
(693,-24,qs),
(845,-24,o),
(984,122,qs),
(1119,264,o),
(1200,494,qs),
(1285,734,o),
(1285,992,qs),
(1285,1334,o),
(1148,1523,qs),
(1082,1615,o),
(887,1712,o),
(648,1712,o),
(554,1660,qs),
(511,1636,o),
(447,1575,o),
(404,1510,o),
(382,1446,o),
(382,1399,o),
(406,1374,o),
(419,1374,qs),
(457,1374,o),
(477,1421,qs),
(511,1501,o),
(654,1597,o),
(751,1597,qs),
(897,1597,o),
(984,1446,qs),
(1077,1283,o),
(1077,980,qs),
(1077,940,l),
(972,1119,o),
(735,1119,qs),
(619,1119,o),
(509,1034,qs),
(456,993,o),
(365,878,o),
(299,737,o),
(262,572,o),
(262,468,qs),
(262,243,o)
);
},
{
closed = 1;
nodes = (
(754,968,o),
(857,968,o),
(898,950,qs),
(1023,898,o),
(1061,719,q),
(1024,431,o),
(913,256,qs),
(808,90,o),
(679,90,qs),
(560,90,o),
(508,164,qs),
(483,199,o),
(462,301,o),
(462,517,o),
(530,743,o),
(633,893,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
55 47 27 37 2 13
CALL[ ]	/* CallFunction */";
};
width = 1535;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(600,-111,o),
(557,-79,o),
(523,7,o),
(523,142,qs),
(523,1330,ls),
(523,1356,o),
(572,1393,o),
(629,1393,qs),
(1079,1393,ls),
(1135,1393,o),
(1186,1356,o),
(1186,1330,qs),
(1186,142,ls),
(1186,79,o),
(1181,32,qs),
(1166,-111,o),
(1073,-111,q),
(1008,-104,l),
(970,-104,o),
(970,-137,qs),
(970,-157,o),
(990,-170,qs),
(1000,-178,o),
(1037,-188,o),
(1118,-188,o),
(1212,-178,qs),
(1262,-172,o),
(1302,-172,qs),
(1343,-172,o),
(1415,-180,qs),
(1442,-183,o),
(1502,-188,o),
(1568,-188,o),
(1586,-183,qs),
(1634,-170,o),
(1634,-137,qs),
(1634,-104,o),
(1597,-104,q),
(1531,-111,l),
(1497,-111,o),
(1454,-79,o),
(1419,9,o),
(1419,142,qs),
(1419,1214,ls),
(1419,1346,o),
(1440,1398,qs),
(1465,1457,o),
(1531,1457,q),
(1597,1449,l),
(1614,1449,o),
(1634,1477,o),
(1634,1514,o),
(1614,1531,qs),
(1604,1540,o),
(1568,1553,o),
(1496,1553,o),
(1415,1546,qs),
(1388,1543,o),
(1334,1538,o),
(1302,1538,qs),
(405,1538,ls),
(374,1538,o),
(348,1540,qs),
(296,1546,ls),
(269,1548,o),
(207,1553,o),
(118,1553,o),
(92,1531,qs),
(82,1522,o),
(73,1500,o),
(73,1477,o),
(93,1449,o),
(112,1449,q),
(176,1457,l),
(211,1457,o),
(255,1428,o),
(288,1346,o),
(288,1214,qs),
(288,142,ls),
(288,8,o),
(267,-48,qs),
(243,-111,o),
(176,-111,q),
(112,-104,l),
(73,-104,o),
(73,-139,qs),
(73,-157,o),
(92,-170,qs),
(103,-178,o),
(140,-188,o),
(225,-188,o),
(318,-178,qs),
(366,-172,o),
(405,-172,qs),
(444,-172,o),
(516,-180,qs),
(543,-183,o),
(604,-188,o),
(671,-188,o),
(689,-183,qs),
(738,-169,o),
(738,-137,qs),
(738,-104,o),
(699,-104,q),
(635,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
37 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 1707;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1338,-8,o),
(1399,121,q),
(1398,121,l),
(1428,179,o),
(1428,232,o),
(1401,232,qs),
(1385,232,o),
(1350,197,qs),
(1204,43,o),
(1103,-12,qs),
(1006,-65,o),
(869,-65,qs),
(404,-65,l),
(867,754,l),
(871,755,l),
(869,757,l),
(873,763,l),
(865,762,l),
(410,1451,l),
(833,1451,ls),
(970,1451,o),
(1057,1422,q),
(1141,1386,o),
(1258,1284,qs),
(1300,1247,o),
(1356,1193,o),
(1365,1193,qs),
(1389,1193,o),
(1389,1252,o),
(1356,1356,qs),
(1342,1400,o),
(1312,1509,o),
(1297,1604,o),
(1276,1624,o),
(1243,1624,o),
(1213,1583,q),
(1208,1578,o),
(1178,1561,o),
(1104,1561,qs),
(138,1561,ls),
(72,1561,o),
(72,1527,qs),
(72,1503,o),
(102,1464,q),
(577,742,l),
(96,-63,l),
(63,-108,o),
(63,-129,qs),
(63,-173,o),
(140,-173,qs),
(1299,-173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
15 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 1536;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(970,559,l),
(970,707,l),
(228,707,l),
(226,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
0 2 1 13
CALL[ ]	/* CallFunction */";
};
width = 1196;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,629,l),
(781,-358,l),
(949,-358,l),
(1662,1888,ls),
(1671,1917,o),
(1671,1958,qs),
(1671,1981,o),
(1631,2019,o),
(1575,2019,o),
(1534,1991,o),
(1520,1945,qs),
(882,-139,l),
(880,-141,l),
(544,725,l),
(142,724,ls),
(99,724,o),
(56,694,o),
(56,659,o),
(98,629,o),
(140,629,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 16 1 13
CALL[ ]	/* CallFunction */";
};
width = 1646;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(827,408,qs),
(904,507,l),
(989,408,ls),
(1154,222,o),
(1314,222,qs),
(1476,222,o),
(1604,348,qs),
(1734,477,o),
(1734,649,qs),
(1734,801,o),
(1636,911,qs),
(1526,1034,o),
(1339,1034,qs),
(1196,1034,o),
(1040,850,qs),
(958,749,l),
(872,848,ls),
(709,1034,o),
(548,1034,qs),
(386,1034,o),
(263,908,qs),
(138,779,o),
(138,608,qs),
(138,456,o),
(242,345,qs),
(293,290,o),
(444,222,o),
(601,222,o),
(650,248,qs),
(740,295,o)
);
},
{
closed = 1;
nodes = (
(1317,875,qs),
(1417,875,o),
(1488,793,qs),
(1556,714,o),
(1556,611,qs),
(1556,512,o),
(1510,452,qs),
(1487,422,o),
(1415,386,o),
(1316,386,o),
(1270,410,qs),
(1143,477,o),
(1020,662,q),
(1185,875,o)
);
},
{
closed = 1;
nodes = (
(384,456,qs),
(305,542,o),
(305,646,qs),
(305,737,o),
(362,797,qs),
(421,860,o),
(516,860,qs),
(597,860,o),
(698,769,qs),
(753,720,o),
(842,592,q),
(767,487,o),
(714,439,qs),
(679,408,o),
(605,370,o),
(560,370,qs),
(463,370,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
52 44 41 33 9 1 3 13
CALL[ ]	/* CallFunction */";
};
width = 1873;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,-333,o),
(217,-402,qs),
(321,-487,o),
(432,-487,qs),
(629,-487,o),
(758,-326,qs),
(818,-253,o),
(884,-59,o),
(884,202,o),
(832,510,o),
(770,817,o),
(718,1124,o),
(718,1454,o),
(760,1529,qs),
(783,1570,o),
(861,1609,o),
(977,1609,o),
(1024,1571,qs),
(1043,1555,o),
(1075,1517,o),
(1105,1485,o),
(1136,1463,o),
(1169,1463,o),
(1182,1468,qs),
(1232,1484,o),
(1232,1534,qs),
(1232,1611,o),
(1142,1678,qs),
(1058,1740,o),
(952,1740,qs),
(754,1740,o),
(620,1584,qs),
(559,1512,o),
(490,1322,o),
(490,1062,o),
(542,754,o),
(605,447,o),
(657,140,o),
(657,-206,o),
(629,-266,qs),
(610,-307,o),
(532,-346,o),
(381,-346,o),
(318,-266,qs),
(287,-228,ls),
(272,-210,o),
(239,-186,o),
(185,-186,o),
(133,-232,o),
(133,-269,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
18 44 1 13
CALL[ ]	/* CallFunction */";
};
width = 1365;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(517,930,qs),
(553,913,o),
(658,838,qs),
(839,704,o),
(964,704,qs),
(1193,704,o),
(1305,1019,q),
(1174,1081,l),
(1133,964,o),
(1079,910,qs),
(1054,884,o),
(1004,862,o),
(954,862,o),
(930,866,qs),
(860,878,o),
(727,977,qs),
(541,1114,o),
(408,1114,qs),
(299,1114,o),
(200,1020,qs),
(108,932,o),
(58,799,q),
(190,734,l),
(285,955,o),
(403,955,qs),
(463,955,o)
);
},
{
closed = 1;
nodes = (
(507,442,qs),
(534,430,o),
(605,384,o),
(704,312,o),
(744,286,qs),
(862,211,o),
(964,211,qs),
(1191,211,o),
(1305,526,q),
(1174,589,l),
(1133,472,o),
(1079,416,qs),
(1054,391,o),
(1004,369,o),
(925,369,o),
(878,389,qs),
(850,401,o),
(778,446,o),
(674,523,o),
(630,550,qs),
(513,621,o),
(408,621,qs),
(299,621,o),
(200,526,qs),
(108,439,o),
(58,306,q),
(190,242,l),
(284,462,o),
(403,462,qs),
(462,462,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
32 47 6 19 2 13
CALL[ ]	/* CallFunction */";
};
width = 1364;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,391,l),
(436,250,ls),
(424,218,o),
(418,198,qs),
(407,164,ls),
(403,152,o),
(401,137,o),
(401,105,o),
(433,61,o),
(522,61,o),
(550,132,qs),
(644,391,l),
(1145,391,l),
(1145,540,l),
(699,540,l),
(766,724,l),
(1145,724,l),
(1145,873,l),
(820,873,l),
(887,1056,ls),
(909,1110,o),
(909,1152,qs),
(909,1171,o),
(878,1205,o),
(836,1205,o),
(822,1200,qs),
(779,1184,o),
(736,1067,qs),
(664,873,l),
(140,873,l),
(140,724,l),
(610,724,l),
(542,540,l),
(140,540,l),
(140,391,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
9 24 1 13
CALL[ ]	/* CallFunction */";
};
width = 1285;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(844,323,l),
(844,506,l),
(380,793,l),
(844,1075,l),
(844,1252,l),
(137,823,l),
(137,757,l)
);
},
{
closed = 1;
nodes = (
(888,0,l),
(886,149,l),
(144,149,l),
(142,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
7 9 1 5 2 13
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(888,757,l),
(888,823,l),
(181,1252,l),
(181,1075,l),
(645,793,l),
(181,506,l),
(181,323,l)
);
},
{
closed = 1;
nodes = (
(883,0,l),
(880,149,l),
(139,149,l),
(137,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
7 9 3 6 2 13
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(657,-15,o),
(755,-15,o),
(800,0,q),
(1236,681,l),
(1241,694,o),
(1241,714,qs),
(1241,726,o),
(1236,739,q),
(811,1438,ls),
(791,1468,o),
(692,1468,qs),
(637,1468,o),
(613,1438,q),
(181,765,l),
(174,752,o),
(174,708,o),
(182,695,qs),
(605,1,l)
);
},
{
closed = 1;
nodes = (
(360,749,l),
(699,1297,l),
(1053,692,l),
(715,143,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
19 21 5 15 2 13
CALL[ ]	/* CallFunction */";
};
width = 1415;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = commaaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-284,qs),
(159,-294,o),
(190,-308,o),
(216,-321,o),
(234,-338,o),
(234,-374,o),
(209,-408,o),
(128,-451,o),
(128,-497,o),
(151,-525,o),
(174,-525,qs),
(263,-525,o),
(332,-464,qs),
(366,-433,o),
(409,-341,o),
(409,-183,o),
(326,-91,o),
(195,-91,o),
(154,-128,qs),
(115,-164,o),
(115,-216,qs),
(115,-260,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 9 1 13
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = commaaccent;
unicode = 63171;
},
{
glyphname = ff;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (854,0);
ref = f;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
76 75 2 1 136 135 134 133 129 127 121 119 114 113 108 106 103 102 97 93 88 86 82 81 80 79 75 148 76 148 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 77 values pushed */
104 30 2 7 5 98 24 2 3 4 2 33 18 1 6 7 4 7 6 4 53 19 1 7 7 5 1 0 39 17 1 5 5 14 34 21 15 9 3 3 3 4 1 0 39 20 16 8 3 4 4 15 34 23 22 14 13 11 10 2 7 1 1 0 1 0 39 25 12 24 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1708;
}
);
note = ff;
unicode = 64256;
},
{
glyphname = fi;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (854,0);
ref = i;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
93 91 2 1 132 131 130 129 122 121 119 118 103 102 101 100 95 94 91 135 93 135 85 84 77 76 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
30 1 7 5 120 24 2 3 4 2 33 0 6 13 12 13 6 12 53 0 13 0 12 4 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 19 18 8 3 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
30 1 7 5 120 24 2 3 4 2 33 0 6 13 12 13 6 12 53 0 7 7 5 1 0 39 0 5 5 14 34 0 12 12 13 1 0 39 0 13 13 12 34 9 1 3 3 4 1 0 39 19 18 8 3 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 91 values pushed */
30 1 7 5 24 1 18 4 120 1 3 18 3 33 0 6 13 12 13 6 12 53 0 7 7 5 1 0 39 0 5 5 14 34 0 12 12 13 1 0 39 0 13 13 12 34 19 1 18 18 15 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
30 1 7 5 24 1 18 4 120 1 3 18 3 33 0 6 13 12 13 6 12 53 0 13 0 12 4 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 19 1 18 18 15 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1661;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (854,0);
ref = l;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
75 75 2 1 75 122 75 122 115 114 113 112 109 108 96 95 94 93 88 87 86 85 77 76 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 23 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
30 1 17 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 18 2 17 17 14 34 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
30 1 18 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 1 18 18 14 34 0 7 7 5 1 0 39 17 1 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
30 1 17 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 18 2 17 17 14 34 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1641;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = tilde.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(778,1896,qs),
(736,1834,o),
(690,1834,qs),
(667,1834,o),
(591,1857,o),
(421,1940,o),
(343,1940,qs),
(250,1940,o),
(181,1866,qs),
(96,1776,o),
(96,1704,qs),
(96,1670,o),
(147,1670,o),
(176,1712,qs),
(216,1774,o),
(269,1774,qs),
(298,1774,o),
(378,1746,qs),
(412,1735,o),
(584,1668,o),
(625,1668,qs),
(701,1668,o),
(773,1743,qs),
(857,1832,o),
(857,1904,qs),
(857,1938,o),
(829,1938,qs),
(808,1938,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
19 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 958;
}
);
note = tilde.cap;
},
{
glyphname = dieresis.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(969,1789,o),
(969,1880,o),
(933,1924,qs),
(915,1946,o),
(859,1972,o),
(754,1972,o),
(712,1928,qs),
(693,1908,o),
(671,1852,o),
(671,1758,o),
(706,1716,qs),
(724,1695,o),
(780,1668,o),
(854,1668,o),
(909,1694,o),
(948,1736,o)
);
},
{
closed = 1;
nodes = (
(395,1789,o),
(395,1881,o),
(358,1924,qs),
(340,1946,o),
(284,1972,o),
(180,1972,o),
(138,1928,qs),
(119,1908,o),
(97,1852,o),
(97,1757,o),
(131,1716,qs),
(149,1695,o),
(205,1668,o),
(279,1668,o),
(334,1694,o),
(373,1736,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
25 17 9 1 2 13
CALL[ ]	/* CallFunction */";
};
width = 1071;
}
);
note = dieresis.cap;
},
{
glyphname = ring.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,1582,qs),
(590,1651,o),
(590,1760,qs),
(590,1867,o),
(436,2010,o),
(328,2010,qs),
(218,2010,o),
(142,1938,qs),
(66,1866,o),
(66,1760,qs),
(66,1652,o),
(142,1582,qs),
(178,1549,o),
(273,1513,o),
(328,1513,qs),
(437,1513,o)
);
},
{
closed = 1;
nodes = (
(184,1730,o),
(184,1821,o),
(221,1862,qs),
(239,1882,o),
(292,1905,o),
(357,1905,o),
(384,1894,qs),
(469,1859,o),
(469,1760,qs),
(469,1691,o),
(428,1652,qs),
(408,1633,o),
(356,1614,o),
(297,1614,o),
(245,1637,o),
(206,1677,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
25 17 8 0 2 13
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = ring.cap;
},
{
glyphname = grave.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,1689,o),
(427,1714,q),
(269,1901,ls),
(214,1967,o),
(171,1993,qs),
(149,2006,o),
(107,2016,o),
(48,2016,o),
(-4,1969,o),
(-4,1910,o),
(2,1890,qs),
(22,1832,o),
(133,1775,q),
(369,1665,ls),
(401,1649,o),
(418,1649,qs),
(431,1649,o),
(445,1669,o),
(445,1678,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = grave.cap;
},
{
glyphname = acute.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(645,1848,o),
(645,1928,qs),
(645,1969,o),
(593,2016,o),
(533,2016,o),
(512,2012,qs),
(450,1998,o),
(372,1901,qs),
(213,1714,l),
(196,1691,o),
(196,1678,qs),
(196,1669,o),
(210,1649,o),
(240,1649,o),
(272,1665,qs),
(508,1775,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = acute.cap;
},
{
glyphname = caron.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(780,1964,o),
(783,1990,q),
(783,2020,o),
(750,2020,qs),
(730,2020,o),
(696,1998,qs),
(438,1843,l),
(183,1998,ls),
(149,2020,o),
(128,2020,qs),
(96,2020,o),
(96,1986,qs),
(96,1971,o),
(114,1949,q),
(331,1713,ls),
(352,1688,o),
(404,1634,o),
(442,1634,qs),
(480,1634,o),
(549,1713,qs),
(766,1949,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
9 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = caron.cap;
},
{
glyphname = circumflex.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(779,1690,o),
(766,1705,qs),
(549,1941,ls),
(479,2020,o),
(442,2020,qs),
(427,2020,o),
(388,2009,o),
(331,1941,q),
(114,1705,l),
(96,1683,o),
(96,1663,qs),
(96,1654,o),
(111,1634,o),
(146,1632,o),
(183,1656,qs),
(438,1811,l),
(696,1656,ls),
(730,1634,o),
(753,1634,qs),
(783,1634,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
13 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = circumflex.cap;
},
{
glyphname = hungarumlaut.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(717,1992,qs),
(684,1974,o),
(627,1902,qs),
(469,1715,ls),
(450,1691,o),
(451,1679,qs),
(451,1670,o),
(465,1650,o),
(499,1650,o),
(527,1666,qs),
(743,1776,ls),
(816,1816,o),
(858,1866,qs),
(880,1892,o),
(880,1932,qs),
(880,2017,o),
(810,2017,qs),
(763,2017,o)
);
},
{
closed = 1;
nodes = (
(310,2014,qs),
(248,2003,o),
(168,1902,q),
(9,1715,ls),
(-9,1693,o),
(-9,1679,qs),
(-9,1670,o),
(6,1650,o),
(38,1650,o),
(68,1666,qs),
(283,1786,ls),
(359,1828,o),
(398,1870,qs),
(421,1894,o),
(421,1932,qs),
(421,2017,o),
(351,2017,qs),
(330,2017,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
18 26 0 8 2 13
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = hungarumlaut.cap;
},
{
glyphname = breve.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,1824,qs),
(259,1630,o),
(507,1630,qs),
(827,1630,o),
(927,1968,q),
(821,2001,o),
(776,2001,qs),
(740,2001,o),
(709,1989,q),
(700,1927,o),
(682,1878,qs),
(624,1727,o),
(507,1727,qs),
(431,1727,o),
(323,1866,o),
(305,1989,q),
(267,2001,o),
(178,2001,o),
(88,1968,q),
(112,1887,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
1 15 1 13
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = breve.cap;
},
{
glyphname = dotaccent.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(396,1743,qs),
(441,1792,o),
(441,1848,qs),
(441,1914,o),
(400,1963,qs),
(354,2020,o),
(278,2020,qs),
(204,2020,o),
(154,1969,qs),
(132,1946,o),
(107,1885,o),
(107,1792,o),
(147,1744,qs),
(167,1721,o),
(230,1691,o),
(271,1691,qs),
(347,1691,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
8 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = dotaccent.cap;
},
{
glyphname = macron.cap;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(847,1783,ls),
(882,1783,o),
(922,1822,o),
(922,1857,qs),
(922,1892,o),
(880,1929,o),
(845,1929,qs),
(176,1929,ls),
(141,1929,o),
(99,1892,o),
(99,1857,qs),
(99,1822,o),
(139,1783,o),
(174,1783,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
4 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = macron.cap;
},
{
glyphname = caronvertical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,1255,o),
(388,1434,o),
(305,1556,o),
(175,1556,o),
(128,1518,qs),
(107,1501,o),
(80,1455,o),
(80,1364,o),
(94,1330,qs),
(104,1308,o),
(143,1273,o),
(217,1252,o),
(240,1220,o),
(240,1151,o),
(218,1114,qs),
(205,1094,o),
(164,1057,o),
(83,1021,o),
(83,990,qs),
(83,946,o),
(185,946,o),
(275,1015,o),
(345,1123,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
18 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = caronvertical;
},
{
glyphname = .ttfautohint;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 3 values pushed */
5 1 5
RCVT[ ]	/* ReadCVT */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 511;
}
);
note = .ttfautohint;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "Stoke-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Stoke Regular";
}
);
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright (c) 2011-2012 by Sorkin Type Co with Reserved Font Name Stoke.

This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = descriptions;
values = (
{
language = ENG;
value = "Stoke is a semi-wide high contrast serifed text typeface. Stoke is inspired by letters found on 20th century UK posters showing an odd combination of seriousness of form and whimsical proportions and details. Stoke's low x height make it most suitable for use at medium to large sizes.";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Nicole Fally";
}
);
},
{
key = designerURL;
value = sorkintype.com;
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Nicole Fally";
}
);
},
{
key = manufacturerURL;
value = sorkintype.com;
},
{
key = trademarks;
values = (
{
language = ENG;
value = "Stoke is a trademark of Sorkin Type Co.";
}
);
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 2048;
versionMajor = 1;
versionMinor = 2;
}
