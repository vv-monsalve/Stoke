{
.appVersion = "3418";
.formatVersion = 3;
DisplayStrings = (
INVhsbonndnnlnognnnrpqWMHB,
"AÆE",
"a/Placeholder a b/Placeholder b c/Placeholder c d/Placeholder d e/Placeholder e f/Placeholder f g/Placeholder g h/Placeholder h i/Placeholder i jjj k/Placeholder k l/Placeholder l m/Placeholder m n/Placeholder n o/Placeholder o p/Placeholder p q/Placeholder q r/Placeholder r s/Placeholder s t/Placeholder t u/Placeholder u v/Placeholder v w/Placeholder w x/Placeholder x y/Placeholder y z/Placeholder z
nnhnonnmonnn/Placeholder no/Placeholder oonnnmhnomnh

abcdefghijklmnopqrstuvwxyz

fear fall kilo long ovoide want wind oxo zapato

Twombli Tgmaiwan Taiwan Tomato Temperture Tiro Twardock Walking Wonder Wc Wd Wrcnder You Family Fear Furor Vocal Viajar Zusam Pearl Point Pain Ayuda 
Kilo Londres Leon Lio Month Lyon Tt

Thng Tt tt Nht Vng Đng Bt Đc k. ngi Ngng",
".:…,?!¡¿"
);
customParameters = (
{
name = vendorID;
value = "STC ";
},
{
name = panose;
value = (
2,
3,
5,
2,
7,
8,
0,
3,
3,
3
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
7,
29,
31,
33,
35,
38,
45,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
uni0001,
uni0002,
uni0003,
uni0004,
uni0005,
uni0006,
uni0007,
uni0008,
uni0009,
uni0010,
uni0011,
uni0012,
uni0013,
uni0014,
uni0015,
uni0016,
uni0017,
uni0018,
uni0019,
space,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
nonbreakingspace,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
twosuperior,
threesuperior,
acute,
mu,
paragraph,
periodcentered,
cedilla,
onesuperior,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Gcommaaccent,
gcommaaccent,
Hcircumflex,
hcircumflex,
Hbar,
hbar,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
IJ,
ij,
Jcircumflex,
jcircumflex,
Kcommaaccent,
kcommaaccent,
kgreenlandic,
Lacute,
lacute,
Lcommaaccent,
lcommaaccent,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
Ncommaaccent,
ncommaaccent,
Ncaron,
ncaron,
Eng,
eng,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
Rcommaaccent,
rcommaaccent,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scedilla,
scedilla,
Scaron,
scaron,
Tcommaaccent,
tcommaaccent,
Tcaron,
tcaron,
Tbar,
tbar,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
florin,
AEacute,
aeacute,
Scommaaccent,
scommaaccent,
dotlessj,
circumflex,
caron,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Delta,
Omega,
pi,
uni1E02,
uni1E03,
uni1E0A,
uni1E0B,
uni1E1E,
uni1E1F,
uni1E40,
uni1E41,
uni1E56,
uni1E57,
uni1E60,
uni1E61,
uni1E6A,
uni1E6B,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
trademark,
partialdiff,
product,
summation,
minus,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
commaaccent,
ff,
fi,
fl,
tilde.cap,
dieresis.cap,
ring.cap,
grave.cap,
acute.cap,
caron.cap,
circumflex.cap,
hungarumlaut.cap,
breve.cap,
dotaccent.cap,
macron.cap,
caronvertical,
.ttfautohint
);
}
);
date = "2012-07-12 02:45:25 +0000";
familyName = Stoke;
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 991;
},
{
name = typoDescender;
value = -259;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 991;
},
{
name = winDescent;
value = 259;
},
{
name = hheaAscender;
value = 991;
},
{
name = hheaDescender;
value = -259;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 67;
},
{
name = underlinePosition;
value = -56;
},
{
name = underlineThickness;
value = 67;
},
{
name = "prep Table Assembly";
value = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
SWAP[ ]	/* SwapTopStack */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 1 value pushed */
21
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
40
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
2
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
10 11 3 2
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 4 values pushed */
12 17 3 2
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 4 values pushed */
18 23 3 2
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
4 40 7
RCVT[ ]	/* ReadCVT */
GT[ ]	/* GreaterThan */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
12 17 4 2
CALL[ ]	/* CallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
5 0
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 1 value pushed */
4
RCVT[ ]	/* ReadCVT */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
22
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 2 values pushed */
6 4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 5
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
9 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 4 values pushed */
11 11 1 0
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
7 2
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 4 values pushed */
11 11 1 0
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
7 2
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
11
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
18
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
10
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
3
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
15 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
3 32 4 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
3 38 4 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
17
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
17
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
18
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
11
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
3 32 4 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
3 38 4 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
128
DIV[ ]	/* Divide */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
34
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
11
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
11 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
27
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
28
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
29
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 5
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
58
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 1 value pushed */
1
SZP2[ ]	/* SetZonePointer2 */
IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    249,
    151,
    249,
    252,
    151,
    152,
    1592,
    \"-19\",
    1743,
    1053,
    \"-20\",
    \"-512\",
    1625,
    \"-19\",
    1743,
    1055,
    \"-20\",
    \"-512\"
)";
}
);
id = m01;
metricValues = (
{
pos = 991;
},
{
pos = 333;
},
{
pos = 234;
},
{
},
{
pos = -259;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(664,0,l),
(664,639,l),
(81,639,l),
(81,0,l)
);
},
{
closed = 1;
nodes = (
(163,479,l),
(208,523,l),
(373,358,l),
(533,519,l),
(576,476,l),
(416,315,l),
(580,150,l),
(535,106,l),
(371,271,l),
(210,110,l),
(167,153,o),
(167,153,q),
(328,314,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
14 8 0 2 2 13
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = .notdef;
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = .null;
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 0;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
width = 334;
}
);
note = space;
unicode = 32;
},
{
glyphname = exclam;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,775,l),
(83,775,o),
(83,755,qs),
(83,742,o),
(93,690,o),
(97,664,qs),
(107,585,ls),
(115,534,o),
(133,369,qs),
(138,330,o),
(144,265,o),
(155,230,o),
(178,230,o),
(189,265,o),
(196,331,o),
(201,372,qs),
(221,542,ls),
(227,587,o),
(238,671,qs),
(242,697,o),
(251,743,o),
(251,755,qs),
(251,775,o),
(230,775,q),
(167,771,l)
);
},
{
closed = 1;
nodes = (
(149,-12,o),
(197,-12,o),
(218,7,qs),
(228,16,o),
(240,41,o),
(240,84,o),
(222,105,qs),
(213,116,o),
(187,129,o),
(137,129,o),
(116,107,qs),
(106,98,o),
(96,71,o),
(96,46,o),
(104,21,o),
(122,1,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 39 38 31 30 12 11 0 24 1 22 5 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 16 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 16 3 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 0 39 4 1 0 0 12 34 0 2 2 3 1 0 39 0 3 3 13 3 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (84,457);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (-20,0);
ref = quotesingle;
},
{
alignment = -1;
pos = (191,0);
ref = quotesingle;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
29 28 21 20 14 13 6 5 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 16 values pushed */
3 1 1 1 0 1 0 39 2 1 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,10,o),
(214,24,qs),
(266,248,l),
(431,248,l),
(392,81,ls),
(388,65,o),
(386,56,qs),
(383,39,ls),
(381,33,o),
(381,26,o),
(381,10,o),
(398,-12,o),
(431,-12,o),
(453,10,o),
(457,24,qs),
(508,248,l),
(609,248,ls),
(626,248,o),
(651,268,o),
(651,302,o),
(625,321,o),
(608,321,qs),
(525,321,l),
(556,454,l),
(659,454,ls),
(676,454,o),
(701,474,o),
(701,509,o),
(675,527,o),
(658,527,qs),
(573,527,l),
(613,701,ls),
(619,729,o),
(619,748,qs),
(619,758,o),
(600,775,o),
(587,775,qs),
(553,775,o),
(538,706,qs),
(496,527,l),
(332,527,l),
(372,701,ls),
(377,729,o),
(377,748,qs),
(377,758,o),
(358,775,o),
(337,775,o),
(330,771,qs),
(310,761,o),
(296,706,qs),
(254,527,l),
(129,527,ls),
(113,527,o),
(86,509,o),
(86,474,o),
(112,454,o),
(128,454,qs),
(237,454,l),
(206,321,l),
(85,321,ls),
(68,321,o),
(42,302,o),
(42,268,o),
(67,248,o),
(84,248,qs),
(189,248,l),
(150,81,ls),
(146,65,o),
(144,56,qs),
(141,39,ls),
(140,33,o),
(139,26,o),
(139,10,o),
(157,-12,o),
(189,-12,o)
);
},
{
closed = 1;
nodes = (
(314,454,l),
(479,454,l),
(447,321,l),
(283,321,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
75 75 0 0 75 78 75 78 77 76 0 74 0 74 71 70 62 61 58 56 53 51 50 48 45 43 38 36 34 33 28 27 23 21 18 16 15 13 10 8 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 15 34 16 13 2 11 11 13 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 15 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 13 11 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 16 11 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
17 15 9 3 1 12 10 2 0 11 1 0 1 0 41 6 1 4 4 12 34 14 8 2 2 2 3 1 0 39 7 5 2 3 3 21 34 16 13 2 11 11 13 11 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,-141,o),
(343,-141,qs),
(368,-141,o),
(368,-103,qs),
(368,-11,l),
(491,-6,o),
(562,54,qs),
(596,82,o),
(632,162,o),
(632,252,o),
(618,289,qs),
(574,401,o),
(368,453,q),
(368,712,l),
(502,700,o),
(560,583,qs),
(566,569,o),
(576,556,o),
(583,556,qs),
(598,556,o),
(598,598,o),
(582,663,qs),
(570,708,o),
(567,756,qs),
(566,775,o),
(560,786,o),
(543,786,o),
(525,762,qs),
(514,747,o),
(507,748,qs),
(504,748,o),
(495,752,qs),
(440,772,o),
(368,774,q),
(368,865,ls),
(368,904,o),
(315,904,o),
(315,865,qs),
(315,773,l),
(201,764,o),
(138,700,qs),
(82,644,o),
(82,564,qs),
(82,485,o),
(134,429,qs),
(193,365,o),
(315,334,q),
(315,54,l),
(229,64,o),
(181,120,qs),
(157,146,o),
(129,219,o),
(121,293,o),
(105,293,qs),
(85,293,o),
(85,234,qs),
(85,63,l),
(211,-3,o),
(315,-10,q),
(315,-101,ls)
);
},
{
closed = 1;
nodes = (
(275,482,o),
(250,498,qs),
(185,540,o),
(185,611,qs),
(185,698,o),
(315,711,q),
(315,468,l)
);
},
{
closed = 1;
nodes = (
(453,298,o),
(490,258,qs),
(509,239,o),
(525,196,o),
(525,145,o),
(518,124,qs),
(496,56,o),
(368,52,q),
(368,321,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
68 67 58 56 54 53 41 39 33 32 29 28 26 25 23 22 6 4 1 0 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
20 1 3 2 35 1 4 3 60 45 2 6 4 75 66 46 12 4 1 6 2 1 9 1 11 1 0 9 6 33 0 4 3 6 3 4 6 53 0 6 1 3 6 1 51 0 1 9 3 1 9 51 0 2 0 8 2 8 1 0 40 5 1 3 3 12 34 0 9 9 0 1 2 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
20 1 3 5 35 1 4 3 60 45 2 6 4 75 66 46 12 4 1 6 2 1 9 1 11 1 0 9 6 33 0 4 3 6 3 4 6 53 0 6 1 3 6 1 51 0 1 9 3 1 9 51 0 2 0 8 2 8 1 0 40 0 5 5 18 34 0 3 3 12 34 0 9 9 0 1 2 39 7 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,23,qs),
(755,700,ls),
(778,730,o),
(778,750,qs),
(778,760,o),
(761,775,o),
(734,775,o),
(709,754,o),
(691,730,qs),
(183,77,ls),
(149,34,o),
(149,15,qs),
(149,4,o),
(166,-12,o),
(201,-12,o)
);
},
{
closed = 1;
nodes = (
(373,469,qs),
(429,520,o),
(429,604,qs),
(429,678,o),
(378,725,qs),
(325,775,o),
(242,775,qs),
(163,775,o),
(108,723,qs),
(54,670,o),
(54,598,qs),
(54,528,o),
(96,479,qs),
(118,454,o),
(190,421,o),
(235,421,qs),
(320,421,o)
);
},
{
closed = 1;
nodes = (
(151,592,o),
(151,653,o),
(157,673,qs),
(174,730,o),
(225,730,qs),
(267,730,o),
(298,684,qs),
(313,662,o),
(331,602,o),
(331,512,o),
(311,486,qs),
(301,474,o),
(277,464,o),
(243,464,o),
(203,489,o),
(171,532,o)
);
},
{
closed = 1;
nodes = (
(529,47,qs),
(580,-12,o),
(677,-12,qs),
(754,-12,o),
(807,36,qs),
(862,87,o),
(862,171,qs),
(862,244,o),
(813,292,qs),
(761,342,o),
(676,342,qs),
(597,342,o),
(542,289,qs),
(517,265,o),
(488,201,o),
(488,168,qs),
(488,95,o)
);
},
{
closed = 1;
nodes = (
(659,298,qs),
(700,298,o),
(731,251,qs),
(747,229,o),
(765,168,o),
(765,103,o),
(759,84,qs),
(744,31,o),
(698,31,qs),
(654,31,o),
(621,78,qs),
(605,100,o),
(586,159,o),
(586,220,o),
(592,240,qs),
(608,298,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
16 15 0 0 80 78 72 70 62 60 54 52 43 41 34 33 25 23 15 31 16 31 0 14 0 14 8 7 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 11 1 2 6 4 2 1 0 41 0 6 0 9 8 6 9 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 0 8 8 1 1 2 39 7 10 2 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 916;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
lastChange = "2025-07-10 16:21:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,-2,o),
(702,-2,qs),
(751,0,l),
(821,-4,l),
(875,-4,o),
(875,23,qs),
(875,30,o),
(864,39,o),
(855,39,q),
(831,35,l),
(802,35,o),
(787,51,qs),
(647,188,l),
(700,252,o),
(750,343,q),
(779,404,o),
(815,405,q),
(839,402,l),
(847,402,o),
(862,420,o),
(862,450,o),
(854,458,qs),
(849,462,o),
(833,467,o),
(802,467,o),
(769,460,o),
(729,460,o),
(684,467,o),
(656,467,qs),
(601,467,o),
(601,436,qs),
(601,420,o),
(615,403,o),
(625,403,q),
(657,406,l),
(689,406,o),
(689,382,qs),
(689,324,o),
(610,224,q),
(500,327,ls),
(451,374,o),
(414,413,q),
(591,489,o),
(591,627,qs),
(591,692,o),
(542,733,qs),
(490,777,o),
(396,777,qs),
(291,777,o),
(229,724,qs),
(202,700,o),
(174,637,o),
(174,580,o),
(178,558,qs),
(190,489,o),
(269,403,q),
(169,359,o),
(125,307,qs),
(83,257,o),
(83,184,qs),
(83,101,o),
(149,46,qs),
(218,-11,o),
(331,-11,qs),
(461,-11,o),
(574,101,q),
(663,16,ls)
);
},
{
closed = 1;
nodes = (
(307,539,o),
(300,550,qs),
(282,579,o),
(282,618,qs),
(282,660,o),
(311,688,qs),
(339,716,o),
(381,716,qs),
(423,716,o),
(449,690,qs),
(464,676,o),
(483,628,o),
(483,563,o),
(461,526,qs),
(432,480,o),
(379,451,q),
(318,524,ls)
);
},
{
closed = 1;
nodes = (
(303,367,q),
(537,137,l),
(459,62,o),
(359,62,qs),
(286,62,o),
(245,96,qs),
(225,113,o),
(202,165,o),
(202,192,qs),
(202,306,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
90 88 76 74 65 61 58 57 56 55 50 49 48 47 42 41 40 39 38 36 33 32 31 30 19 17 3 1 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 13 34 10 1 9 9 0 1 2 39 11 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 16 34 10 1 9 9 0 1 2 39 11 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 13 34 10 1 9 9 0 1 2 39 11 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
67 24 2 2 4 92 91 53 27 10 0 6 13 2 2 33 6 5 2 4 8 7 3 3 2 13 4 2 1 0 41 0 12 12 1 1 0 39 0 1 1 12 34 0 13 13 0 1 0 39 11 1 0 0 16 34 10 1 9 9 0 1 2 39 11 1 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 918;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,457,q),
(183,457,l),
(193,508,o),
(203,547,qs),
(219,617,ls),
(225,647,o),
(233,693,o),
(233,741,o),
(197,775,o),
(143,775,o),
(104,741,o),
(104,686,o),
(118,617,qs),
(132,547,ls),
(140,508,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
13 12 5 4 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 14 values pushed */
0 1 1 0 1 0 39 0 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,6,qs),
(205,124,o),
(205,355,qs),
(205,479,o),
(219,564,qs),
(260,805,o),
(383,805,q),
(413,803,ls),
(417,803,o),
(429,813,o),
(429,827,qs),
(429,837,o),
(401,851,o),
(375,851,qs),
(316,851,o),
(210,788,o),
(170,726,qs),
(81,590,o),
(81,120,o),
(170,-16,qs),
(210,-78,o),
(316,-141,o),
(375,-141,qs),
(401,-141,o),
(429,-126,o),
(429,-117,qs),
(429,-114,o),
(428,-109,qs),
(423,-93,o),
(413,-93,q),
(383,-95,l),
(305,-95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
0 0 0 31 0 31 25 24 23 22 18 16 9 7 2 1 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (71,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (500,0);
ref = parenleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 1 1 32 1 32 26 25 24 23 19 17 10 8 3 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,581,o),
(465,631,o),
(450,649,qs),
(442,658,o),
(422,669,o),
(387,669,o),
(357,647,qs),
(324,622,ls),
(302,604,o),
(270,591,q),
(270,620,o),
(289,667,qs),
(297,685,o),
(309,721,o),
(309,767,o),
(276,794,o),
(227,794,o),
(193,766,o),
(193,721,o),
(213,656,qs),
(224,620,o),
(227,594,q),
(211,598,o),
(194,611,qs),
(161,639,ls),
(144,653,o),
(107,676,o),
(77,676,o),
(67,671,qs),
(34,654,o),
(34,611,qs),
(34,557,o),
(119,557,qs),
(181,557,o),
(211,551,q),
(175,514,o),
(139,493,qs),
(118,481,o),
(106,469,qs),
(98,460,o),
(87,440,o),
(87,403,o),
(106,386,qs),
(115,378,o),
(137,370,o),
(174,370,o),
(188,386,qs),
(195,396,o),
(210,429,o),
(229,491,o),
(247,523,q),
(256,505,ls),
(260,495,o),
(268,475,o),
(274,456,o),
(288,402,o),
(302,383,qs),
(310,373,o),
(329,365,o),
(363,365,o),
(382,381,qs),
(391,388,o),
(403,410,o),
(403,441,o),
(385,464,o),
(369,477,qs),
(331,505,ls),
(310,521,o),
(284,548,q),
(314,552,o),
(351,552,qs),
(402,551,ls),
(431,551,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 0 67 66 56 55 45 44 40 38 27 26 13 12 0 72 2 72 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
62 50 2 0 4 21 3 2 1 0 2 33 37 1 0 1 32 2 1 1 0 1 56 6 1 4 3 7 2 0 1 4 0 1 0 41 0 5 5 18 5 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,70,l),
(351,283,l),
(559,283,l),
(559,356,l),
(351,356,l),
(351,570,l),
(276,570,l),
(276,356,l),
(68,356,l),
(68,283,l),
(276,283,l),
(276,70,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 0 0 38 3 1 1 4 1 0 5 1 0 0 0 41 0 2 2 5 0 0 39 0 5 2 5 0 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
kernLeft = period;
lastChange = "2025-07-10 16:22:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,-46,o),
(251,18,qs),
(251,75,o),
(202,135,o),
(159,135,qs),
(141,135,o),
(127,129,qs),
(83,111,o),
(83,62,qs),
(83,9,o),
(139,-7,qs),
(164,-15,o),
(177,-31,o),
(177,-61,o),
(159,-83,qs),
(151,-93,o),
(125,-112,o),
(84,-131,o),
(84,-147,qs),
(84,-168,o),
(111,-168,qs),
(158,-168,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 17 15 0 21 1 21 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,273,ls),
(342,273,o),
(363,292,o),
(363,327,o),
(341,345,o),
(324,345,qs),
(103,345,ls),
(85,345,o),
(64,327,o),
(64,292,o),
(84,273,o),
(102,273,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
lastChange = "2025-07-10 16:22:27 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,-12,o),
(202,-12,o),
(228,14,qs),
(250,38,o),
(250,66,qs),
(250,100,o),
(230,124,qs),
(207,152,o),
(169,152,qs),
(132,152,o),
(107,126,qs),
(96,115,o),
(83,84,o),
(83,55,o),
(93,27,o),
(114,3,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
14 13 7 5 2 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 1 1 0 39 0 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-105,qs),
(437,771,ls),
(448,798,o),
(448,818,qs),
(448,828,o),
(427,845,o),
(406,845,o),
(399,842,qs),
(377,834,o),
(356,776,qs),
(71,-19,ls),
(44,-92,o),
(44,-119,o),
(65,-141,o),
(110,-141,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 14 0 14 8 7 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 0 1 56 0 0 0 14 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,39,qs),
(302,-11,o),
(387,-11,qs),
(518,-11,o),
(600,92,qs),
(689,206,o),
(689,406,qs),
(689,557,o),
(611,663,qs),
(526,777,o),
(384,777,qs),
(238,777,o),
(152,663,qs),
(111,609,o),
(68,462,o),
(68,391,qs),
(68,147,o)
);
},
{
closed = 1;
nodes = (
(189,365,o),
(189,579,o),
(235,645,qs),
(279,706,o),
(353,706,qs),
(447,706,o),
(506,604,qs),
(567,500,o),
(567,331,qs),
(567,189,o),
(521,120,qs),
(500,88,o),
(446,62,o),
(374,62,o),
(291,114,o),
(228,216,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 26 19 18 14 12 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,53,o),
(276,89,o),
(276,153,qs),
(276,613,ls),
(276,665,o),
(279,707,qs),
(281,723,o),
(283,746,o),
(283,775,o),
(270,775,qs),
(263,775,o),
(256,771,qs),
(229,750,ls),
(208,735,o),
(162,715,qs),
(141,705,o),
(98,688,o),
(33,663,o),
(33,650,qs),
(33,636,o),
(73,636,o),
(105,643,o),
(117,643,qs),
(143,643,o),
(163,586,o),
(163,524,qs),
(163,153,ls),
(163,123,o),
(160,101,qs),
(154,40,o),
(107,40,q),
(61,45,l),
(52,45,o),
(42,29,o),
(42,12,o),
(55,3,qs),
(61,-1,o),
(80,-7,o),
(118,-7,o),
(161,-4,qs),
(189,-1,ls),
(203,0,o),
(234,0,o),
(247,-1,qs),
(273,-4,ls),
(286,-5,o),
(301,-6,qs),
(355,-11,o),
(372,3,qs),
(377,8,o),
(381,18,o),
(381,29,o),
(372,43,o),
(363,43,q),
(331,40,l),
(314,40,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 55 0 55 46 44 35 34 33 31 25 24 23 22 17 16 13 12 9 8 2 1 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 40 values pushed */
49 1 6 8 1 33 7 1 6 8 0 8 6 0 53 0 8 8 12 34 10 9 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 416;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,180,qs),
(489,97,o),
(347,97,qs),
(163,97,l),
(182,136,o),
(240,196,qs),
(278,235,o),
(371,305,qs),
(492,396,o),
(541,462,qs),
(589,525,o),
(589,592,qs),
(589,677,o),
(521,727,qs),
(489,751,o),
(397,777,o),
(261,777,o),
(189,751,qs),
(146,735,o),
(90,690,q),
(90,553,ls),
(90,529,o),
(109,529,qs),
(112,529,o),
(128,541,o),
(132,558,qs),
(148,625,o),
(201,666,qs),
(252,706,o),
(318,706,qs),
(383,706,o),
(419,678,qs),
(456,647,o),
(456,592,qs),
(456,527,o),
(421,473,qs),
(388,421,o),
(298,343,qs),
(166,228,o),
(112,148,qs),
(87,110,o),
(68,49,o),
(68,11,o),
(82,0,o),
(91,0,qs),
(544,0,l),
(555,49,o),
(565,80,qs),
(571,96,o),
(583,126,o),
(606,172,o),
(606,185,qs),
(606,198,o),
(593,198,qs),
(586,198,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 52 50 38 37 32 30 25 23 10 8 0 54 1 54 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 48 values pushed */
34 1 3 2 1 33 0 3 2 0 2 3 0 53 6 1 0 5 2 0 5 51 0 2 2 4 1 0 39 0 4 4 12 34 0 5 5 1 1 0 39 0 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,56,qs),
(598,128,o),
(598,235,qs),
(598,317,o),
(546,373,qs),
(498,425,o),
(419,439,q),
(480,467,o),
(521,514,qs),
(561,561,o),
(561,608,qs),
(561,687,o),
(497,732,qs),
(467,754,o),
(380,777,o),
(297,777,o),
(268,772,qs),
(173,757,o),
(100,708,q),
(100,577,ls),
(100,553,o),
(114,553,qs),
(120,553,o),
(129,566,o),
(143,616,o),
(160,639,qs),
(208,706,o),
(305,706,qs),
(369,706,o),
(407,677,qs),
(446,647,o),
(446,593,qs),
(446,483,o),
(296,439,qs),
(223,417,o),
(223,398,qs),
(223,388,o),
(228,380,qs),
(230,375,o),
(237,370,o),
(253,370,o),
(275,376,qs),
(286,379,o),
(296,379,qs),
(370,379,o),
(428,328,qs),
(489,275,o),
(489,199,qs),
(489,133,o),
(438,95,qs),
(393,62,o),
(324,62,qs),
(252,62,o),
(200,93,qs),
(173,109,o),
(131,161,o),
(115,227,o),
(88,227,o),
(88,203,qs),
(88,55,l),
(184,-12,o),
(321,-12,qs),
(423,-12,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 47 46 41 39 35 33 22 21 19 17 11 9 5 4 0 62 1 62 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
43 1 5 7 55 1 3 6 2 1 0 2 3 33 0 6 5 3 5 6 3 53 4 1 3 1 5 3 1 51 0 1 2 5 1 2 51 0 5 5 7 1 0 39 0 7 7 12 34 0 2 2 0 1 0 39 8 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,55,o),
(467,96,o),
(467,161,qs),
(467,228,l),
(522,228,o),
(558,218,qs),
(572,214,o),
(590,205,o),
(601,197,o),
(607,192,o),
(610,192,qs),
(616,192,o),
(629,230,qs),
(635,247,o),
(649,285,o),
(668,313,o),
(668,320,qs),
(668,332,o),
(655,332,qs),
(649,332,o),
(635,323,qs),
(627,318,o),
(617,313,qs),
(585,296,o),
(535,296,qs),
(467,296,l),
(467,746,ls),
(467,779,o),
(450,779,qs),
(441,779,o),
(417,753,o),
(403,736,q),
(403,737,l),
(40,294,ls),
(15,264,o),
(15,249,qs),
(15,241,o),
(33,228,o),
(59,228,qs),
(353,228,l),
(353,161,ls),
(353,96,o),
(342,70,qs),
(331,40,o),
(298,40,q),
(251,45,l),
(243,45,o),
(233,29,o),
(233,12,o),
(245,3,qs),
(251,-1,o),
(271,-7,o),
(309,-7,o),
(352,-4,qs),
(380,-1,ls),
(394,0,o),
(425,0,o),
(438,-1,qs),
(464,-4,ls),
(477,-5,o),
(492,-6,qs),
(546,-11,o),
(563,3,qs),
(568,8,o),
(572,18,o),
(572,29,o),
(563,43,o),
(553,43,q),
(522,40,l),
(505,40,o)
);
},
{
closed = 1;
nodes = (
(353,296,l),
(141,296,ls),
(121,296,o),
(121,300,qs),
(121,308,o),
(134,325,qs),
(353,592,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 75 73 0 69 0 69 65 64 59 57 51 49 45 43 41 39 31 29 25 24 23 22 17 16 13 12 9 8 2 1 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 61 values pushed */
76 37 36 3 9 7 1 33 0 9 7 8 7 9 8 53 0 10 6 0 6 10 0 53 13 1 8 11 1 6 10 8 6 1 0 41 0 7 7 12 34 14 12 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,665,l),
(492,690,o),
(511,746,qs),
(523,782,ls),
(529,799,o),
(529,806,qs),
(529,819,o),
(516,819,qs),
(510,819,o),
(493,804,qs),
(467,780,o),
(415,769,qs),
(383,762,o),
(287,762,qs),
(134,762,ls),
(115,762,o),
(111,742,q),
(111,407,ls),
(111,384,o),
(127,384,qs),
(133,384,o),
(139,390,qs),
(154,402,ls),
(195,440,o),
(289,440,qs),
(375,440,o),
(430,380,qs),
(456,352,o),
(485,272,o),
(485,188,o),
(478,163,qs),
(447,56,o),
(323,56,qs),
(245,56,o),
(188,94,qs),
(160,112,o),
(119,165,o),
(99,213,o),
(90,227,o),
(83,227,qs),
(69,227,o),
(69,203,qs),
(69,55,l),
(94,38,o),
(124,25,qs),
(209,-12,o),
(297,-12,qs),
(414,-12,o),
(501,55,qs),
(599,128,o),
(599,251,qs),
(599,365,o),
(525,438,qs),
(489,473,o),
(385,514,o),
(227,514,o),
(162,483,q),
(162,665,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
57 56 50 48 44 41 38 36 33 31 25 23 18 16 11 9 2 1 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
40 1 8 6 0 1 4 0 14 1 1 3 3 33 0 7 6 7 55 0 5 4 2 4 5 2 53 0 2 3 4 2 3 51 0 8 8 6 1 0 39 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 3 3 1 1 0 39 0 1 1 13 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,61,qs),
(615,143,o),
(615,278,qs),
(615,381,o),
(550,447,qs),
(520,479,o),
(433,514,o),
(343,514,o),
(309,506,qs),
(199,479,o),
(158,389,q),
(164,545,o),
(224,628,qs),
(281,706,o),
(376,706,qs),
(492,706,o),
(531,632,qs),
(541,611,o),
(554,611,qs),
(560,611,o),
(572,624,o),
(572,643,qs),
(572,670,o),
(554,698,qs),
(545,713,o),
(515,742,o),
(471,764,o),
(413,777,o),
(328,777,o),
(285,763,qs),
(197,733,o),
(136,660,qs),
(38,544,o),
(38,382,qs),
(38,198,o),
(121,92,qs),
(202,-12,o),
(340,-12,qs),
(443,-12,o)
);
},
{
closed = 1;
nodes = (
(230,395,qs),
(275,440,o),
(334,440,qs),
(399,440,o),
(446,384,qs),
(471,355,o),
(501,269,o),
(501,143,o),
(429,59,o),
(370,59,qs),
(297,59,o),
(243,109,qs),
(187,162,o),
(167,261,q),
(182,346,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 51 49 44 42 31 30 24 22 20 18 10 9 0 38 1 38 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
39 27 2 5 6 1 33 0 2 3 4 3 2 4 53 0 3 3 1 1 0 39 0 1 1 12 34 0 6 6 4 1 0 39 0 4 4 15 34 0 5 5 0 1 0 39 7 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,-4,o),
(325,15,qs),
(350,162,o),
(404,328,qs),
(432,415,o),
(532,672,o),
(565,739,qs),
(569,745,o),
(569,759,o),
(555,762,o),
(538,762,qs),
(173,762,ls),
(129,762,o),
(120,773,qs),
(104,793,o),
(94,793,qs),
(88,793,o),
(79,783,o),
(71,734,o),
(63,705,qs),
(37,622,ls),
(33,608,o),
(33,583,o),
(45,583,qs),
(52,583,o),
(64,595,q),
(122,665,o),
(191,665,qs),
(472,665,l),
(398,518,l),
(325,366,ls),
(287,286,o),
(209,107,qs),
(172,20,o),
(177,8,qs),
(181,-4,o),
(197,-4,q),
(250,0,l),
(305,-4,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
38 37 28 25 23 21 15 13 11 9 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 2 1 33 0 2 1 0 1 2 0 53 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 5 1 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,489,qs),
(594,540,o),
(594,597,qs),
(594,670,o),
(525,722,qs),
(452,777,o),
(336,777,qs),
(219,777,o),
(145,716,qs),
(112,689,o),
(78,622,o),
(78,589,qs),
(78,488,o),
(200,409,q),
(129,386,o),
(83,333,qs),
(34,276,o),
(34,207,qs),
(34,117,o),
(104,58,qs),
(185,-12,o),
(337,-12,qs),
(470,-12,o),
(555,57,qs),
(635,122,o),
(635,215,qs),
(635,330,o),
(474,413,q),
(528,440,o)
);
},
{
closed = 1;
nodes = (
(487,542,qs),
(473,474,o),
(416,439,q),
(403,444,o),
(390,449,qs),
(285,489,o),
(233,541,qs),
(191,583,o),
(191,619,qs),
(191,661,o),
(261,706,o),
(326,706,qs),
(492,706,o),
(492,580,qs),
(492,562,o)
);
},
{
closed = 1;
nodes = (
(261,375,q),
(294,360,l),
(396,318,o),
(445,282,qs),
(476,260,o),
(515,207,o),
(515,144,o),
(504,123,qs),
(472,62,o),
(364,62,qs),
(265,62,o),
(203,104,qs),
(174,124,o),
(141,180,o),
(141,247,o),
(150,273,qs),
(177,350,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
51 49 32 30 22 20 7 5 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 16 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 16 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
59 40 14 0 4 3 2 1 33 0 2 2 1 1 0 39 0 1 1 12 34 0 3 3 0 1 0 39 0 0 0 13 0 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,-12,o),
(286,-12,qs),
(438,-12,o),
(529,108,qs),
(618,225,o),
(618,409,qs),
(618,575,o),
(537,675,qs),
(455,777,o),
(315,777,qs),
(206,777,o),
(129,706,qs),
(48,632,o),
(48,513,qs),
(48,402,o),
(122,328,qs),
(155,294,o),
(244,257,o),
(327,257,o),
(356,265,qs),
(445,287,o),
(497,359,q),
(491,207,o),
(420,129,qs),
(387,93,o),
(306,62,o),
(208,62,o),
(140,94,o),
(124,130,qs),
(114,152,o),
(99,152,qs),
(91,152,o),
(86,141,qs),
(84,136,o),
(83,125,o),
(83,102,o),
(106,57,o),
(131,36,qs)
);
},
{
closed = 1;
nodes = (
(166,507,o),
(166,599,o),
(176,626,qs),
(206,706,o),
(308,706,qs),
(380,706,o),
(426,648,qs),
(477,586,o),
(489,462,q),
(467,396,o),
(433,367,qs),
(414,352,o),
(366,336,o),
(307,336,o),
(248,366,o),
(198,423,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
49 47 40 39 36 34 28 26 19 18 11 10 7 5 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
44 15 2 5 6 1 33 0 0 2 1 2 0 1 53 0 5 0 2 0 5 2 1 0 41 0 6 6 3 1 0 39 0 3 3 12 34 0 1 1 4 1 0 39 0 4 4 13 4 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (83,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (0,333);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
31 30 24 22 15 14 8 6 4 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 16 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 16 1 35 3
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 1 0 41 0 0 0 1 1 0 39 0 1 1 13 1 35 3
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (81,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (-1,0);
ref = comma;
},
{
alignment = -1;
pos = (0,333);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 37 36 30 28 18 16 1 22 2 22 5 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 1 0 41 0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 4 1 0 1 0 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,43,l),
(423,132,l),
(197,272,l),
(423,410,l),
(423,496,l),
(78,287,l),
(78,254,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
1 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(559,354,l),
(559,426,l),
(68,426,l),
(68,354,l)
);
},
{
closed = 1;
nodes = (
(559,191,l),
(559,264,l),
(68,264,l),
(68,191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 6 5 4 3 2 1 0 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 2 0 1 0 0 41 0 2 3 3 2 0 0 38 0 2 2 3 0 0 39 0 3 2 3 0 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,254,l),
(423,287,l),
(78,496,l),
(78,410,l),
(304,272,l),
(78,132,l),
(78,43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 6 1 13
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,266,o),
(253,272,o),
(236,281,o),
(236,292,qs),
(236,337,o),
(322,408,qs),
(360,439,o),
(387,467,qs),
(469,549,o),
(469,628,qs),
(469,693,o),
(419,732,qs),
(364,775,o),
(257,775,qs),
(157,775,o),
(68,724,q),
(68,587,ls),
(68,563,o),
(86,563,qs),
(94,563,o),
(108,583,o),
(110,592,qs),
(126,653,o),
(198,717,o),
(245,717,qs),
(268,717,o),
(287,711,qs),
(349,694,o),
(349,624,qs),
(349,556,o),
(281,474,qs),
(188,362,o),
(188,294,qs),
(188,259,o),
(215,233,qs),
(229,219,o),
(255,219,qs),
(289,219,o),
(289,244,qs),
(289,257,o)
);
},
{
closed = 1;
nodes = (
(229,-12,o),
(277,-12,o),
(298,7,qs),
(308,16,o),
(319,41,o),
(319,84,o),
(302,105,qs),
(293,116,o),
(267,129,o),
(217,129,o),
(196,107,qs),
(186,98,o),
(175,71,o),
(175,46,o),
(184,21,o),
(202,1,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
54 53 46 45 26 24 21 19 15 13 3 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 16 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 16 5 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
23 1 1 3 1 33 0 2 1 0 1 2 0 53 0 0 4 1 0 4 51 0 1 1 3 1 0 39 0 3 3 12 34 0 4 4 5 1 0 39 0 5 5 13 5 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,432,o),
(640,432,qs),
(569,432,o),
(457,383,o),
(378,302,o),
(336,200,o),
(336,146,qs),
(336,138,ls),
(336,79,o),
(368,40,qs),
(406,-7,o),
(490,-7,qs),
(563,-7,o),
(631,58,q),
(631,54,o),
(631,48,o),
(631,44,qs),
(634,5,o),
(664,5,q),
(719,8,l),
(755,6,l),
(827,6,o),
(904,58,qs),
(982,111,o),
(1032,193,qs),
(1086,283,o),
(1086,378,qs),
(1086,389,ls),
(1086,393,o),
(1086,398,qs),
(1077,534,o),
(976,608,qs),
(878,681,o),
(720,681,qs),
(533,681,o),
(382,598,qs),
(240,520,o),
(159,386,qs),
(79,254,o),
(79,104,qs),
(79,-83,o),
(210,-179,qs),
(265,-219,o),
(403,-257,o),
(599,-257,o),
(675,-232,qs),
(713,-220,o),
(766,-181,o),
(783,-143,o),
(774,-119,o),
(751,-107,o),
(727,-107,o),
(721,-120,qs),
(718,-125,o),
(718,-134,o),
(717,-137,qs),
(707,-158,o),
(619,-184,qs),
(568,-199,o),
(498,-199,qs),
(348,-199,o),
(268,-115,qs),
(186,-29,o),
(186,124,qs),
(186,246,o),
(247,358,qs),
(310,477,o),
(419,547,qs),
(540,625,o),
(689,625,qs),
(818,625,o),
(896,559,qs),
(974,492,o),
(982,373,qs),
(983,359,o),
(983,325,qs),
(983,297,o),
(973,258,qs),
(945,145,o),
(858,91,qs),
(808,59,o),
(758,59,qs),
(756,59,o),
(756,62,q),
(756,63,l),
(808,374,l)
);
},
{
closed = 1;
nodes = (
(468,242,o),
(520,314,qs),
(542,345,o),
(596,381,o),
(656,381,o),
(681,354,q),
(644,136,l),
(631,118,o),
(617,103,qs),
(571,52,o),
(529,52,qs),
(468,52,o),
(468,145,qs),
(468,153,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
95 94 89 87 84 82 74 72 67 63 52 50 41 40 34 33 26 24 16 14 4 2 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
55 1 10 8 93 85 11 1 4 0 10 71 1 6 0 3 33 0 3 6 2 6 3 2 53 0 5 0 1 8 5 1 1 0 41 0 8 0 10 0 8 10 1 0 41 9 1 0 0 6 1 0 39 7 1 6 6 13 34 0 2 2 4 1 0 39 0 4 4 17 4 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
55 1 10 8 93 85 11 1 4 0 10 71 1 6 0 3 33 0 3 7 2 7 3 2 53 0 5 0 1 8 5 1 1 0 41 0 8 0 10 0 8 10 1 0 41 9 1 0 0 6 1 0 39 0 6 6 13 34 9 1 0 0 7 1 0 39 0 7 7 13 34 0 2 2 4 1 0 39 0 4 4 17 4 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1135;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 15:49:17 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-7,o),
(244,11,o),
(244,31,o),
(233,44,o),
(225,44,q),
(201,41,l),
(166,41,o),
(166,62,qs),
(167,79,o),
(192,140,q),
(207,182,l),
(220,213,o),
(270,213,qs),
(526,213,ls),
(552,213,o),
(577,199,o),
(583,185,qs),
(617,120,l),
(637,77,o),
(637,56,qs),
(637,39,o),
(607,39,q),
(572,43,l),
(554,43,o),
(554,22,qs),
(554,18,o),
(557,13,qs),
(567,-7,o),
(603,-7,q),
(724,0,l),
(820,-7,l),
(842,-7,o),
(862,11,o),
(862,30,o),
(854,44,o),
(844,44,q),
(819,41,l),
(800,41,o),
(777,64,qs),
(761,80,o),
(736,134,qs),
(478,698,ls),
(457,746,o),
(444,765,qs),
(438,774,o),
(427,782,o),
(418,782,o),
(407,775,o),
(393,745,qs),
(131,179,ls),
(89,89,o),
(64,58,qs),
(51,41,o),
(28,41,q),
(4,43,l),
(-15,43,o),
(-15,21,qs),
(-15,12,o),
(5,-7,o),
(26,-7,q),
(96,0,l),
(194,-7,l)
);
},
{
closed = 1;
nodes = (
(258,275,o),
(258,289,qs),
(258,294,o),
(265,310,qs),
(378,568,ls),
(392,602,o),
(401,602,qs),
(409,602,o),
(427,556,qs),
(532,300,ls),
(536,292,o),
(536,289,qs),
(536,275,o),
(481,275,qs),
(312,275,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
63 62 70 68 62 76 63 75 61 60 57 56 55 54 49 46 40 39 38 37 33 31 30 29 26 25 24 23 15 14 8 7 6 5 2 1 17 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
0 1 0 1 1 33 0 15 3 14 3 15 14 53 16 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
kernLeft = H;
kernRight = B;
lastChange = "2025-07-10 15:51:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,-8,qs),
(402,-12,o),
(425,-12,qs),
(567,-12,o),
(648,60,qs),
(724,125,o),
(724,229,qs),
(724,299,o),
(668,353,qs),
(614,405,o),
(523,427,q),
(587,455,o),
(657,548,o),
(657,652,o),
(637,688,qs),
(625,707,o),
(589,740,o),
(535,764,o),
(461,777,o),
(393,777,o),
(370,775,qs),
(322,770,ls),
(297,767,o),
(244,762,o),
(183,762,o),
(154,766,qs),
(143,767,o),
(116,769,o),
(73,769,o),
(61,758,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,718,o),
(70,718,q),
(94,721,l),
(113,721,o),
(138,707,o),
(156,667,o),
(156,602,qs),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(101,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,19,o),
(53,14,qs),
(62,-7,o),
(97,-7,q),
(217,0,l),
(255,0,o)
);
},
{
closed = 1;
nodes = (
(270,664,o),
(284,682,o),
(325,696,o),
(389,696,qs),
(536,696,o),
(536,587,qs),
(536,514,o),
(491,477,qs),
(470,459,o),
(413,442,o),
(319,442,o),
(270,452,q),
(270,649,ls)
);
},
{
closed = 1;
nodes = (
(600,225,qs),
(600,135,o),
(548,96,qs),
(524,77,o),
(458,62,o),
(342,62,o),
(270,95,o),
(270,129,qs),
(270,373,l),
(316,380,o),
(417,380,o),
(461,371,qs),
(600,343,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 0 74 73 69 68 63 61 56 55 51 49 34 33 29 28 25 24 19 18 17 16 9 8 7 6 0 53 2 53 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 84 values pushed */
54 1 9 10 42 1 11 9 70 1 12 11 3 33 0 9 0 11 12 9 11 1 0 41 4 1 3 3 5 1 0 39 7 6 2 5 5 12 34 0 10 10 5 1 0 39 7 6 2 5 5 12 34 0 12 12 0 1 0 39 8 13 2 0 0 13 34 2 1 1 1 0 1 2 39 8 13 2 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 15:51:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(755,274,o),
(737,274,qs),
(718,274,o),
(710,243,qs),
(696,188,o),
(674,153,qs),
(615,60,o),
(501,60,qs),
(358,60,o),
(264,150,qs),
(164,247,o),
(164,406,qs),
(164,531,o),
(246,620,qs),
(283,661,o),
(378,706,o),
(429,706,qs),
(633,706,o),
(717,552,qs),
(724,539,o),
(739,539,qs),
(746,539,o),
(758,549,o),
(758,574,o),
(741,640,qs),
(733,670,o),
(729,698,qs),
(727,712,o),
(726,742,o),
(726,785,o),
(712,785,qs),
(705,785,o),
(691,772,o),
(652,733,o),
(629,733,o),
(615,740,qs),
(538,777,o),
(455,777,qs),
(340,777,o),
(247,728,qs),
(202,704,o),
(128,633,o),
(77,543,o),
(48,435,o),
(48,294,o),
(105,155,o),
(158,103,qs),
(272,-11,o),
(460,-11,qs),
(636,-11,o),
(755,102,q),
(755,243,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
50 48 44 42 35 33 31 29 21 19 17 16 14 12 3 1 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
kernLeft = H;
kernRight = O;
lastChange = "2025-07-10 15:51:33 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,o),
(156,666,o),
(156,602,qs),
(156,153,ls),
(156,90,o),
(146,66,qs),
(135,40,o),
(102,40,q),
(70,43,l),
(51,43,o),
(51,20,qs),
(51,11,o),
(61,3,qs),
(66,-1,o),
(83,-8,o),
(124,-8,o),
(161,-4,qs),
(174,-2,o),
(201,0,o),
(245,0,o),
(268,-2,qs),
(334,-8,ls),
(377,-12,o),
(435,-12,qs),
(559,-12,o),
(660,40,qs),
(761,91,o),
(818,179,qs),
(878,271,o),
(878,383,qs),
(878,566,o),
(770,668,qs),
(653,777,o),
(427,777,qs),
(390,777,o),
(322,770,qs),
(298,767,o),
(249,762,o),
(187,762,o),
(157,766,qs),
(145,767,o),
(117,769,o),
(74,769,o),
(61,758,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,718,o),
(70,718,q),
(94,721,l),
(114,721,o)
);
},
{
closed = 1;
nodes = (
(273,667,o),
(292,688,o),
(343,706,o),
(416,706,qs),
(576,706,o),
(662,625,qs),
(752,540,o),
(752,373,qs),
(752,201,o),
(667,127,qs),
(626,91,o),
(507,61,o),
(336,61,o),
(305,75,qs),
(273,90,o),
(273,131,qs),
(273,650,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 64 62 55 54 0 50 0 50 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 12 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
12 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 15:51:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,341,o),
(293,358,o),
(313,358,qs),
(435,358,ls),
(456,358,o),
(477,344,qs),
(487,336,o),
(507,313,o),
(517,291,o),
(523,282,o),
(529,282,qs),
(544,282,o),
(544,310,q),
(541,392,l),
(544,471,l),
(544,498,o),
(529,498,qs),
(523,498,o),
(517,490,o),
(507,467,o),
(497,456,qs),
(469,421,o),
(435,421,qs),
(314,421,ls),
(271,421,o),
(271,447,qs),
(271,655,ls),
(271,676,o),
(291,699,o),
(317,699,qs),
(449,699,ls),
(489,699,o),
(514,693,qs),
(527,690,o),
(560,675,o),
(587,646,qs),
(616,614,ls),
(633,595,o),
(640,595,qs),
(650,595,o),
(650,609,qs),
(650,616,o),
(646,632,qs),
(633,687,ls),
(624,727,o),
(621,762,q),
(217,762,ls),
(190,762,o),
(154,766,qs),
(129,769,ls),
(116,770,o),
(73,770,o),
(61,759,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,719,o),
(70,719,q),
(94,722,l),
(113,722,o),
(138,707,o),
(156,667,o),
(156,602,qs),
(156,161,ls),
(156,95,o),
(146,70,qs),
(135,41,o),
(101,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,3,qs),
(65,-1,o),
(83,-7,o),
(116,-7,o),
(131,-6,qs),
(188,-1,ls),
(202,0,o),
(222,0,qs),
(629,0,l),
(649,74,o),
(678,133,qs),
(707,189,o),
(682,188,qs),
(678,187,o),
(667,185,o),
(650,169,qs),
(633,150,ls),
(618,133,o),
(600,117,qs),
(540,63,o),
(419,63,qs),
(317,63,ls),
(271,63,o),
(271,129,qs),
(271,328,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
94 91 86 84 80 78 74 71 67 64 58 56 50 48 45 44 39 38 37 36 29 28 27 26 21 20 18 15 12 11 4 1 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 94 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 13
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
kernLeft = H;
kernRight = F;
lastChange = "2025-07-10 15:51:35 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,4,qs),
(400,8,o),
(406,19,o),
(406,30,o),
(396,45,o),
(388,45,q),
(326,41,l),
(309,41,o),
(287,54,o),
(271,91,o),
(271,154,qs),
(271,326,ls),
(271,339,o),
(293,356,o),
(313,356,qs),
(448,356,ls),
(458,356,o),
(468,353,qs),
(506,340,o),
(527,295,q),
(532,280,o),
(542,280,qs),
(557,280,o),
(557,308,q),
(553,384,l),
(557,469,l),
(557,496,o),
(542,496,qs),
(536,496,o),
(529,488,o),
(520,465,o),
(510,454,qs),
(481,419,o),
(448,419,qs),
(314,419,ls),
(271,419,o),
(271,445,qs),
(271,646,ls),
(271,670,o),
(295,699,o),
(317,699,qs),
(458,699,ls),
(523,699,o),
(568,667,qs),
(588,652,o),
(621,616,o),
(647,583,o),
(655,583,qs),
(666,583,o),
(666,617,o),
(652,669,qs),
(640,716,ls),
(633,739,o),
(630,762,q),
(221,762,ls),
(203,762,o),
(189,764,qs),
(132,769,ls),
(117,770,o),
(74,770,o),
(61,759,qs),
(56,754,o),
(51,744,o),
(51,731,o),
(61,719,o),
(70,719,q),
(94,722,l),
(114,722,o),
(139,707,o),
(156,668,o),
(156,602,qs),
(156,154,ls),
(156,90,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(51,44,o),
(51,21,qs),
(51,12,o),
(61,4,qs),
(66,0,o),
(84,-7,o),
(128,-7,o),
(168,-2,qs),
(190,0,o),
(214,0,q),
(355,-7,l),
(379,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 0 83 80 74 71 67 65 61 59 55 52 48 45 41 39 34 32 30 28 23 22 21 20 13 12 11 10 5 4 0 88 2 88 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 75 values pushed */
0 8 9 11 9 8 11 53 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 14 3 2 2 2 0 1 0 39 1 15 2 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = O;
kernRight = G;
lastChange = "2025-07-10 15:51:36 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(882,374,o),
(882,385,o),
(880,391,qs),
(871,412,o),
(836,412,q),
(745,404,l),
(727,404,o),
(690,408,qs),
(677,409,o),
(646,412,o),
(601,412,o),
(589,400,qs),
(584,396,o),
(580,385,o),
(580,374,o),
(589,358,o),
(599,358,q),
(635,364,l),
(652,364,o),
(673,351,o),
(689,313,o),
(689,250,qs),
(689,157,ls),
(689,113,o),
(627,85,qs),
(572,60,o),
(511,60,qs),
(364,60,o),
(268,150,qs),
(168,245,o),
(168,398,qs),
(168,532,o),
(252,619,qs),
(292,660,o),
(403,706,o),
(560,706,o),
(634,674,qs),
(714,639,o),
(750,576,qs),
(756,564,o),
(767,564,qs),
(780,564,o),
(780,587,qs),
(780,598,o),
(775,619,qs),
(765,665,ls),
(758,690,o),
(749,743,o),
(749,791,o),
(734,791,qs),
(724,791,o),
(695,761,qs),
(678,742,o),
(663,742,qs),
(654,742,o),
(634,750,qs),
(564,777,o),
(487,777,qs),
(292,777,o),
(169,659,qs),
(111,604,o),
(48,452,o),
(48,363,qs),
(48,203,o),
(160,99,qs),
(215,48,o),
(374,-11,o),
(561,-11,o),
(623,7,qs),
(654,16,o),
(706,42,o),
(740,66,o),
(758,76,qs),
(802,99,l),
(802,250,ls),
(802,268,o),
(803,288,qs),
(803,364,o),
(828,364,q),
(863,359,l),
(872,359,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 0 80 0 80 76 75 74 73 70 69 64 63 62 61 54 52 45 44 40 38 31 29 27 25 23 21 13 12 2 1 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
6 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 14 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 15:51:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,53,o),
(271,90,o),
(271,154,qs),
(271,374,ls),
(271,387,o),
(295,405,o),
(323,405,qs),
(623,405,ls),
(650,405,o),
(675,387,o),
(675,374,qs),
(675,154,ls),
(675,91,o),
(665,67,qs),
(653,41,o),
(620,41,q),
(588,43,l),
(580,43,o),
(570,30,o),
(570,12,o),
(579,3,qs),
(584,-1,o),
(602,-7,o),
(639,-7,o),
(678,-4,qs),
(704,-1,ls),
(717,0,o),
(748,0,o),
(761,-1,qs),
(787,-4,ls),
(800,-5,o),
(814,-6,qs),
(869,-11,o),
(886,3,qs),
(891,8,o),
(895,19,o),
(895,30,o),
(885,43,o),
(876,43,q),
(845,41,l),
(828,41,o),
(806,53,o),
(790,91,o),
(790,154,qs),
(790,608,ls),
(790,671,o),
(800,695,qs),
(812,722,o),
(845,722,q),
(876,719,l),
(885,719,o),
(895,732,o),
(895,750,o),
(886,759,qs),
(880,763,o),
(862,770,o),
(826,770,o),
(787,766,qs),
(761,764,ls),
(748,762,o),
(717,762,o),
(704,764,qs),
(678,766,ls),
(665,767,o),
(635,770,o),
(591,770,o),
(579,759,qs),
(574,754,o),
(570,744,o),
(570,732,o),
(580,719,o),
(588,719,q),
(620,722,o),
(620,722,q),
(637,722,o),
(659,709,o),
(675,671,o),
(675,608,qs),
(675,500,ls),
(675,475,o),
(623,475,qs),
(323,475,ls),
(271,475,o),
(271,500,qs),
(271,608,ls),
(271,672,o),
(281,695,qs),
(292,722,o),
(326,722,q),
(357,719,l),
(376,719,o),
(376,741,qs),
(376,750,o),
(367,759,qs),
(361,763,o),
(344,770,o),
(307,770,o),
(268,766,qs),
(241,764,ls),
(229,762,o),
(213,762,qs),
(198,762,o),
(186,764,qs),
(160,766,ls),
(146,767,o),
(116,770,o),
(73,770,o),
(61,759,qs),
(55,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(69,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(69,43,l),
(61,43,o),
(51,30,o),
(51,11,o),
(61,3,qs),
(66,-1,o),
(83,-7,o),
(120,-7,o),
(160,-4,qs),
(186,-1,ls),
(198,0,o),
(213,0,qs),
(229,0,o),
(241,-1,qs),
(268,-4,ls),
(281,-5,o),
(296,-6,qs),
(350,-11,o),
(367,3,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(367,43,o),
(357,43,q),
(326,41,l),
(309,41,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
0 0 0 148 0 148 142 139 133 132 131 130 125 124 121 120 117 116 110 109 108 107 100 99 98 97 92 91 88 87 83 82 77 76 74 73 68 65 60 59 58 57 52 51 48 46 42 41 36 35 34 33 26 25 24 23 18 17 14 12 9 8 2 1 31 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 61 values pushed */
0 13 0 28 0 13 28 1 0 41 20 19 15 14 12 11 7 7 6 6 8 1 0 39 18 17 16 10 9 5 8 8 12 34 30 29 27 26 22 21 5 4 8 0 0 1 1 0 39 25 24 23 3 2 5 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 946;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 15:51:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,54,o),
(271,91,o),
(271,154,qs),
(271,608,ls),
(271,671,o),
(282,695,qs),
(293,722,o),
(326,722,q),
(358,719,l),
(376,719,o),
(376,741,qs),
(376,750,o),
(367,759,qs),
(362,763,o),
(344,770,o),
(308,770,o),
(268,766,qs),
(242,764,ls),
(229,762,o),
(199,762,o),
(186,764,qs),
(160,766,ls),
(147,767,o),
(117,770,o),
(73,770,o),
(61,759,qs),
(56,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(70,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,4,qs),
(66,0,o),
(84,-7,o),
(129,-7,o),
(181,-1,qs),
(214,2,o),
(268,-3,qs),
(281,-5,o),
(311,-7,o),
(354,-7,o),
(367,4,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(367,44,o),
(358,44,q),
(326,41,l),
(309,41,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 62 0 62 55 54 53 52 47 46 43 42 38 37 32 31 30 29 22 21 20 19 14 13 9 7 2 1 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 13 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
lastChange = "2025-07-10 15:51:40 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(677,741,qs),
(677,750,o),
(667,759,qs),
(662,763,o),
(645,770,o),
(608,770,o),
(568,766,qs),
(542,764,ls),
(530,762,o),
(499,762,o),
(484,764,qs),
(423,769,ls),
(407,770,o),
(363,770,o),
(352,759,qs),
(346,754,o),
(342,744,o),
(342,732,o),
(352,719,o),
(360,719,q),
(397,722,l),
(415,722,o),
(438,709,o),
(457,671,o),
(457,608,qs),
(457,256,ls),
(457,154,o),
(413,103,qs),
(393,79,o),
(338,57,o),
(281,57,o),
(254,66,qs),
(166,98,o),
(124,265,qs),
(116,294,o),
(100,294,qs),
(76,294,o),
(76,235,qs),
(76,52,l),
(103,34,o),
(132,22,qs),
(212,-11,o),
(285,-11,qs),
(399,-11,o),
(480,50,qs),
(572,119,o),
(572,239,qs),
(572,608,ls),
(572,671,o),
(582,695,qs),
(593,722,o),
(626,722,q),
(658,719,l),
(677,719,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 53 0 53 48 47 44 43 41 39 34 33 32 31 23 22 18 16 11 9 2 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
14 1 1 3 1 33 0 2 0 3 0 2 3 53 10 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
kernLeft = H;
kernRight = K;
lastChange = "2025-07-10 15:51:41 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,54,o),
(271,91,o),
(271,154,qs),
(271,360,l),
(301,357,o),
(327,349,qs),
(410,322,o),
(468,205,qs),
(522,95,o),
(585,45,qs),
(618,19,o),
(692,-6,o),
(759,-6,o),
(776,3,qs),
(784,7,o),
(793,18,o),
(793,27,o),
(792,32,qs),
(788,55,o),
(773,55,q),
(750,50,l),
(725,50,o),
(692,83,qs),
(653,124,o),
(621,191,qs),
(567,298,o),
(498,348,qs),
(437,393,o),
(337,409,q),
(442,459,o),
(649,662,qs),
(710,721,o),
(736,721,q),
(769,718,ls),
(773,718,o),
(787,729,o),
(787,744,qs),
(787,769,o),
(742,769,q),
(666,762,l),
(558,769,l),
(517,769,o),
(517,744,qs),
(517,736,o),
(527,723,o),
(536,723,qs),
(567,722,ls),
(588,722,o),
(588,708,qs),
(588,687,o),
(524,626,qs),
(431,538,o),
(355,482,qs),
(312,451,o),
(271,438,q),
(271,608,ls),
(271,671,o),
(281,695,qs),
(292,722,o),
(326,722,q),
(357,719,l),
(376,719,o),
(376,741,qs),
(376,750,o),
(367,759,qs),
(361,763,o),
(344,770,o),
(308,770,o),
(268,766,qs),
(255,765,o),
(229,762,o),
(213,762,qs),
(198,762,o),
(186,764,qs),
(159,766,ls),
(146,767,o),
(116,770,o),
(73,770,o),
(61,759,qs),
(55,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(70,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(51,44,o),
(51,21,qs),
(51,12,o),
(61,4,qs),
(66,0,o),
(83,-7,o),
(128,-7,o),
(168,-2,qs),
(190,0,o),
(213,0,qs),
(237,0,o),
(268,-3,qs),
(281,-5,o),
(311,-7,o),
(354,-7,o),
(367,4,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(367,44,o),
(357,44,q),
(326,41,l),
(309,41,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 0 0 117 0 117 105 104 98 97 96 95 85 84 83 82 79 78 77 75 72 69 58 57 56 55 50 49 46 44 40 39 34 33 32 31 24 23 22 21 16 15 13 11 9 7 2 1 23 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
113 88 62 3 0 6 1 33 17 16 13 12 11 7 6 6 6 8 1 0 39 15 14 10 9 4 8 8 12 34 22 21 19 18 5 4 6 0 0 1 1 0 39 20 3 2 3 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 793;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
kernLeft = H;
kernRight = L;
lastChange = "2025-07-10 15:51:42 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(618,182,q),
(587,144,o),
(537,98,o),
(473,63,o),
(416,63,qs),
(316,63,ls),
(271,63,o),
(271,129,qs),
(271,608,ls),
(271,672,o),
(281,695,qs),
(293,722,o),
(326,722,q),
(358,719,l),
(367,719,o),
(377,732,o),
(377,750,o),
(367,759,qs),
(362,763,o),
(344,770,o),
(308,770,o),
(268,766,qs),
(242,764,ls),
(229,762,o),
(198,762,o),
(186,764,qs),
(160,766,ls),
(146,767,o),
(117,770,o),
(73,770,o),
(61,759,qs),
(56,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(70,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,161,ls),
(156,94,o),
(147,70,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,3,qs),
(66,-1,o),
(83,-7,o),
(117,-7,o),
(133,-6,qs),
(181,-2,ls),
(213,0,o),
(247,0,qs),
(627,0,l),
(625,16,o),
(625,67,o),
(640,134,qs),
(646,162,o),
(655,180,o),
(655,185,qs),
(655,198,o),
(643,198,qs),
(634,198,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
1 0 63 60 55 54 53 52 47 46 43 42 38 37 32 31 30 29 22 21 20 19 14 13 10 8 0 67 1 67 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
13 1 0 5 12 5 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 15:51:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(306,3,qs),
(312,8,o),
(316,19,o),
(316,30,o),
(306,43,o),
(297,43,q),
(266,41,l),
(248,41,o),
(227,53,o),
(210,91,o),
(210,154,qs),
(210,544,l),
(246,490,o),
(401,232,qs),
(455,147,ls),
(476,114,o),
(489,97,o),
(497,97,qs),
(512,97,o),
(526,125,qs),
(784,617,l),
(779,154,ls),
(779,91,o),
(769,67,qs),
(758,41,o),
(725,41,q),
(693,43,l),
(674,43,o),
(674,21,qs),
(674,12,o),
(684,3,qs),
(689,-1,o),
(707,-7,o),
(743,-7,o),
(783,-4,qs),
(809,-1,ls),
(821,0,o),
(836,0,qs),
(852,0,o),
(864,-1,qs),
(891,-4,ls),
(904,-5,o),
(919,-6,qs),
(974,-11,o),
(990,3,qs),
(995,8,o),
(1000,19,o),
(1000,30,o),
(990,43,o),
(981,43,q),
(949,41,l),
(932,41,o),
(910,53,o),
(895,90,o),
(895,154,qs),
(895,607,ls),
(895,676,o),
(904,699,qs),
(914,723,o),
(946,723,q),
(978,719,l),
(986,719,o),
(996,733,o),
(996,751,o),
(986,760,qs),
(981,764,o),
(963,771,o),
(924,771,o),
(860,766,qs),
(826,763,o),
(783,763,q),
(526,264,l),
(208,762,l),
(165,762,o),
(125,766,qs),
(108,767,o),
(77,769,o),
(42,769,o),
(35,760,qs),
(32,756,o),
(29,747,o),
(29,738,o),
(44,730,o),
(70,717,o),
(102,694,o),
(127,657,o),
(146,613,o),
(146,568,qs),
(145,154,ls),
(145,87,o),
(138,67,qs),
(127,41,o),
(95,41,q),
(64,43,l),
(55,43,o),
(45,30,o),
(45,12,o),
(55,3,qs),
(60,-1,o),
(78,-7,o),
(108,-7,o),
(139,-4,qs),
(159,-1,ls),
(169,0,o),
(180,0,q),
(270,-7,l),
(293,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 0 0 106 0 106 101 100 99 98 89 87 81 80 79 78 73 72 69 67 64 63 57 56 55 54 47 46 45 44 39 38 36 35 33 32 30 28 14 13 12 11 6 5 2 1 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 59 values pushed */
94 85 34 3 17 8 1 33 0 17 8 2 8 17 2 53 9 1 8 8 4 1 0 39 7 6 5 3 4 4 12 34 19 18 16 15 11 10 3 7 2 2 0 1 2 39 21 20 14 13 12 1 6 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1033;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 15:51:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,3,qs),
(312,8,o),
(317,19,o),
(317,30,o),
(307,43,o),
(298,43,q),
(262,41,l),
(245,41,o),
(223,53,o),
(207,91,o),
(207,154,qs),
(207,565,l),
(724,5,l),
(759,-19,o),
(777,-19,qs),
(793,-19,o),
(793,-4,qs),
(793,4,o),
(786,9,qs),
(781,13,o),
(767,32,o),
(767,69,qs),
(769,608,ls),
(769,676,o),
(776,696,qs),
(786,723,o),
(818,723,q),
(851,719,l),
(859,719,o),
(869,733,o),
(869,750,o),
(859,759,qs),
(854,764,o),
(836,770,o),
(804,770,o),
(773,767,qs),
(754,764,ls),
(744,763,o),
(733,763,q),
(640,770,l),
(616,770,o),
(604,759,qs),
(598,754,o),
(593,744,o),
(593,733,o),
(604,719,o),
(612,719,q),
(648,723,l),
(665,723,o),
(687,710,o),
(703,672,o),
(703,608,qs),
(703,190,l),
(182,762,l),
(53,769,l),
(37,769,o),
(24,755,o),
(24,750,qs),
(24,735,o),
(53,722,qs),
(71,713,o),
(109,673,o),
(142,612,o),
(142,581,qs),
(142,154,ls),
(142,87,o),
(134,67,qs),
(124,41,o),
(91,41,q),
(60,43,l),
(41,43,o),
(41,21,qs),
(41,11,o),
(51,3,qs),
(56,-1,o),
(74,-7,o),
(104,-7,o),
(136,-4,qs),
(156,-1,ls),
(166,0,o),
(176,0,q),
(270,-7,l),
(293,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 82 0 82 77 76 75 74 68 66 56 55 54 53 48 47 44 43 42 41 36 35 34 33 28 26 14 13 12 11 6 5 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 13 12 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 16 12 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 16 15 2 12 12 13 12 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
70 29 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 16 15 1 3 0 0 13 34 0 12 12 13 12 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 15:51:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,41,qs),
(328,-11,o),
(445,-11,qs),
(557,-11,o),
(648,36,qs),
(744,85,o),
(796,173,qs),
(853,267,o),
(853,392,qs),
(853,495,o),
(802,584,qs),
(751,672,o),
(665,724,qs),
(574,777,o),
(464,777,qs),
(274,777,o),
(160,662,qs),
(106,607,o),
(48,457,o),
(48,387,qs),
(48,145,o)
);
},
{
closed = 1;
nodes = (
(229,635,qs),
(299,706,o),
(408,706,qs),
(540,706,o),
(634,602,qs),
(733,493,o),
(733,323,qs),
(733,195,o),
(664,125,qs),
(601,62,o),
(501,62,qs),
(414,62,o),
(337,104,qs),
(299,125,o),
(232,188,o),
(184,273,o),
(156,378,o),
(156,440,qs),
(156,561,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 35 29 27 18 16 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
kernLeft = H;
kernRight = P;
lastChange = "2025-07-10 15:51:49 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(610,354,qs),
(701,426,o),
(701,551,qs),
(701,655,o),
(640,713,qs),
(607,743,o),
(503,777,o),
(394,777,o),
(354,773,qs),
(340,772,o),
(314,768,o),
(286,765,o),
(252,762,o),
(205,762,o),
(167,766,qs),
(155,767,o),
(127,770,o),
(83,770,o),
(70,759,qs),
(65,754,o),
(61,744,o),
(61,731,o),
(71,719,o),
(80,719,q),
(104,722,l),
(123,722,o),
(148,707,o),
(166,667,o),
(166,602,qs),
(166,154,ls),
(166,91,o),
(156,67,qs),
(145,41,o),
(111,41,q),
(80,44,l),
(71,44,o),
(61,30,o),
(61,12,o),
(70,4,qs),
(76,0,o),
(104,-11,o),
(189,-1,qs),
(223,2,o),
(281,-3,qs),
(296,-5,o),
(329,-7,o),
(374,-7,o),
(389,4,qs),
(395,8,o),
(401,19,o),
(401,30,o),
(391,45,o),
(376,45,o),
(371,45,qs),
(360,43,ls),
(355,42,o),
(343,41,o),
(318,41,o),
(297,54,o),
(281,92,o),
(281,154,qs),
(281,308,l),
(347,290,o),
(396,290,qs),
(528,290,o)
);
},
{
closed = 1;
nodes = (
(459,695,qs),
(576,660,o),
(576,517,qs),
(576,445,o),
(535,402,qs),
(493,358,o),
(417,358,qs),
(343,358,o),
(281,392,q),
(281,650,ls),
(281,706,o),
(378,706,qs),
(422,706,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
66 65 1 0 71 69 65 77 66 77 57 56 51 50 47 46 41 40 39 38 31 30 29 28 19 17 12 11 7 6 0 64 1 64 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 68 values pushed */
68 1 12 11 2 1 0 12 2 33 0 12 13 1 0 1 12 0 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 14 1 11 11 8 1 0 39 10 9 2 8 8 12 34 5 4 2 3 1 1 3 1 0 39 0 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
kernLeft = O;
kernRight = Q;
lastChange = "2025-07-10 15:51:51 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,-77,qs),
(373,-64,ls),
(387,-55,o),
(422,-41,o),
(475,-41,o),
(498,-51,qs),
(511,-56,o),
(542,-84,qs),
(609,-148,o),
(666,-180,qs),
(698,-197,o),
(766,-215,o),
(855,-215,o),
(894,-190,qs),
(910,-179,o),
(927,-155,o),
(927,-138,o),
(920,-129,qs),
(917,-125,o),
(909,-120,o),
(898,-120,o),
(892,-124,qs),
(874,-135,ls),
(860,-142,o),
(837,-142,qs),
(784,-142,o),
(743,-105,qs),
(703,-72,ls),
(632,-13,o),
(541,0,q),
(678,29,o),
(763,129,qs),
(805,179,o),
(853,312,o),
(853,446,o),
(840,494,qs),
(813,592,o),
(743,664,qs),
(630,777,o),
(464,777,qs),
(275,777,o),
(160,660,qs),
(48,547,o),
(48,366,qs),
(48,210,o),
(142,110,qs),
(234,9,o),
(393,-6,q),
(358,-16,o),
(323,-44,o),
(323,-63,o),
(335,-80,o),
(351,-80,o)
);
},
{
closed = 1;
nodes = (
(229,636,qs),
(300,706,o),
(408,706,qs),
(540,706,o),
(634,603,qs),
(733,496,o),
(733,326,qs),
(733,196,o),
(664,126,qs),
(601,62,o),
(501,62,qs),
(414,62,o),
(337,104,qs),
(299,126,o),
(232,190,o),
(184,275,o),
(156,381,o),
(156,443,qs),
(156,563,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 69 67 61 59 0 52 0 52 48 47 40 39 32 31 28 26 13 11 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
22 4 2 4 6 1 33 8 1 5 4 2 4 5 2 53 0 2 1 4 2 1 51 0 6 0 4 5 6 4 1 0 41 0 1 0 3 1 3 1 0 40 0 7 7 0 1 0 39 0 0 0 12 7 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernLeft = H;
kernRight = R;
lastChange = "2025-07-10 15:51:52 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,53,o),
(271,90,o),
(271,154,qs),
(271,340,l),
(321,340,o),
(351,320,qs),
(366,310,o),
(391,278,o),
(434,203,o),
(510,83,o),
(553,45,qs),
(595,7,o),
(650,-1,qs),
(733,-15,o),
(771,5,qs),
(781,10,o),
(790,21,o),
(790,39,o),
(786,48,qs),
(783,55,o),
(769,56,q),
(741,50,l),
(711,50,o),
(684,68,qs),
(667,80,o),
(630,121,o),
(567,229,o),
(518,281,qs),
(489,313,o),
(442,339,q),
(450,339,ls),
(561,339,o),
(632,394,qs),
(710,455,o),
(710,563,qs),
(710,653,o),
(649,711,qs),
(618,741,o),
(517,777,o),
(416,777,o),
(273,765,qs),
(245,762,o),
(185,762,o),
(156,766,qs),
(144,767,o),
(116,769,o),
(73,769,o),
(60,758,qs),
(55,754,o),
(50,744,o),
(50,731,o),
(61,718,o),
(69,718,q),
(94,721,l),
(113,721,o),
(138,707,o),
(156,667,o),
(156,602,qs),
(156,154,ls),
(156,90,o),
(146,67,qs),
(134,41,o),
(101,41,q),
(69,43,l),
(61,43,o),
(50,30,o),
(50,11,o),
(60,3,qs),
(65,-1,o),
(83,-7,o),
(119,-7,o),
(159,-4,qs),
(185,-1,ls),
(198,0,o),
(229,0,o),
(255,-2,o),
(281,-5,o),
(311,-7,o),
(354,-7,o),
(367,3,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(366,43,o),
(357,43,q),
(326,41,l),
(309,41,o)
);
},
{
closed = 1;
nodes = (
(271,404,q),
(271,649,ls),
(271,666,o),
(280,688,o),
(315,706,o),
(381,706,qs),
(486,706,o),
(538,658,qs),
(563,636,o),
(585,575,o),
(585,500,o),
(571,472,qs),
(529,390,o),
(411,390,qs),
(358,390,ls),
(304,390,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
89 87 0 0 97 95 87 102 89 102 0 86 0 86 82 81 66 65 64 63 56 54 47 46 44 43 40 39 34 33 32 31 24 23 22 21 16 15 12 11 8 7 2 1 20 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
101 1 16 17 1 33 19 1 16 14 1 11 0 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 18 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
101 1 16 17 1 33 0 13 11 0 11 13 0 53 19 1 16 14 1 11 13 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 18 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 15:51:54 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,597,o),
(578,656,qs),
(569,692,o),
(567,764,qs),
(566,789,o),
(546,789,qs),
(538,789,o),
(522,769,qs),
(514,757,o),
(509,754,qs),
(506,751,o),
(502,750,o),
(500,750,o),
(489,755,qs),
(435,777,o),
(350,777,qs),
(222,777,o),
(149,710,qs),
(86,652,o),
(86,566,qs),
(86,486,o),
(147,429,qs),
(213,365,o),
(344,335,qs),
(452,311,o),
(497,262,qs),
(531,226,o),
(531,173,qs),
(531,57,o),
(359,57,qs),
(272,57,o),
(201,112,qs),
(124,172,o),
(114,265,qs),
(109,294,o),
(95,294,qs),
(75,294,o),
(75,235,qs),
(75,62,l),
(130,36,ls),
(231,-11,o),
(363,-11,qs),
(492,-11,o),
(565,49,qs),
(638,109,o),
(638,211,qs),
(638,299,o),
(575,356,qs),
(542,387,o),
(437,435,o),
(262,480,o),
(223,522,qs),
(190,556,o),
(190,607,qs),
(190,648,o),
(224,675,qs),
(263,706,o),
(336,706,qs),
(415,706,o),
(468,678,qs),
(495,664,o),
(539,618,o),
(562,572,o),
(571,558,o),
(578,558,qs),
(592,558,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 60 58 53 52 50 48 36 34 30 28 24 22 8 6 0 65 1 65 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
26 1 4 3 1 33 0 6 5 1 5 6 1 53 8 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-10 15:51:55 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,599,o),
(101,635,o),
(147,669,o),
(183,678,o),
(189,680,qs),
(232,694,o),
(329,694,q),
(329,164,ls),
(329,99,o),
(318,72,qs),
(313,56,o),
(291,41,o),
(265,41,o),
(249,43,qs),
(244,43,o),
(234,45,o),
(218,45,o),
(208,30,o),
(208,12,o),
(221,3,qs),
(227,-1,o),
(246,-7,o),
(286,-7,o),
(328,-4,qs),
(356,-1,ls),
(370,0,o),
(386,0,qs),
(402,0,o),
(416,-1,qs),
(444,-4,ls),
(458,-5,o),
(491,-7,o),
(536,-7,o),
(551,3,qs),
(558,8,o),
(563,19,o),
(563,30,o),
(554,45,o),
(539,45,o),
(526,43,o),
(512,41,qs),
(506,41,o),
(481,41,o),
(459,57,o),
(443,100,o),
(443,164,qs),
(443,693,l),
(616,693,o),
(649,635,qs),
(655,625,o),
(662,601,o),
(667,570,o),
(680,570,qs),
(692,570,o),
(699,604,qs),
(704,629,o),
(717,675,qs),
(725,700,o),
(742,752,o),
(756,786,o),
(748,791,qs),
(745,792,o),
(739,793,o),
(731,793,o),
(719,784,o),
(688,762,o),
(657,762,qs),
(163,762,ls),
(149,762,o),
(118,764,o),
(110,773,qs),
(95,793,o),
(85,793,qs),
(79,793,o),
(69,783,o),
(61,730,o),
(49,697,qs),
(40,672,ls),
(35,660,o),
(28,634,o),
(24,606,o),
(24,572,o),
(36,572,qs),
(42,572,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 0 77 76 71 70 67 66 61 60 57 55 53 52 51 50 45 44 41 40 36 35 31 29 20 19 17 13 11 9 0 83 1 83 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
4 15 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
4 15 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 15:51:56 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,0,o),
(768,-1,o),
(778,-2,qs),
(800,-4,ls),
(810,-4,o),
(844,-4,o),
(857,7,qs),
(863,11,o),
(867,22,o),
(867,33,o),
(857,44,o),
(845,44,o),
(831,39,o),
(803,39,o),
(783,51,o),
(770,89,o),
(770,173,qs),
(769,608,ls),
(769,636,o),
(771,657,qs),
(776,722,o),
(823,722,q),
(855,719,l),
(874,719,o),
(874,741,qs),
(874,750,o),
(864,759,qs),
(859,763,o),
(841,770,o),
(805,770,o),
(765,766,qs),
(739,764,ls),
(727,762,o),
(696,762,o),
(683,764,qs),
(657,766,ls),
(644,767,o),
(614,770,o),
(571,770,o),
(558,759,qs),
(553,754,o),
(548,744,o),
(548,732,o),
(558,719,o),
(567,719,q),
(599,722,l),
(616,722,o),
(637,709,o),
(653,671,o),
(653,608,qs),
(653,135,l),
(567,62,o),
(361,62,o),
(306,111,qs),
(248,165,o),
(248,263,qs),
(248,608,ls),
(248,672,o),
(257,695,qs),
(269,722,o),
(302,722,q),
(334,719,l),
(343,719,o),
(353,732,o),
(353,750,o),
(343,759,qs),
(338,763,o),
(320,770,o),
(283,770,o),
(244,766,qs),
(218,764,ls),
(205,762,o),
(190,762,qs),
(175,762,o),
(162,764,qs),
(136,766,ls),
(123,767,o),
(92,770,o),
(49,770,o),
(37,759,qs),
(32,754,o),
(27,744,o),
(27,732,o),
(37,719,o),
(46,719,q),
(78,722,l),
(95,722,o),
(116,709,o),
(133,671,o),
(133,608,qs),
(133,272,ls),
(133,138,o),
(213,64,qs),
(293,-11,o),
(443,-11,qs),
(556,-11,o),
(654,56,q),
(658,-3,o),
(689,-3,q),
(743,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
1 0 97 96 95 93 88 87 86 85 78 77 76 75 70 69 66 65 61 60 55 54 53 52 47 46 39 38 37 36 31 30 27 25 21 20 15 14 13 12 5 3 0 99 1 98 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 69 values pushed */
48 1 9 2 2 1 17 9 2 33 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 21 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 21 4 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
lastChange = "2025-07-10 15:51:57 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(862,740,qs),
(862,750,o),
(838,769,o),
(822,769,q),
(741,762,l),
(722,762,o),
(664,769,o),
(604,769,o),
(581,749,o),
(581,731,o),
(591,719,o),
(600,719,q),
(642,723,l),
(668,723,o),
(668,705,qs),
(668,663,o),
(648,618,qs),
(466,224,l),
(455,196,o),
(451,196,qs),
(449,196,o),
(440,201,o),
(423,242,q),
(244,637,ls),
(224,682,o),
(224,700,qs),
(224,723,o),
(254,723,q),
(292,719,l),
(311,719,o),
(311,738,qs),
(311,750,o),
(285,769,o),
(260,769,q),
(129,762,l),
(101,762,o),
(55,769,o),
(10,769,o),
(-3,759,qs),
(-9,754,o),
(-15,743,o),
(-15,730,o),
(-4,718,o),
(4,718,q),
(31,722,l),
(39,722,o),
(54,715,o),
(81,685,o),
(108,623,qs),
(319,166,ls),
(368,59,o),
(420,13,qs),
(441,-7,o),
(474,-19,o),
(497,-19,o),
(497,-9,qs),
(497,-5,o),
(493,-2,q),
(481,6,ls),
(474,12,o),
(474,24,qs),
(474,50,o),
(509,134,qs),
(711,588,ls),
(750,671,o),
(777,704,qs),
(792,722,o),
(816,722,q),
(844,718,l),
(862,718,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 0 69 0 69 66 65 64 63 62 61 58 57 56 55 50 48 42 41 40 39 36 33 32 31 26 25 24 23 15 14 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 12 34 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-10 15:51:58 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(852,740,qs),
(852,750,o),
(828,769,o),
(812,769,q),
(731,762,l),
(712,762,o),
(654,769,o),
(594,769,o),
(571,749,o),
(571,731,o),
(581,719,o),
(590,719,q),
(632,723,l),
(658,723,o),
(658,705,qs),
(658,663,o),
(638,618,qs),
(456,224,l),
(445,196,o),
(441,196,qs),
(439,196,o),
(430,201,o),
(413,242,q),
(234,637,ls),
(214,682,o),
(214,700,qs),
(214,723,o),
(244,723,q),
(282,719,l),
(301,719,o),
(301,738,qs),
(301,750,o),
(275,769,o),
(250,769,q),
(119,762,l),
(91,762,o),
(45,769,o),
(0,769,o),
(-13,759,qs),
(-19,754,o),
(-25,743,o),
(-25,730,o),
(-14,718,o),
(-6,718,q),
(21,722,l),
(29,722,o),
(44,715,o),
(71,685,o),
(98,623,qs),
(309,166,ls),
(358,59,o),
(410,13,qs),
(431,-7,o),
(464,-19,o),
(487,-19,o),
(487,-9,qs),
(487,-5,o),
(483,-2,q),
(471,6,ls),
(464,12,o),
(464,24,qs),
(464,50,o),
(499,134,qs),
(701,588,ls),
(740,671,o),
(767,704,qs),
(782,722,o),
(806,722,q),
(834,718,l),
(852,718,o)
);
}
);
};
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,-9,qs),
(459,25,o),
(502,146,qs),
(611,448,l),
(720,140,ls),
(746,69,o),
(804,21,qs),
(827,1,o),
(868,-19,o),
(877,-19,qs),
(896,-19,o),
(896,2,qs),
(896,8,o),
(885,16,qs),
(881,19,o),
(875,27,o),
(875,48,o),
(894,100,qs),
(938,220,l),
(1065,588,ls),
(1097,678,o),
(1119,704,qs),
(1130,717,o),
(1152,722,o),
(1165,722,q),
(1192,719,l),
(1201,719,o),
(1211,731,o),
(1211,750,o),
(1199,760,qs),
(1193,764,o),
(1178,770,o),
(1148,770,o),
(1109,762,o),
(1071,762,o),
(1015,770,o),
(955,770,o),
(931,749,o),
(931,731,o),
(941,719,o),
(950,719,q),
(988,724,l),
(1019,724,o),
(1019,686,o),
(998,627,qs),
(855,213,ls),
(849,196,o),
(846,190,qs),
(839,179,o),
(823,194,qs),
(815,202,o),
(806,230,qs),
(672,638,ls),
(655,691,o),
(655,704,qs),
(655,713,o),
(667,723,o),
(684,723,q),
(721,719,l),
(740,719,o),
(740,739,qs),
(740,750,o),
(714,770,o),
(672,770,o),
(657,769,qs),
(599,764,ls),
(584,762,o),
(568,762,q),
(475,770,l),
(453,770,o),
(439,759,qs),
(434,754,o),
(428,744,o),
(428,731,o),
(438,719,o),
(447,719,q),
(475,722,l),
(485,722,o),
(502,716,o),
(529,687,o),
(551,623,q),
(574,566,l),
(448,208,ls),
(438,180,o),
(425,180,qs),
(420,180,o),
(410,190,qs),
(401,198,o),
(391,226,qs),
(222,638,ls),
(202,687,o),
(202,701,qs),
(202,723,o),
(233,723,q),
(271,719,l),
(289,719,o),
(289,739,qs),
(289,750,o),
(264,770,o),
(222,770,o),
(207,769,qs),
(147,764,ls),
(133,762,o),
(89,762,o),
(42,770,o),
(-2,770,o),
(-15,759,qs),
(-21,754,o),
(-26,744,o),
(-26,731,o),
(-17,719,o),
(-7,719,q),
(20,722,l),
(27,722,o),
(35,718,qs),
(59,705,o),
(97,621,q),
(289,165,ls),
(322,87,o),
(331,58,qs),
(335,43,o),
(340,23,o),
(340,8,o),
(332,2,qs),
(327,-1,o),
(327,-8,qs),
(327,-17,o),
(334,-17,qs),
(351,-17,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
1 0 119 117 104 103 102 101 96 95 94 93 92 91 88 87 86 85 71 70 69 68 65 63 61 60 59 58 53 52 51 50 44 42 35 34 33 32 29 27 25 24 23 22 17 16 15 14 0 128 1 128 25 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
124 46 2 8 1 1 33 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 24 2 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
124 46 2 8 1 1 33 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 24 2 0 0 16 0 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1167;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
lastChange = "2025-07-10 15:52:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,-7,o),
(247,-7,o),
(270,13,o),
(270,31,o),
(260,43,o),
(252,43,q),
(214,39,l),
(183,39,o),
(183,57,qs),
(183,82,o),
(260,176,q),
(375,308,l),
(523,120,ls),
(552,82,o),
(552,57,qs),
(552,40,o),
(501,40,o),
(494,41,qs),
(491,42,o),
(487,43,o),
(483,43,qs),
(465,43,o),
(465,24,qs),
(465,12,o),
(490,-7,o),
(515,-7,q),
(646,0,l),
(676,0,o),
(721,-7,o),
(767,-7,o),
(790,14,o),
(790,31,o),
(780,44,o),
(771,44,q),
(744,41,l),
(738,41,o),
(734,42,qs),
(722,44,o),
(706,67,qs),
(461,398,l),
(668,665,ls),
(691,692,o),
(721,722,o),
(732,722,q),
(760,719,l),
(779,719,o),
(779,741,qs),
(779,750,o),
(755,770,o),
(716,770,o),
(677,762,o),
(639,762,o),
(587,770,o),
(528,770,o),
(505,749,o),
(505,731,o),
(515,719,o),
(523,719,q),
(561,724,l),
(592,724,o),
(592,706,qs),
(592,667,o),
(525,585,qs),
(417,454,l),
(253,681,ls),
(243,695,o),
(243,705,qs),
(243,723,o),
(274,723,q),
(312,719,l),
(330,719,o),
(330,739,qs),
(330,750,o),
(305,770,o),
(280,770,q),
(149,762,l),
(132,762,o),
(74,769,qs),
(63,770,o),
(51,770,qs),
(40,770,o),
(31,767,qs),
(5,758,o),
(5,739,qs),
(5,719,o),
(24,719,q),
(51,722,o),
(51,722,q),
(63,722,o),
(77,711,o),
(88,696,qs),
(331,369,l),
(102,93,ls),
(60,41,o),
(37,41,q),
(9,44,l),
(1,44,o),
(-9,31,o),
(-9,12,o),
(15,-7,o),
(31,-7,q),
(112,0,l),
(130,0,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 0 0 102 0 102 101 100 97 96 95 94 86 85 82 80 77 74 73 72 69 68 67 66 59 58 57 56 53 52 51 50 49 48 45 44 43 42 34 33 32 31 28 25 23 21 17 16 14 13 8 7 6 5 2 1 27 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
90 62 38 10 4 1 3 1 33 15 14 10 9 8 7 4 7 3 3 5 1 0 39 13 12 11 6 4 5 5 12 34 23 22 21 20 17 16 2 7 1 1 0 1 2 39 26 25 24 19 18 5 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 766;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-10 15:52:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(776,734,o),
(776,748,qs),
(776,769,o),
(736,769,q),
(655,762,l),
(636,762,o),
(581,769,o),
(521,769,o),
(498,753,o),
(498,736,o),
(507,719,o),
(516,719,q),
(553,723,l),
(584,723,o),
(584,685,o),
(550,635,qs),
(402,404,l),
(230,655,l),
(209,691,o),
(209,705,qs),
(209,723,o),
(240,723,q),
(278,719,l),
(283,719,o),
(296,729,o),
(296,743,qs),
(296,769,o),
(246,769,q),
(115,762,l),
(17,769,l),
(-6,769,o),
(-29,753,o),
(-29,735,o),
(-19,718,o),
(-10,718,q),
(17,722,l),
(47,722,o),
(59,705,qs),
(322,328,l),
(322,161,ls),
(322,97,o),
(312,74,qs),
(306,61,o),
(285,48,o),
(258,48,o),
(242,50,qs),
(237,51,o),
(227,52,o),
(211,52,o),
(202,38,o),
(202,21,o),
(214,11,qs),
(220,6,o),
(248,-3,o),
(321,4,qs),
(350,6,ls),
(363,7,o),
(379,7,qs),
(396,7,o),
(409,6,qs),
(438,4,ls),
(452,2,o),
(484,0,o),
(529,0,o),
(544,11,qs),
(551,16,o),
(557,26,o),
(557,38,o),
(547,52,o),
(532,52,o),
(521,51,o),
(511,49,o),
(500,48,o),
(474,48,o),
(453,61,o),
(437,98,o),
(437,161,qs),
(437,331,l),
(686,705,l),
(699,722,o),
(725,722,qs),
(757,723,ls),
(762,723,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
2 0 79 78 77 76 75 74 71 70 69 68 61 60 59 58 55 51 48 47 46 45 38 37 34 33 27 26 25 23 22 21 19 18 13 12 9 8 0 82 2 82 20 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 50 values pushed */
65 43 4 3 1 0 1 33 15 14 13 12 10 9 19 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
kernLeft = Z;
kernRight = Z;
lastChange = "2025-07-10 15:52:02 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(670,83,o),
(699,145,q),
(699,145,l),
(713,173,o),
(713,185,qs),
(713,203,o),
(693,203,qs),
(686,203,o),
(671,187,qs),
(595,107,o),
(559,86,qs),
(519,63,o),
(455,63,qs),
(220,62,l),
(684,715,ls),
(696,731,o),
(696,746,qs),
(696,762,o),
(667,762,qs),
(214,762,ls),
(170,762,o),
(160,773,q),
(146,793,o),
(135,793,qs),
(129,793,o),
(119,783,o),
(108,717,o),
(90,662,qs),
(83,640,o),
(74,607,o),
(74,582,o),
(85,582,qs),
(90,582,o),
(100,589,o),
(126,621,o),
(151,642,qs),
(166,653,o),
(201,675,o),
(261,699,o),
(331,699,qs),
(529,699,l),
(71,54,ls),
(55,32,o),
(55,22,qs),
(55,0,o),
(93,0,qs),
(650,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 44 43 40 38 34 32 28 25 23 21 15 13 7 5 0 46 1 46 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 8 1 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,-88,qs),
(214,-85,o),
(214,-75,qs),
(214,779,ls),
(214,784,o),
(216,788,qs),
(221,797,o),
(269,797,q),
(334,792,l),
(344,792,o),
(354,808,o),
(354,819,o),
(351,824,qs),
(339,845,o),
(303,845,qs),
(126,845,ls),
(100,845,o),
(100,815,qs),
(100,-110,ls),
(100,-127,o),
(110,-141,o),
(123,-141,qs),
(303,-141,ls),
(326,-141,o),
(341,-130,qs),
(348,-125,o),
(354,-115,o),
(354,-104,o),
(344,-88,o),
(334,-88,q),
(269,-93,l),
(234,-93,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
0 0 0 31 0 31 24 23 22 21 17 14 10 7 2 1 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (44,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (492,0);
ref = slash;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 1 1 15 1 15 9 8 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 0 1 56 0 0 0 14 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (63,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (417,0);
ref = bracketleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 1 1 32 1 32 25 24 23 22 18 15 11 8 3 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,479,l),
(275,665,l),
(401,479,l),
(490,479,l),
(293,775,l),
(261,775,l),
(66,479,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
6 5 3 2 1 0 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
4 1 1 0 1 33 2 1 1 0 1 56 0 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,-85,o),
(-49,-104,o),
(-49,-138,o),
(-28,-157,o),
(-11,-157,qs),
(674,-157,ls),
(691,-157,o),
(712,-138,o),
(712,-104,o),
(690,-85,o),
(673,-85,qs),
(-10,-85,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 7 4 0 11 1 10 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,619,qs),
(143,721,ls),
(105,773,o),
(75,779,qs),
(28,790,o),
(12,759,qs),
(-1,732,o),
(22,699,qs),
(33,685,o),
(73,662,qs),
(188,596,ls),
(202,587,o),
(211,587,qs),
(217,586,o),
(225,596,o),
(226,608,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 2 1 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 5 values pushed */
0 0 0 46 1
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
lastChange = "2025-07-10 15:54:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(603,-4,l),
(628,-4,o),
(642,7,qs),
(647,11,o),
(651,22,o),
(651,32,o),
(641,46,o),
(633,46,q),
(605,42,l),
(589,42,o),
(568,49,o),
(551,85,o),
(551,173,qs),
(551,314,ls),
(551,409,o),
(506,455,qs),
(479,482,o),
(387,514,o),
(266,514,o),
(196,497,q),
(193,497,o),
(173,509,qs),
(159,518,o),
(140,518,qs),
(121,518,o),
(121,493,qs),
(121,430,o),
(108,390,qs),
(103,371,o),
(103,362,qs),
(103,347,o),
(131,347,o),
(154,378,qs),
(184,419,o),
(218,434,qs),
(234,440,o),
(269,445,o),
(320,445,o),
(348,439,qs),
(437,422,o),
(437,326,qs),
(437,270,l),
(369,306,o),
(285,306,qs),
(198,306,o),
(140,270,qs),
(72,228,o),
(72,147,qs),
(72,73,o),
(124,31,qs),
(150,11,o),
(228,-12,o),
(302,-12,o),
(324,-8,qs),
(396,6,o),
(438,48,q),
(443,-3,o),
(472,-3,q),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(389,57,o),
(314,57,qs),
(254,57,o),
(187,107,o),
(187,158,qs),
(187,177,o),
(195,192,qs),
(223,245,o),
(314,245,qs),
(379,245,o),
(437,208,q),
(437,116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 69 67 62 60 51 50 49 48 40 39 38 37 35 33 27 26 21 20 15 13 6 5 0 58 1 56 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
16 1 10 2 70 59 2 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 12 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 87 values pushed */
16 1 10 2 70 59 2 11 10 2 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 12 2 0 0 13 34 9 1 8 8 0 1 0 39 1 12 2 0 0 13 0 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
kernRight = o;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,1,qs),
(164,12,ls),
(178,17,o),
(202,17,o),
(219,12,qs),
(273,-2,ls),
(312,-12,o),
(354,-12,qs),
(472,-12,o),
(550,67,qs),
(627,146,o),
(627,259,qs),
(627,374,o),
(554,444,qs),
(481,514,o),
(362,514,qs),
(268,514,o),
(211,466,q),
(211,781,ls),
(211,823,o),
(206,835,qs),
(203,841,o),
(190,845,o),
(174,845,o),
(139,838,o),
(103,838,qs),
(88,838,o),
(57,841,qs),
(37,843,ls),
(27,844,o),
(0,844,o),
(-15,828,o),
(-15,821,qs),
(-15,800,o),
(21,797,qs),
(40,795,o),
(72,782,o),
(95,743,o),
(95,658,qs),
(95,146,ls),
(95,82,o),
(91,59,qs),
(88,45,o),
(80,31,o),
(54,11,o),
(54,1,qs),
(54,-15,o),
(71,-15,qs),
(83,-15,o)
);
},
{
closed = 1;
nodes = (
(219,392,o),
(232,404,qs),
(272,440,o),
(328,440,qs),
(407,440,o),
(454,391,qs),
(505,336,o),
(505,230,qs),
(505,150,o),
(459,106,qs),
(413,62,o),
(328,62,qs),
(243,62,o),
(211,125,q),
(211,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 60 58 52 50 45 44 41 39 33 31 25 24 23 21 18 17 0 48 1 48 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
30 1 8 4 63 49 2 7 8 2 33 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 9 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
metricRight = o;
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = o;
kernRight = c;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,383,qs),
(521,406,o),
(518,433,qs),
(517,446,o),
(517,476,o),
(517,514,o),
(500,514,qs),
(495,514,o),
(487,511,qs),
(472,503,ls),
(463,500,o),
(446,493,o),
(434,493,o),
(426,496,qs),
(388,514,o),
(331,514,qs),
(251,514,o),
(183,476,qs),
(151,458,o),
(100,408,o),
(64,349,o),
(45,285,o),
(45,193,o),
(66,145,qs),
(108,47,o),
(211,8,qs),
(316,-32,o),
(415,9,qs),
(439,19,o),
(481,45,o),
(513,75,o),
(532,106,o),
(532,128,o),
(517,143,o),
(492,140,o),
(479,122,qs),
(437,62,o),
(351,62,qs),
(274,62,o),
(222,120,qs),
(166,181,o),
(166,280,qs),
(166,358,o),
(212,401,qs),
(233,421,o),
(288,440,o),
(376,440,o),
(409,429,qs),
(430,422,o),
(469,396,o),
(508,346,o),
(521,346,qs),
(535,346,o),
(535,361,qs),
(535,370,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 42 41 39 37 17 15 8 7 3 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 38 values pushed */
0 2 0 2 56 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
metricLeft = o;
note = c;
unicode = 99;
},
{
glyphname = d;
kernLeft = o;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(483,-3,q),
(537,0,ls),
(542,0,o),
(561,-1,o),
(572,-2,qs),
(594,-4,ls),
(604,-4,o),
(637,-4,o),
(651,7,qs),
(656,11,o),
(660,22,o),
(660,33,o),
(650,42,o),
(642,42,q),
(614,38,l),
(597,38,o),
(577,50,o),
(564,88,o),
(564,173,qs),
(564,781,ls),
(564,824,o),
(558,835,qs),
(555,841,o),
(543,845,o),
(527,845,o),
(517,843,o),
(511,842,qs),
(481,839,ls),
(470,838,o),
(441,838,o),
(410,841,qs),
(400,842,o),
(380,844,o),
(353,844,o),
(338,828,o),
(338,821,qs),
(338,800,o),
(373,797,qs),
(392,795,o),
(424,783,o),
(448,742,o),
(448,659,qs),
(448,487,l),
(390,514,o),
(316,514,qs),
(201,514,o),
(122,438,qs),
(45,362,o),
(45,252,qs),
(45,132,o),
(119,62,qs),
(154,27,o),
(256,-11,o),
(391,-11,o),
(452,26,q),
(462,-3,o)
);
},
{
closed = 1;
nodes = (
(264,62,o),
(214,119,qs),
(163,178,o),
(163,277,qs),
(163,353,o),
(205,396,qs),
(247,440,o),
(323,440,qs),
(405,440,o),
(448,385,q),
(448,98,l),
(409,62,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
67 66 60 58 55 52 51 50 49 47 42 41 40 39 31 30 26 25 22 21 11 9 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
12 1 10 1 57 56 2 11 10 0 1 0 5 3 33 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
metricLeft = o;
note = d;
unicode = 100;
},
{
glyphname = e;
kernLeft = o;
kernRight = e;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,-12,o),
(388,-12,o),
(494,33,o),
(527,77,qs),
(546,102,o),
(546,121,qs),
(546,125,o),
(544,129,qs),
(537,146,o),
(526,146,qs),
(509,146,o),
(494,124,qs),
(485,111,o),
(469,100,qs),
(420,62,o),
(361,62,qs),
(292,62,o),
(242,96,qs),
(185,135,o),
(168,206,q),
(254,227,ls),
(406,263,o),
(531,308,qs),
(546,313,o),
(551,325,qs),
(554,330,o),
(555,340,o),
(555,359,o),
(535,395,qs),
(506,443,o),
(463,473,qs),
(403,514,o),
(323,514,qs),
(203,514,o),
(121,434,qs),
(85,397,o),
(45,303,o),
(45,189,o),
(89,92,o),
(165,24,o)
);
},
{
closed = 1;
nodes = (
(161,276,qs),
(161,285,ls),
(161,371,o),
(223,411,qs),
(268,440,o),
(319,440,qs),
(371,440,o),
(404,410,qs),
(418,396,o),
(432,366,o),
(432,349,o),
(431,346,qs),
(425,337,o),
(301,304,qs),
(162,268,l),
(161,272,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
50 48 38 37 30 28 24 22 7 5 5 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
19 1 2 4 1 33 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
metricLeft = o;
note = e;
unicode = 101;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
lastChange = "2025-07-10 15:54:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,-5,o),
(148,-2,o),
(204,2,o),
(260,-4,qs),
(271,-5,o),
(282,-6,qs),
(328,-11,o),
(350,2,qs),
(357,7,o),
(366,18,o),
(366,30,o),
(356,44,o),
(348,44,q),
(314,40,l),
(280,40,o),
(269,63,qs),
(255,92,o),
(255,174,qs),
(255,442,l),
(347,440,ls),
(375,440,o),
(391,454,qs),
(397,459,o),
(402,473,o),
(402,484,o),
(400,490,qs),
(394,514,o),
(359,514,qs),
(255,511,l),
(255,638,ls),
(255,721,o),
(281,762,qs),
(294,782,o),
(328,800,o),
(369,800,o),
(388,780,qs),
(399,770,o),
(420,734,o),
(433,693,o),
(441,686,o),
(448,686,qs),
(462,686,o),
(462,703,qs),
(462,845,l),
(406,858,o),
(312,858,o),
(271,842,qs),
(140,789,o),
(140,557,qs),
(140,512,l),
(133,513,o),
(125,513,qs),
(95,514,ls),
(87,514,o),
(62,514,o),
(44,492,o),
(44,465,o),
(54,454,qs),
(59,448,o),
(79,440,o),
(108,439,o),
(140,440,q),
(140,174,ls),
(140,138,o),
(137,112,qs),
(128,40,o),
(88,40,q),
(64,43,l),
(56,43,o),
(45,30,o),
(45,22,qs),
(45,-7,o),
(95,-7,qs),
(105,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 61 60 59 58 54 52 46 44 39 38 33 31 28 27 22 18 13 11 7 6 5 4 0 73 1 73 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
29 1 7 5 23 1 3 4 2 33 0 6 7 4 7 6 4 53 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 11 10 2 3 1 1 0 1 0 39 12 1 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
lastChange = "2025-07-10 15:54:51 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,-38,qs),
(55,-73,o),
(55,-125,qs),
(55,-179,o),
(112,-213,qs),
(179,-252,o),
(313,-252,qs),
(443,-252,o),
(521,-208,qs),
(596,-164,o),
(596,-93,qs),
(596,-32,o),
(540,1,qs),
(510,19,o),
(415,42,o),
(253,52,o),
(214,65,qs),
(195,72,o),
(195,87,qs),
(195,99,o),
(218,109,qs),
(229,114,o),
(267,121,o),
(299,121,o),
(310,121,o),
(316,120,q),
(422,123,o),
(490,186,qs),
(558,248,o),
(558,341,qs),
(558,412,o),
(499,458,q),
(556,460,o),
(620,493,o),
(620,518,qs),
(620,528,o),
(606,544,o),
(576,544,o),
(557,532,qs),
(539,521,ls),
(501,497,o),
(434,496,q),
(384,514,o),
(329,514,qs),
(209,514,o),
(136,459,qs),
(101,433,o),
(62,359,o),
(62,288,o),
(68,264,qs),
(91,184,o),
(177,145,q),
(138,131,o),
(97,85,o),
(97,62,qs),
(97,14,o),
(162,-16,q),
(133,-25,o)
);
},
{
closed = 1;
nodes = (
(186,388,qs),
(211,440,o),
(297,440,qs),
(358,440,o),
(396,404,qs),
(442,361,o),
(442,280,qs),
(442,189,o),
(326,189,qs),
(176,189,o),
(176,345,qs),
(176,370,o)
);
},
{
closed = 1;
nodes = (
(202,-50,o),
(240,-39,q),
(387,-44,o),
(453,-73,qs),
(482,-85,o),
(505,-115,o),
(505,-143,o),
(489,-164,o),
(436,-185,o),
(353,-185,qs),
(163,-185,o),
(163,-109,qs),
(163,-89,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
80 79 73 71 67 65 61 59 51 49 42 41 34 32 31 30 25 24 20 19 16 15 14 12 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 75 values pushed */
5 1 4 8 0 1 11 6 2 33 0 2 0 2 55 0 3 1 9 1 3 9 53 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
kernLeft = h;
kernRight = n;
lastChange = "2025-07-10 16:30:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,22,qs),
(366,30,o),
(355,43,o),
(347,43,q),
(323,40,l),
(309,40,o),
(288,47,o),
(268,86,o),
(268,167,qs),
(268,347,l),
(296,383,o),
(333,406,qs),
(351,417,o),
(392,431,o),
(444,431,o),
(484,408,o),
(514,359,o),
(514,306,qs),
(514,167,ls),
(514,92,o),
(495,40,o),
(466,40,q),
(440,43,l),
(431,43,o),
(421,30,o),
(421,18,o),
(423,13,qs),
(431,-7,o),
(473,-7,q),
(576,0,l),
(592,0,o),
(648,-6,qs),
(693,-11,o),
(711,3,qs),
(716,8,o),
(720,18,o),
(720,30,o),
(711,43,o),
(703,43,q),
(677,40,l),
(665,40,o),
(647,49,o),
(629,89,o),
(629,167,qs),
(629,334,ls),
(629,382,o),
(617,417,qs),
(581,514,o),
(458,514,qs),
(349,514,o),
(268,427,q),
(268,781,ls),
(268,824,o),
(263,835,qs),
(260,841,o),
(248,845,o),
(229,845,o),
(216,842,qs),
(186,839,ls),
(174,838,o),
(146,838,o),
(114,841,qs),
(94,843,ls),
(84,844,o),
(58,844,o),
(42,828,o),
(42,821,qs),
(42,800,o),
(78,797,qs),
(96,795,o),
(128,783,o),
(152,742,o),
(152,660,qs),
(152,167,ls),
(152,95,o),
(140,67,qs),
(128,40,o),
(101,40,q),
(77,43,l),
(68,43,o),
(58,30,o),
(58,11,o),
(67,3,qs),
(73,-1,o),
(92,-7,o),
(118,-7,o),
(178,0,o),
(209,0,q),
(314,-7,l),
(366,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 0 86 85 84 83 75 74 68 67 66 65 61 58 51 50 49 48 41 39 33 32 29 28 25 24 12 11 10 9 4 3 0 89 2 89 17 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 50 values pushed */
79 38 2 2 13 1 33 6 5 2 4 4 14 34 0 13 13 7 1 0 39 0 7 7 15 34 15 14 12 11 9 8 3 7 2 2 0 1 2 39 10 1 16 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
metricRight = n;
note = h;
unicode = 104;
},
{
glyphname = i;
kernLeft = i;
kernRight = i;
lastChange = "2025-07-10 16:31:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,663,o),
(267,708,o),
(249,729,qs),
(240,740,o),
(212,753,o),
(161,753,o),
(140,731,qs),
(130,721,o),
(119,693,o),
(119,646,o),
(136,626,qs),
(145,615,o),
(173,602,o),
(209,602,o),
(237,615,o),
(257,636,o)
);
},
{
closed = 1;
nodes = (
(359,22,qs),
(359,30,o),
(349,43,o),
(341,43,q),
(317,40,l),
(302,40,o),
(282,50,o),
(262,92,o),
(262,174,qs),
(262,438,ls),
(262,478,o),
(250,493,qs),
(243,500,o),
(223,500,q),
(149,495,l),
(78,500,l),
(60,500,o),
(52,491,qs),
(49,487,o),
(46,479,o),
(46,465,o),
(65,456,o),
(91,448,o),
(118,438,o),
(130,421,o),
(134,413,qs),
(146,387,o),
(146,318,qs),
(146,174,ls),
(146,138,o),
(143,112,qs),
(135,40,o),
(95,40,q),
(71,43,l),
(62,43,o),
(52,30,o),
(52,11,o),
(61,3,qs),
(67,-1,o),
(86,-7,o),
(112,-7,o),
(172,0,o),
(203,0,q),
(308,-7,l),
(359,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
18 16 57 56 55 54 47 46 44 43 28 27 26 25 20 19 16 60 18 60 10 9 2 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
45 1 4 6 1 33 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
45 1 4 6 1 33 0 0 0 1 1 0 39 0 1 1 12 34 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
45 1 4 6 1 33 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 10 2 2 2 13 2 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
metricLeft = n;
note = i;
unicode = 105;
},
{
glyphname = j;
kernLeft = j;
kernRight = j;
lastChange = "2025-07-10 16:31:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,663,o),
(290,708,o),
(271,729,qs),
(263,740,o),
(235,753,o),
(183,753,o),
(162,731,qs),
(152,721,o),
(141,693,o),
(141,646,o),
(158,626,qs),
(167,615,o),
(195,602,o),
(232,602,o),
(260,615,o),
(279,636,o)
);
},
{
closed = 1;
nodes = (
(16,-252,o),
(59,-252,qs),
(162,-252,o),
(219,-183,qs),
(283,-105,o),
(283,51,qs),
(283,438,ls),
(283,479,o),
(275,493,qs),
(271,500,o),
(252,500,q),
(170,495,l),
(151,495,o),
(127,498,qs),
(119,499,o),
(105,500,o),
(81,500,o),
(72,491,qs),
(69,487,o),
(66,479,o),
(66,465,o),
(85,456,o),
(136,441,o),
(145,429,qs),
(166,397,o),
(166,311,qs),
(166,51,ls),
(166,-93,o),
(142,-147,qs),
(131,-173,o),
(100,-189,o),
(58,-189,o),
(34,-170,qs),
(18,-158,o),
(-1,-117,qs),
(-13,-95,o),
(-27,-95,qs),
(-40,-95,o),
(-40,-110,qs),
(-40,-238,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
54 52 45 42 39 38 24 23 19 17 10 9 2 1 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 1 0 0 4 1 0 1 0 41 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 0 0 1 1 0 39 0 1 1 12 34 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
55 1 6 3 1 33 0 2 4 3 4 2 3 53 0 1 0 0 4 1 0 1 0 41 5 1 4 4 15 34 0 3 3 6 1 2 39 0 6 6 17 6 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
kernLeft = h;
kernRight = k;
lastChange = "2025-07-10 16:30:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,-1,qs),
(286,-6,ls),
(332,-11,o),
(349,3,qs),
(354,8,o),
(359,18,o),
(359,30,o),
(349,43,o),
(341,43,q),
(315,40,l),
(292,40,o),
(268,94,o),
(268,157,qs),
(268,244,l),
(369,140,l),
(439,70,ls),
(468,42,o),
(503,12,o),
(529,-4,o),
(547,-4,q),
(606,0,ls),
(612,0,o),
(630,-1,o),
(650,-3,o),
(670,-4,o),
(701,-4,o),
(712,7,qs),
(716,11,o),
(720,22,o),
(720,29,o),
(719,34,qs),
(713,51,o),
(702,51,q),
(680,48,l),
(634,48,o),
(574,104,qs),
(387,280,l),
(488,331,o),
(588,418,qs),
(629,455,o),
(650,455,q),
(677,451,l),
(686,451,o),
(696,465,o),
(696,471,qs),
(696,502,o),
(652,502,qs),
(629,502,o),
(591,495,o),
(542,495,o),
(487,502,o),
(433,502,o),
(421,491,qs),
(417,486,o),
(413,476,o),
(413,465,o),
(423,451,o),
(431,451,q),
(460,455,l),
(497,455,o),
(497,413,o),
(426,367,qs),
(355,322,o),
(268,292,q),
(268,781,ls),
(268,824,o),
(262,836,qs),
(257,845,o),
(237,845,q),
(162,838,l),
(146,838,o),
(115,841,qs),
(104,842,o),
(84,844,o),
(58,844,o),
(42,828,o),
(42,821,qs),
(42,800,o),
(78,797,qs),
(97,795,o),
(129,782,o),
(152,742,o),
(152,658,qs),
(152,167,ls),
(152,132,o),
(149,107,qs),
(141,40,o),
(103,40,q),
(77,43,l),
(68,43,o),
(58,30,o),
(58,18,o),
(60,13,qs),
(68,-7,o),
(110,-7,q),
(214,0,l),
(229,0,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 0 88 87 86 85 77 76 75 74 71 70 64 63 62 61 56 55 54 53 50 48 47 46 45 44 39 38 37 36 28 27 26 25 22 21 9 8 7 6 0 96 2 96 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
82 59 32 3 1 6 1 33 5 4 2 3 3 14 34 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 15 34 19 18 14 13 2 5 1 1 0 1 2 39 17 16 15 20 4 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
metricLeft = h;
note = k;
unicode = 107;
},
{
glyphname = l;
kernLeft = l;
lastChange = "2025-07-10 16:30:35 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,49,o),
(268,89,o),
(268,167,qs),
(268,781,ls),
(268,822,o),
(260,836,qs),
(256,845,o),
(237,845,q),
(162,838,l),
(145,838,o),
(113,841,qs),
(93,843,ls),
(84,844,o),
(57,844,o),
(42,828,o),
(42,821,qs),
(42,800,o),
(78,797,qs),
(96,795,o),
(129,782,o),
(152,742,o),
(152,658,qs),
(152,167,ls),
(152,91,o),
(143,66,qs),
(133,40,o),
(104,40,q),
(78,43,l),
(70,43,o),
(60,30,o),
(60,11,o),
(69,3,qs),
(75,-1,o),
(95,-7,o),
(127,-7,o),
(183,0,o),
(229,0,o),
(241,-1,qs),
(286,-6,ls),
(332,-11,o),
(349,3,qs),
(355,8,o),
(359,18,o),
(359,30,o),
(349,43,o),
(341,43,q),
(316,40,l),
(303,40,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 0 0 47 0 47 40 39 38 37 34 33 21 20 19 18 13 12 11 10 2 1 10 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 26 values pushed */
7 6 2 5 5 14 34 9 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
metricLeft = h;
note = l;
unicode = 108;
},
{
glyphname = m;
kernLeft = n;
lastChange = "2025-07-10 16:29:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,-5,o),
(155,-2,o),
(184,0,o),
(231,0,o),
(283,-7,o),
(308,-7,qs),
(359,-7,o),
(359,22,qs),
(359,30,o),
(350,43,o),
(341,43,q),
(317,40,l),
(303,40,o),
(282,50,o),
(262,92,o),
(262,174,qs),
(262,364,l),
(341,435,o),
(413,435,qs),
(459,435,o),
(512,376,o),
(512,325,qs),
(512,174,ls),
(512,97,o),
(502,69,qs),
(493,40,o),
(463,40,q),
(438,43,l),
(429,43,o),
(419,30,o),
(419,18,o),
(421,13,qs),
(429,-7,o),
(471,-7,q),
(574,0,l),
(588,0,o),
(601,-1,qs),
(646,-6,ls),
(691,-11,o),
(708,3,qs),
(714,8,o),
(718,18,o),
(718,30,o),
(709,43,o),
(701,43,q),
(675,40,l),
(663,40,o),
(646,51,o),
(627,96,o),
(627,174,qs),
(627,324,ls),
(627,340,o),
(624,362,q),
(703,435,o),
(782,435,qs),
(825,435,o),
(876,376,o),
(876,325,qs),
(876,174,ls),
(876,98,o),
(867,70,qs),
(857,40,o),
(828,40,q),
(803,43,l),
(794,43,o),
(784,30,o),
(784,22,qs),
(784,-7,o),
(836,-7,q),
(939,0,l),
(954,0,o),
(965,-1,qs),
(1011,-6,ls),
(1057,-11,o),
(1073,3,qs),
(1079,8,o),
(1083,18,o),
(1083,30,o),
(1073,43,o),
(1065,43,q),
(1040,40,l),
(1028,40,o),
(1010,51,o),
(993,97,o),
(993,174,qs),
(993,344,ls),
(993,420,o),
(943,467,qs),
(919,490,o),
(852,514,o),
(780,514,o),
(752,507,qs),
(669,487,o),
(607,428,q),
(586,468,o),
(502,514,o),
(444,514,qs),
(349,514,o),
(262,443,q),
(261,479,o),
(249,493,qs),
(243,500,o),
(223,500,q),
(149,495,l),
(78,500,l),
(46,500,o),
(46,479,qs),
(46,470,o),
(65,462,o),
(91,457,o),
(118,449,o),
(125,439,qs),
(146,411,o),
(146,318,qs),
(146,174,ls),
(146,137,o),
(144,111,qs),
(135,40,o),
(95,40,q),
(71,43,l),
(63,43,o),
(52,30,o),
(52,22,qs),
(52,-7,o),
(102,-7,qs),
(112,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 0 122 121 120 118 115 114 113 112 107 105 99 98 97 96 92 89 81 80 79 78 71 69 63 62 61 60 57 54 46 45 44 43 35 34 29 27 23 22 20 19 7 6 5 4 0 125 1 125 24 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
26 21 2 12 3 108 31 2 1 12 2 33 18 1 12 12 3 1 0 39 6 5 4 3 3 3 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 23 5 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
26 21 2 12 3 108 31 2 1 12 2 33 4 1 3 3 15 34 18 1 12 12 5 1 0 39 6 1 5 5 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 23 5 0 0 13 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1112;
}
);
metricLeft = n;
metricRight = n;
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = n;
lastChange = "2025-07-10 15:53:10 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,22,qs),
(360,30,o),
(350,43,o),
(341,43,q),
(317,40,l),
(303,40,o),
(282,47,o),
(262,86,o),
(262,167,qs),
(262,347,l),
(290,383,o),
(327,406,qs),
(345,417,o),
(386,431,o),
(438,431,o),
(458,418,qs),
(508,386,o),
(508,296,qs),
(508,167,ls),
(508,92,o),
(489,40,o),
(460,40,q),
(434,43,l),
(425,43,o),
(415,30,o),
(415,18,o),
(417,13,qs),
(425,-7,o),
(467,-7,q),
(570,0,l),
(586,0,o),
(643,-6,qs),
(688,-11,o),
(705,3,qs),
(710,8,o),
(714,18,o),
(714,30,o),
(705,43,o),
(697,43,q),
(671,40,l),
(659,40,o),
(642,49,o),
(624,89,o),
(624,167,qs),
(624,334,ls),
(624,382,o),
(611,417,qs),
(575,514,o),
(452,514,qs),
(343,514,o),
(262,427,q),
(262,440,ls),
(262,479,o),
(250,493,qs),
(244,500,o),
(223,500,q),
(149,495,l),
(78,500,l),
(61,500,o),
(52,491,qs),
(49,487,o),
(46,479,o),
(46,465,o),
(65,456,o),
(116,441,o),
(125,429,qs),
(146,399,o),
(146,318,qs),
(146,167,ls),
(146,95,o),
(134,67,qs),
(123,40,o),
(95,40,q),
(71,43,l),
(63,43,o),
(52,30,o),
(52,11,o),
(62,3,qs),
(67,-1,o),
(86,-7,o),
(112,-7,o),
(172,0,o),
(203,0,q),
(309,-7,l),
(360,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 0 81 80 79 78 70 69 63 62 61 60 56 53 46 45 44 43 36 34 29 28 26 25 12 11 10 9 4 3 0 84 2 84 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
27 1 12 4 74 33 2 2 12 2 33 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 15 3 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
27 1 12 4 74 33 2 2 12 2 33 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 15 3 0 0 13 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
kernLeft = o;
lastChange = "2025-07-10 16:36:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,130,qs),
(139,-12,o),
(327,-12,qs),
(456,-12,o),
(531,67,qs),
(602,141,o),
(602,260,qs),
(602,360,o),
(535,433,qs),
(460,514,o),
(325,514,qs),
(207,514,o),
(126,437,qs),
(88,400,o),
(45,305,o),
(45,263,qs),
(45,185,o)
);
},
{
closed = 1;
nodes = (
(297,440,qs),
(370,440,o),
(421,383,qs),
(447,354,o),
(479,266,o),
(479,167,o),
(469,141,qs),
(439,62,o),
(349,62,qs),
(276,62,o),
(223,123,qs),
(197,152,o),
(166,237,o),
(166,329,o),
(177,356,qs),
(207,440,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 30 24 22 14 12 6 4 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,-214,o),
(21,-226,o),
(23,-231,qs),
(31,-252,o),
(71,-252,qs),
(172,-249,l),
(278,-252,ls),
(306,-252,o),
(319,-242,qs),
(325,-237,o),
(329,-227,o),
(329,-214,o),
(319,-201,o),
(310,-201,q),
(287,-205,l),
(272,-205,o),
(251,-198,o),
(232,-162,o),
(232,-83,qs),
(232,22,l),
(287,-12,o),
(372,-12,qs),
(488,-12,o),
(566,65,qs),
(643,142,o),
(643,251,qs),
(643,374,o),
(570,444,qs),
(534,478,o),
(432,514,o),
(291,514,o),
(229,473,q),
(225,492,o),
(215,498,qs),
(211,500,o),
(199,502,o),
(171,502,o),
(137,495,o),
(93,495,o),
(61,500,o),
(37,500,o),
(31,498,qs),
(15,491,o),
(15,475,qs),
(15,464,o),
(31,458,qs),
(39,455,o),
(71,446,o),
(82,439,qs),
(116,422,o),
(116,316,qs),
(116,-83,ls),
(116,-152,o),
(104,-180,qs),
(93,-205,o),
(64,-205,q),
(40,-201,l),
(32,-201,o)
);
},
{
closed = 1;
nodes = (
(243,404,o),
(257,413,qs),
(302,440,o),
(351,440,qs),
(431,440,o),
(477,388,qs),
(525,333,o),
(525,227,qs),
(525,151,o),
(483,107,qs),
(463,85,o),
(403,62,o),
(346,62,o),
(326,66,qs),
(260,82,o),
(232,141,q),
(232,394,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 71 69 62 61 0 57 0 57 53 49 44 43 42 41 36 34 27 26 21 20 19 18 17 16 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 16 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
25 1 11 1 74 58 2 10 11 37 1 5 10 3 33 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 13 34 12 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
metricRight = o;
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = o;
lastChange = "2025-07-10 16:37:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,-159,o),
(454,-185,qs),
(443,-209,o),
(415,-209,q),
(391,-206,l),
(382,-206,o),
(372,-219,o),
(372,-231,o),
(374,-236,qs),
(381,-257,o),
(421,-257,qs),
(523,-254,l),
(628,-257,ls),
(656,-257,o),
(669,-247,qs),
(675,-242,o),
(679,-231,o),
(679,-219,o),
(669,-206,o),
(661,-206,q),
(637,-209,o),
(637,-209,q),
(622,-209,o),
(601,-203,o),
(582,-167,o),
(582,-87,qs),
(582,353,ls),
(582,421,o),
(593,455,qs),
(597,469,o),
(609,481,o),
(617,487,o),
(624,492,o),
(624,499,qs),
(624,514,o),
(607,514,qs),
(577,514,o),
(484,465,q),
(418,514,o),
(201,514,o),
(122,438,qs),
(45,362,o),
(45,252,qs),
(45,132,o),
(119,62,qs),
(154,27,o),
(256,-11,o),
(402,-11,o),
(466,36,q),
(466,-87,ls)
);
},
{
closed = 1;
nodes = (
(285,440,o),
(342,440,o),
(363,436,qs),
(436,417,o),
(466,358,q),
(466,118,l),
(419,62,o),
(348,62,qs),
(268,62,o),
(217,119,qs),
(192,146,o),
(163,226,o),
(163,314,o),
(184,375,o),
(225,417,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
63 62 57 55 46 45 44 43 39 35 30 29 27 26 14 12 10 9 2 1 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 13 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 16 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 13 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 1 59 58 2 8 9 0 1 0 8 3 33 0 9 9 1 1 0 39 2 1 1 1 15 34 0 8 8 0 1 0 39 0 0 0 16 34 7 6 4 3 3 3 5 1 2 39 0 5 5 17 5 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
metricLeft = o;
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = n;
kernRight = r;
lastChange = "2025-07-10 16:33:26 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,-5,o),
(155,-2,o),
(210,2,o),
(267,-4,qs),
(278,-5,o),
(289,-6,qs),
(335,-11,o),
(357,2,qs),
(364,7,o),
(373,18,o),
(373,30,o),
(363,44,o),
(354,44,q),
(321,40,l),
(287,40,o),
(275,61,qs),
(262,86,o),
(262,167,qs),
(262,324,l),
(279,360,o),
(311,389,qs),
(328,403,o),
(367,421,o),
(424,421,o),
(449,405,qs),
(463,396,o),
(484,364,o),
(496,319,o),
(509,319,qs),
(514,319,o),
(522,329,o),
(522,335,qs),
(523,456,ls),
(523,514,o),
(433,514,qs),
(406,514,o),
(382,507,qs),
(308,486,o),
(262,416,q),
(262,450,ls),
(262,500,o),
(223,500,q),
(149,495,l),
(78,500,l),
(61,500,o),
(52,491,qs),
(49,487,o),
(46,479,o),
(46,465,o),
(65,456,o),
(91,448,o),
(123,437,o),
(135,413,qs),
(146,387,o),
(146,316,qs),
(146,167,ls),
(146,95,o),
(134,66,qs),
(123,40,o),
(95,40,q),
(71,43,l),
(63,43,o),
(52,30,o),
(52,22,qs),
(52,-7,o),
(102,-7,qs),
(112,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 0 54 53 52 51 43 42 38 36 32 30 25 24 22 21 7 6 5 4 0 66 1 66 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 45 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 1 53 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
23 1 7 3 47 27 2 6 7 2 33 0 6 7 1 7 6 1 53 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 10 1 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
metricLeft = n;
note = r;
unicode = 114;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-10 16:33:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,501,qs),
(444,492,ls),
(440,488,o),
(427,488,o),
(417,492,qs),
(361,514,o),
(288,514,qs),
(185,514,o),
(123,466,qs),
(69,424,o),
(69,371,qs),
(69,313,o),
(113,273,qs),
(136,252,o),
(216,215,o),
(356,180,o),
(391,158,qs),
(409,147,o),
(424,125,o),
(424,92,o),
(408,66,o),
(369,46,o),
(314,46,qs),
(234,46,o),
(170,80,qs),
(140,96,o),
(99,138,o),
(83,182,o),
(71,182,qs),
(64,182,o),
(56,174,o),
(56,168,qs),
(56,46,l),
(89,24,o),
(184,1,qs),
(239,-12,o),
(298,-12,qs),
(428,-12,o),
(488,41,qs),
(534,83,o),
(534,143,qs),
(534,206,o),
(485,244,qs),
(460,264,o),
(378,295,o),
(236,329,o),
(206,349,qs),
(191,360,o),
(179,385,o),
(179,424,o),
(231,456,o),
(286,456,qs),
(403,456,o),
(464,370,q),
(474,350,o),
(486,350,qs),
(499,350,o),
(499,363,qs),
(499,371,o),
(491,437,o),
(491,493,qs),
(491,514,o),
(475,514,qs),
(467,514,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 60 59 57 55 41 39 35 33 27 25 12 10 8 6 0 63 1 63 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
30 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 8 2 0 0 15 34 0 1 1 0 1 0 39 6 8 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
kernLeft = t;
lastChange = "2025-07-10 15:54:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,505,qs),
(242,503,l),
(242,682,ls),
(242,733,o),
(191,733,o),
(183,682,qs),
(170,599,o),
(146,562,qs),
(133,540,o),
(95,513,o),
(50,502,o),
(25,483,o),
(25,471,qs),
(25,439,o),
(77,439,qs),
(125,439,l),
(125,141,ls),
(125,99,o),
(137,69,qs),
(169,-12,o),
(291,-12,qs),
(388,-12,o),
(446,66,qs),
(464,91,o),
(464,111,qs),
(464,118,o),
(455,131,o),
(447,131,qs),
(424,131,o),
(408,109,qs),
(371,60,o),
(323,60,qs),
(303,60,o),
(287,68,qs),
(242,92,o),
(242,166,qs),
(242,439,l),
(396,439,ls),
(455,439,o),
(455,474,qs),
(455,507,o),
(392,507,qs),
(351,507,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 38 37 28 26 22 20 15 13 11 9 5 3 0 42 1 40 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 7 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 496;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
kernLeft = u;
lastChange = "2025-07-10 16:35:27 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,-3,q),
(566,0,ls),
(572,0,o),
(590,-1,o),
(612,-3,o),
(633,-4,o),
(667,-4,o),
(680,7,qs),
(686,11,o),
(690,22,o),
(690,33,o),
(680,46,o),
(667,46,o),
(658,43,o),
(626,43,o),
(606,53,o),
(593,88,o),
(593,173,qs),
(593,428,ls),
(593,474,o),
(584,491,qs),
(579,502,o),
(558,502,q),
(504,500,ls),
(499,500,o),
(480,501,o),
(469,502,qs),
(447,503,ls),
(437,504,o),
(403,504,o),
(391,493,qs),
(385,488,o),
(381,477,o),
(381,467,o),
(391,453,o),
(402,453,o),
(413,457,o),
(444,457,o),
(464,447,o),
(477,413,o),
(477,330,qs),
(477,133,l),
(413,67,o),
(348,67,qs),
(325,67,o),
(305,74,qs),
(242,96,o),
(242,181,qs),
(242,418,ls),
(242,442,o),
(240,458,qs),
(236,502,o),
(207,502,q),
(153,500,ls),
(147,500,o),
(128,501,o),
(107,502,o),
(85,504,o),
(53,504,o),
(39,493,qs),
(34,488,o),
(29,477,o),
(29,467,o),
(40,453,o),
(51,453,o),
(62,457,o),
(93,457,o),
(113,447,o),
(126,412,o),
(126,330,qs),
(126,161,ls),
(126,86,o),
(182,37,qs),
(237,-12,o),
(321,-12,qs),
(409,-12,o),
(478,54,q),
(482,-3,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
77 74 73 70 65 64 63 62 55 52 50 49 48 47 42 41 40 39 34 32 25 22 21 18 13 12 11 10 3 1 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
35 1 5 1 0 1 11 5 2 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
metricLeft = "|n";
note = u;
unicode = 117;
},
{
glyphname = v;
kernLeft = v;
lastChange = "2025-07-10 16:35:54 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(664,465,o),
(664,482,o),
(642,502,o),
(601,502,o),
(558,495,o),
(512,495,o),
(458,502,o),
(404,502,o),
(381,483,o),
(381,465,o),
(391,452,o),
(399,452,q),
(444,456,l),
(479,456,o),
(479,432,qs),
(479,424,o),
(474,392,o),
(448,337,qs),
(372,177,ls),
(363,158,o),
(358,158,qs),
(350,158,o),
(338,179,qs),
(311,229,o),
(251,325,o),
(223,376,q),
(204,407,o),
(204,432,qs),
(204,456,o),
(243,456,q),
(280,452,l),
(290,452,o),
(299,465,o),
(299,476,o),
(296,481,qs),
(286,502,o),
(251,502,q),
(125,495,l),
(98,495,o),
(48,502,o),
(-1,502,o),
(-25,482,o),
(-25,465,o),
(-15,452,o),
(-7,452,q),
(21,455,l),
(30,455,o),
(53,443,o),
(78,402,qs),
(302,11,ls),
(318,-17,o),
(350,-17,o),
(364,16,q),
(532,358,ls),
(557,410,o),
(584,438,qs),
(599,455,o),
(618,455,q),
(646,452,l),
(653,452,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 0 59 0 59 56 55 54 53 52 51 48 47 46 45 39 37 30 29 28 27 23 20 19 18 15 14 13 12 8 7 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 15 34 0 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 8 0 1 0 8 1 53 15 14 10 9 7 6 3 2 8 0 0 4 1 0 39 13 12 11 5 4 4 4 15 34 0 1 1 16 1 35 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
lastChange = "2025-07-10 16:36:20 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1001,465,o),
(1001,483,o),
(976,502,o),
(940,502,o),
(910,497,qs),
(894,495,o),
(881,495,q),
(766,502,l),
(743,502,o),
(729,493,qs),
(724,488,o),
(718,477,o),
(718,465,o),
(729,452,o),
(736,452,q),
(781,456,l),
(816,456,o),
(816,432,qs),
(816,423,o),
(812,389,o),
(785,335,qs),
(707,171,ls),
(697,150,o),
(691,150,qs),
(684,150,o),
(674,171,qs),
(568,390,l),
(556,412,ls),
(550,421,o),
(550,431,qs),
(550,456,o),
(580,456,q),
(618,452,l),
(626,452,o),
(636,465,o),
(636,482,o),
(625,491,qs),
(620,496,o),
(590,506,o),
(521,499,qs),
(508,498,ls),
(486,495,o),
(468,495,qs),
(457,495,o),
(439,497,o),
(430,498,qs),
(416,500,ls),
(406,500,o),
(388,502,o),
(351,502,o),
(327,482,o),
(327,465,o),
(337,452,o),
(345,452,q),
(373,455,o),
(373,455,q),
(380,455,o),
(396,450,o),
(424,420,o),
(455,360,q),
(369,171,ls),
(359,150,o),
(353,150,qs),
(349,150,o),
(345,158,o),
(339,167,qs),
(216,390,ls),
(194,428,o),
(194,441,qs),
(194,449,o),
(201,456,o),
(211,456,q),
(249,452,l),
(268,452,o),
(268,474,qs),
(268,482,o),
(257,491,qs),
(252,496,o),
(233,502,o),
(192,502,o),
(143,495,o),
(100,495,o),
(82,498,qs),
(68,500,ls),
(46,502,o),
(17,502,qs),
(-2,502,o),
(-25,482,o),
(-25,465,o),
(-15,452,o),
(-7,452,q),
(20,455,l),
(28,455,o),
(36,451,qs),
(59,441,o),
(105,357,qs),
(292,11,ls),
(307,-17,o),
(321,-17,qs),
(330,-17,o),
(355,-3,o),
(362,11,qs),
(487,282,l),
(630,11,ls),
(660,-43,o),
(690,11,q),
(841,309,ls),
(888,402,o),
(917,437,qs),
(933,455,o),
(955,455,q),
(982,452,l),
(991,452,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 0 0 112 0 112 109 108 106 103 98 97 96 95 89 87 81 80 79 78 70 68 63 62 59 58 56 55 50 48 41 40 39 38 33 32 31 30 27 25 22 21 20 19 14 12 2 1 23 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
52 9 2 9 0 1 33 16 1 9 0 1 0 9 1 53 22 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
52 9 2 9 0 1 33 16 1 9 0 1 0 9 1 53 22 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 979;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
kernLeft = x;
lastChange = "2025-07-10 15:54:06 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,12,o),
(278,25,o),
(276,29,qs),
(271,43,o),
(259,43,q),
(218,39,l),
(199,39,o),
(199,79,o),
(256,136,q),
(309,198,l),
(400,94,ls),
(427,63,o),
(427,51,qs),
(427,38,o),
(388,38,o),
(377,40,qs),
(374,41,o),
(369,42,o),
(365,42,qs),
(347,42,o),
(347,20,qs),
(347,11,o),
(356,3,qs),
(362,-2,o),
(380,-8,o),
(430,-8,o),
(500,0,o),
(556,0,o),
(604,-8,o),
(628,-8,qs),
(652,-8,o),
(676,12,o),
(676,29,o),
(666,42,o),
(657,42,q),
(629,39,l),
(621,39,o),
(613,41,qs),
(592,47,o),
(555,90,qs),
(409,257,l),
(534,387,ls),
(574,428,o),
(599,445,qs),
(614,455,o),
(630,455,q),
(657,452,l),
(666,452,o),
(676,465,o),
(676,482,o),
(654,502,o),
(614,502,o),
(573,495,o),
(533,495,o),
(486,502,o),
(435,502,o),
(420,493,qs),
(414,488,o),
(408,477,o),
(408,469,o),
(409,466,qs),
(414,452,o),
(426,452,q),
(468,456,l),
(478,456,o),
(488,445,o),
(488,439,qs),
(488,433,o),
(481,418,o),
(458,395,qs),
(369,304,l),
(256,433,ls),
(251,438,o),
(251,443,qs),
(251,456,o),
(276,456,q),
(313,452,l),
(332,452,o),
(332,474,qs),
(332,482,o),
(322,491,qs),
(316,496,o),
(298,502,o),
(250,502,o),
(180,495,o),
(139,495,o),
(121,497,o),
(111,498,qs),
(98,500,l),
(75,501,ls),
(64,502,o),
(26,502,o),
(2,482,o),
(2,465,o),
(13,452,o),
(21,452,q),
(49,455,l),
(68,455,o),
(85,447,qs),
(98,441,o),
(124,412,q),
(264,245,l),
(134,106,ls),
(74,40,o),
(48,40,q),
(21,43,l),
(12,43,o),
(2,29,o),
(2,12,o),
(24,-8,o),
(63,-8,o),
(104,0,o),
(125,0,q),
(224,-8,l),
(253,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 0 0 114 0 114 110 109 108 107 100 99 96 94 89 88 87 86 85 83 80 79 78 77 69 68 67 66 63 62 61 60 59 58 52 51 50 49 39 38 37 36 31 30 29 28 23 22 19 18 17 16 10 9 8 7 4 3 2 1 29 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
104 73 43 12 4 2 4 1 33 17 16 12 11 10 9 5 7 4 4 6 1 0 39 15 14 13 8 7 5 6 6 15 34 26 25 24 23 19 18 3 7 2 2 0 1 0 39 28 27 22 21 20 1 6 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
lastChange = "2025-07-10 15:54:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(669,465,o),
(669,482,o),
(646,502,o),
(603,502,o),
(567,495,o),
(527,495,o),
(480,502,o),
(429,502,o),
(406,483,o),
(406,465,o),
(417,452,o),
(425,452,q),
(465,456,l),
(494,456,o),
(494,437,qs),
(494,427,o),
(487,409,qs),
(484,400,o),
(472,371,o),
(369,111,q),
(238,404,ls),
(231,422,o),
(231,431,qs),
(231,456,o),
(264,456,q),
(301,452,l),
(320,452,o),
(320,474,qs),
(320,482,o),
(310,491,qs),
(304,496,o),
(286,502,o),
(238,502,o),
(169,495,o),
(141,495,q),
(43,502,l),
(19,502,o),
(-4,482,o),
(-4,465,o),
(6,452,o),
(14,452,q),
(42,455,l),
(49,455,o),
(58,452,qs),
(87,441,o),
(129,357,qs),
(314,-25,l),
(314,-25,l),
(269,-118,o),
(238,-152,qs),
(223,-170,o),
(198,-182,o),
(177,-182,o),
(170,-181,qs),
(151,-176,o),
(136,-148,qs),
(120,-120,o),
(96,-120,qs),
(85,-120,o),
(80,-123,qs),
(59,-136,o),
(59,-164,qs),
(59,-198,o),
(90,-223,qs),
(105,-234,o),
(148,-248,o),
(194,-248,o),
(214,-241,qs),
(283,-216,o),
(355,-66,q),
(554,379,ls),
(590,456,o),
(623,456,q),
(650,452,l),
(658,452,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 0 0 74 0 74 71 70 69 68 67 66 63 62 61 60 50 49 48 47 42 41 40 39 38 37 34 33 32 31 22 21 17 15 8 7 2 1 18 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
54 27 26 3 2 0 1 33 0 2 0 3 0 2 3 53 17 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
kernLeft = z;
lastChange = "2025-07-10 15:54:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(538,172,o),
(528,161,qs),
(486,112,ls),
(467,91,o),
(447,77,qs),
(408,50,o),
(346,50,qs),
(201,50,l),
(530,448,ls),
(541,460,o),
(536,479,qs),
(534,487,o),
(516,495,o),
(494,495,qs),
(149,495,ls),
(141,495,o),
(122,505,qs),
(108,512,ls),
(103,515,o),
(99,515,qs),
(81,515,o),
(81,462,o),
(73,418,qs),
(69,397,o),
(59,355,o),
(52,333,o),
(61,323,o),
(68,323,qs),
(83,323,o),
(120,373,qs),
(151,414,o),
(188,434,qs),
(209,445,o),
(252,445,qs),
(377,445,l),
(57,61,ls),
(44,45,o),
(41,36,qs),
(40,32,o),
(40,24,o),
(43,12,o),
(56,0,o),
(76,0,qs),
(513,0,l),
(519,39,o),
(528,65,qs),
(533,79,o),
(544,106,o),
(567,152,o),
(567,165,qs),
(567,180,o),
(553,180,qs),
(547,180,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 0 46 44 39 36 33 31 25 23 19 17 10 8 0 52 1 52 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 53 7 1 0 6 2 0 6 51 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 53 7 1 0 6 2 0 6 51 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,-100,o),
(292,-91,o),
(278,-58,o),
(278,3,qs),
(278,171,o),
(247,257,qs),
(220,333,o),
(163,355,q),
(220,375,o),
(247,452,qs),
(262,494,o),
(278,619,o),
(278,768,o),
(287,790,qs),
(295,811,o),
(315,811,q),
(343,806,l),
(360,806,o),
(360,819,qs),
(360,825,o),
(355,829,qs),
(342,845,o),
(310,845,qs),
(257,845,o),
(217,787,qs),
(197,759,o),
(168,673,o),
(149,517,o),
(136,463,qs),
(129,437,o),
(114,404,o),
(97,385,o),
(77,377,o),
(40,368,o),
(40,355,qs),
(40,342,o),
(63,336,qs),
(77,333,o),
(87,329,qs),
(108,320,o),
(122,289,qs),
(143,243,o),
(162,94,qs),
(174,-16,o),
(217,-77,qs),
(237,-105,o),
(285,-134,o),
(320,-134,o),
(329,-133,qs),
(360,-126,o),
(360,-109,qs),
(360,-96,o),
(343,-96,q),
(315,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
53 52 38 37 36 35 31 29 6 5 1 0 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
45 1 0 3 1 33 5 1 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,-117,o),
(193,-141,o),
(219,-141,o),
(226,-138,qs),
(251,-127,o),
(251,-101,qs),
(251,806,ls),
(251,823,o),
(228,845,o),
(193,845,o),
(169,824,o),
(169,807,qs),
(169,-100,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
10 9 3 2 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 14 values pushed */
0 1 1 0 1 0 39 0 0 0 14 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 420;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (35,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (395,0);
ref = braceleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
54 53 39 38 37 36 32 30 7 6 2 1 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
46 1 0 3 1 33 5 1 0 0 1 0 1 1 0 40 4 1 3 3 2 1 0 39 0 2 2 14 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,328,qs),
(288,320,o),
(339,283,qs),
(428,218,o),
(489,218,qs),
(601,218,o),
(655,372,q),
(591,402,l),
(571,346,o),
(544,318,qs),
(532,306,o),
(508,295,o),
(484,295,o),
(472,297,qs),
(439,302,o),
(373,351,qs),
(282,418,o),
(217,418,qs),
(164,418,o),
(116,372,qs),
(69,327,o),
(46,264,q),
(111,232,l),
(157,340,o),
(215,340,qs),
(244,340,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 21 19 13 12 8 6 0 25 1 25 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
18 17 2 0 1 3 2 2 3 2 2 33 0 1 4 1 0 2 1 0 1 0 41 0 2 3 3 2 1 0 38 0 2 2 3 1 0 39 0 3 2 3 1 0 36 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 702;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = nonbreakingspace;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
width = 269;
}
);
note = nonbreakingspace;
unicode = 160;
},
{
glyphname = exclamdown;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (83,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,519);
ref = exclam;
scale = (1,-0.9999);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 40 39 32 31 13 12 1 25 2 23 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 3 1 0 39 0 3 3 15 34 0 1 1 0 1 0 39 4 1 0 0 17 0 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 3 1 0 39 0 3 3 21 34 0 1 1 0 1 0 39 4 1 0 0 17 0 35 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-103,qs),
(356,-11,l),
(400,-7,o),
(445,15,qs),
(467,24,o),
(504,50,o),
(533,78,o),
(549,107,o),
(549,125,o),
(548,129,qs),
(542,146,o),
(534,146,qs),
(516,146,o),
(497,122,q),
(476,89,o),
(446,77,qs),
(431,70,o),
(396,65,o),
(365,65,o),
(356,66,q),
(356,448,l),
(402,446,o),
(424,436,qs),
(439,429,o),
(474,400,o),
(516,346,o),
(529,346,qs),
(536,346,o),
(544,350,q),
(547,352,o),
(553,357,o),
(553,370,o),
(540,408,o),
(537,433,qs),
(535,446,o),
(535,476,o),
(535,514,o),
(518,514,qs),
(513,514,o),
(505,511,qs),
(489,503,ls),
(480,500,o),
(464,493,o),
(452,493,o),
(447,494,qs),
(416,504,ls),
(388,512,o),
(356,514,q),
(356,592,ls),
(356,611,o),
(343,630,o),
(328,630,qs),
(303,630,o),
(303,591,qs),
(303,512,l),
(192,501,o),
(121,423,qs),
(53,348,o),
(53,251,qs),
(53,138,o),
(125,66,qs),
(193,0,o),
(303,-10,q),
(303,-101,ls),
(303,-141,o),
(331,-141,qs),
(356,-141,o)
);
},
{
closed = 1;
nodes = (
(174,123,o),
(174,265,qs),
(174,419,o),
(303,445,q),
(303,78,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 55 53 48 47 45 44 40 38 29 27 23 22 19 18 15 13 0 66 1 66 10 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 78 values pushed */
11 1 3 2 67 1 5 6 71 46 2 7 8 64 3 2 0 7 4 33 0 8 5 7 5 8 7 53 0 7 0 5 7 0 51 0 1 9 1 0 1 0 1 0 40 0 3 3 15 34 0 6 6 2 1 0 39 4 1 2 2 15 34 0 5 5 2 1 0 39 4 1 2 2 15 5 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,44,o),
(172,44,qs),
(215,44,o),
(303,16,qs),
(391,-12,o),
(482,-12,qs),
(532,-12,o),
(589,16,qs),
(614,28,o),
(646,60,o),
(646,82,o),
(636,92,qs),
(632,96,o),
(623,102,o),
(608,102,o),
(593,87,qs),
(566,60,o),
(527,60,qs),
(505,60,o),
(477,68,qs),
(461,73,o),
(422,88,o),
(372,109,o),
(319,125,o),
(251,130,q),
(278,154,o),
(294,185,qs),
(303,201,o),
(313,235,o),
(313,298,o),
(297,351,q),
(482,351,ls),
(501,351,o),
(515,357,qs),
(522,361,o),
(531,372,o),
(531,390,o),
(525,396,qs),
(511,414,o),
(477,414,qs),
(273,414,l),
(243,478,o),
(232,522,qs),
(227,544,o),
(224,583,o),
(224,630,o),
(232,651,qs),
(259,712,o),
(339,712,qs),
(395,712,o),
(456,676,qs),
(518,639,o),
(559,578,q),
(571,566,o),
(576,566,qs),
(593,566,o),
(591,589,qs),
(589,602,o),
(580,643,o),
(571,688,o),
(564,735,o),
(567,782,o),
(550,782,qs),
(541,782,o),
(517,756,qs),
(500,738,o),
(490,738,qs),
(484,739,o),
(458,750,qs),
(442,756,o),
(381,775,o),
(334,775,qs),
(242,775,o),
(178,715,qs),
(147,686,o),
(111,607,o),
(111,493,o),
(143,414,q),
(102,414,ls),
(79,414,o),
(57,396,o),
(57,369,o),
(83,351,o),
(105,351,qs),
(169,351,l),
(198,275,o),
(198,168,o),
(175,139,qs),
(165,125,o),
(108,95,qs),
(72,75,o),
(48,50,qs),
(37,39,o),
(28,21,o),
(28,5,o),
(35,-2,qs),
(38,-6,o),
(45,-10,o),
(59,-10,o),
(74,6,q),
(74,6,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
99 97 95 93 86 85 83 81 69 67 61 59 52 50 46 44 38 36 34 33 29 27 22 20 17 15 2 1 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
75 1 11 1 100 0 2 0 13 2 33 0 4 3 7 3 4 7 53 0 6 7 2 7 6 2 53 0 11 1 10 1 11 10 53 0 13 10 0 10 13 0 53 8 1 2 9 1 1 11 2 1 1 2 41 0 7 7 3 1 0 39 5 1 3 3 12 34 0 10 10 0 1 0 39 12 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
75 1 11 1 100 0 2 0 13 2 33 0 4 3 7 3 4 7 53 0 6 7 2 7 6 2 53 0 11 1 10 1 11 10 53 0 13 10 0 10 13 0 53 8 1 2 9 1 1 11 2 1 1 2 41 0 7 7 3 1 0 39 5 1 3 3 12 34 0 10 10 0 1 0 39 12 1 0 0 16 0 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(642,96,l),
(529,204,l),
(560,252,o),
(560,313,qs),
(560,375,o),
(531,424,q),
(642,531,l),
(589,584,l),
(483,475,l),
(429,514,o),
(280,514,o),
(224,476,q),
(120,584,l),
(66,531,l),
(175,426,l),
(142,377,o),
(142,247,o),
(174,199,q),
(66,96,l),
(120,42,l),
(223,150,l),
(276,113,o),
(426,113,o),
(482,153,q),
(589,42,l)
);
},
{
closed = 1;
nodes = (
(252,413,qs),
(290,453,o),
(350,453,qs),
(410,453,o),
(448,413,qs),
(487,374,o),
(487,314,qs),
(487,250,o),
(449,211,qs),
(413,174,o),
(352,174,qs),
(291,174,o),
(253,213,qs),
(235,232,o),
(215,283,o),
(215,313,qs),
(215,374,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 37 31 29 14 13 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
15 12 2 3 1 22 18 9 6 4 2 3 3 0 2 0 2 3 33 17 16 11 10 4 1 31 24 23 5 4 4 0 30 0 2 0 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 15 3 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,53,o),
(434,95,o),
(434,161,qs),
(434,183,l),
(644,183,ls),
(662,183,o),
(682,191,o),
(682,217,o),
(679,223,qs),
(673,235,o),
(643,235,qs),
(434,235,l),
(434,359,l),
(644,359,ls),
(682,359,o),
(682,381,qs),
(682,394,o),
(679,399,qs),
(672,413,o),
(643,413,qs),
(465,413,l),
(700,694,ls),
(715,712,o),
(739,712,qs),
(754,712,o),
(766,708,o),
(771,708,qs),
(791,708,o),
(791,730,qs),
(791,740,o),
(766,758,o),
(732,758,o),
(696,751,o),
(670,751,qs),
(656,751,o),
(631,755,qs),
(620,756,o),
(592,758,o),
(550,758,o),
(527,738,o),
(527,721,o),
(537,708,o),
(545,708,q),
(583,713,l),
(614,713,o),
(614,695,qs),
(614,682,o),
(572,632,qs),
(410,438,l),
(231,655,l),
(221,670,ls),
(217,676,o),
(212,684,o),
(209,691,o),
(209,702,o),
(224,713,o),
(241,713,q),
(278,708,l),
(296,708,o),
(296,728,qs),
(296,740,o),
(271,758,o),
(247,758,q),
(116,751,l),
(18,758,l),
(-5,758,o),
(-28,738,o),
(-28,721,o),
(-18,708,o),
(-9,708,q),
(18,712,l),
(36,712,o),
(53,704,o),
(60,694,qs),
(283,413,l),
(125,413,ls),
(104,413,o),
(97,409,qs),
(91,406,o),
(85,397,o),
(85,370,o),
(106,359,o),
(124,359,qs),
(320,359,l),
(320,235,l),
(125,235,ls),
(104,235,o),
(97,232,qs),
(91,229,o),
(85,220,o),
(85,192,o),
(106,183,o),
(124,183,qs),
(320,183,l),
(320,161,ls),
(320,96,o),
(310,68,qs),
(298,37,o),
(266,37,q),
(219,42,l),
(210,42,o),
(200,32,o),
(200,17,o),
(225,0,o),
(275,0,o),
(318,4,qs),
(347,6,ls),
(361,7,o),
(377,7,qs),
(393,7,o),
(407,6,qs),
(435,4,ls),
(449,2,o),
(482,0,o),
(530,0,o),
(554,17,o),
(554,32,o),
(544,42,o),
(536,42,q),
(489,37,l),
(472,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 0 0 120 0 120 116 114 110 108 107 105 101 99 97 95 94 92 89 88 87 85 82 81 78 77 76 75 64 63 62 61 58 54 51 50 49 48 45 43 38 36 35 33 28 26 22 21 20 19 16 15 14 13 12 10 9 8 6 5 2 1 30 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 74 values pushed */
71 1 11 12 1 33 24 1 11 25 1 10 9 11 10 1 2 41 26 1 9 27 1 8 0 9 8 1 0 41 23 22 18 17 16 15 13 7 12 12 14 1 0 39 21 20 19 3 14 14 12 34 29 28 7 6 4 0 0 1 1 0 39 5 4 3 2 4 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,809,ls),
(250,823,o),
(226,845,o),
(191,845,o),
(167,826,o),
(167,810,qs),
(167,462,ls),
(167,447,o),
(180,437,qs),
(186,432,o),
(199,427,o),
(226,427,o),
(250,449,o),
(250,463,qs)
);
},
{
closed = 1;
nodes = (
(167,-122,o),
(191,-141,o),
(226,-141,o),
(250,-119,o),
(250,-104,qs),
(250,247,ls),
(250,261,o),
(226,282,o),
(191,282,o),
(177,270,qs),
(167,262,o),
(167,248,qs),
(167,-105,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
24 23 18 17 10 9 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 3 2 3 1 0 40 0 0 0 1 1 0 39 0 1 1 14 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,-84,qs),
(469,-33,o),
(469,41,qs),
(469,121,o),
(390,180,q),
(408,190,o),
(425,205,qs),
(485,256,o),
(485,314,qs),
(485,377,o),
(446,421,qs),
(406,467,o),
(298,521,qs),
(178,579,o),
(178,645,qs),
(178,675,o),
(214,702,qs),
(248,727,o),
(292,727,qs),
(341,727,o),
(400,673,o),
(410,624,qs),
(415,603,o),
(430,603,qs),
(442,603,o),
(443,625,qs),
(443,747,l),
(382,775,o),
(304,775,qs),
(200,775,o),
(135,720,qs),
(76,669,o),
(76,604,qs),
(76,514,o),
(157,454,q),
(115,428,o),
(91,396,qs),
(77,377,o),
(61,336,o),
(61,284,o),
(72,257,qs),
(104,182,o),
(248,114,qs),
(368,57,o),
(368,-6,qs),
(368,-46,o),
(333,-70,qs),
(301,-93,o),
(254,-93,qs),
(201,-93,o),
(133,-32,o),
(122,21,qs),
(117,41,o),
(102,41,qs),
(89,41,o),
(88,19,qs),
(88,-102,l),
(164,-141,o),
(229,-141,qs),
(345,-141,o)
);
},
{
closed = 1;
nodes = (
(230,412,qs),
(400,334,o),
(400,272,qs),
(400,233,o),
(349,206,q),
(333,215,ls),
(324,219,o),
(316,223,qs),
(146,299,o),
(146,362,qs),
(146,400,o),
(197,428,q),
(212,419,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 41 39 36 34 31 29 11 9 6 4 0 59 1 59 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
32 1 5 3 67 60 54 24 4 1 4 2 1 0 2 3 33 0 4 5 1 5 4 1 53 0 1 2 5 1 2 51 0 2 6 1 0 2 0 1 0 40 0 5 5 3 1 0 39 0 3 3 12 5 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(433,662,o),
(433,707,o),
(415,729,qs),
(406,740,o),
(378,753,o),
(327,753,o),
(306,731,qs),
(295,721,o),
(285,693,o),
(285,646,o),
(302,625,qs),
(311,615,o),
(338,602,o),
(375,602,o),
(403,615,o),
(422,636,o)
);
},
{
closed = 1;
nodes = (
(196,662,o),
(196,708,o),
(179,729,qs),
(169,740,o),
(142,753,o),
(90,753,o),
(68,731,qs),
(59,721,o),
(48,693,o),
(48,646,o),
(65,625,qs),
(74,615,o),
(102,602,o),
(139,602,o),
(167,615,o),
(186,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 25 18 17 10 9 2 1 4 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 1 0 38 3 1 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
2 1 0 0 1 1 0 39 3 1 1 1 12 0 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 1 0 38 3 1 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,184,qs),
(167,94,o),
(260,42,qs),
(355,-12,o),
(468,-12,qs),
(573,-12,o),
(668,40,qs),
(713,64,o),
(789,135,o),
(843,222,o),
(874,324,o),
(874,440,o),
(859,492,qs),
(830,596,o),
(752,667,qs),
(635,775,o),
(469,775,qs),
(348,775,o),
(251,718,qs),
(206,691,o),
(133,618,o),
(83,530,o),
(57,432,o),
(57,380,qs),
(57,275,o)
);
},
{
closed = 1;
nodes = (
(224,619,qs),
(321,716,o),
(465,716,qs),
(552,716,o),
(630,674,qs),
(668,653,o),
(732,594,o),
(779,520,o),
(806,432,o),
(806,332,o),
(794,287,qs),
(757,155,o),
(639,90,qs),
(563,47,o),
(476,47,qs),
(381,47,o),
(298,93,qs),
(259,114,o),
(196,175,o),
(151,249,o),
(126,333,o),
(126,380,qs),
(126,522,o)
);
},
{
closed = 1;
nodes = (
(642,512,o),
(641,531,qs),
(640,542,o),
(639,569,o),
(639,605,o),
(624,605,qs),
(617,605,o),
(594,591,qs),
(583,584,o),
(576,584,qs),
(571,584,o),
(557,591,o),
(547,591,q),
(505,603,o),
(461,603,qs),
(362,603,o),
(298,535,qs),
(234,469,o),
(234,375,qs),
(234,280,o),
(297,217,qs),
(327,187,o),
(413,151,o),
(521,151,o),
(611,193,o),
(657,251,o),
(657,270,qs),
(657,274,o),
(647,290,o),
(643,290,qs),
(624,290,o),
(609,270,q),
(577,219,o),
(509,219,qs),
(437,219,o),
(396,266,qs),
(375,290,o),
(352,364,o),
(352,469,o),
(387,507,qs),
(404,525,o),
(448,545,o),
(521,545,o),
(553,530,qs),
(569,522,o),
(597,497,o),
(632,455,o),
(643,455,qs),
(655,455,o),
(655,468,qs),
(655,475,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
93 91 89 87 86 85 84 82 75 74 69 67 65 63 56 55 51 49 45 43 33 31 20 18 8 6 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 9 5 9 11 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 10 2 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
11 1 10 9 5 9 10 5 53 0 7 4 6 4 7 6 53 0 5 4 9 5 1 0 38 12 1 9 0 4 7 9 4 1 0 41 0 6 0 8 2 6 8 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 931;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,373,qs),
(434,375,l),
(497,372,l),
(520,372,o),
(538,387,o),
(538,401,o),
(527,412,o),
(521,412,q),
(495,407,l),
(485,407,o),
(470,415,o),
(457,447,o),
(457,514,qs),
(457,618,ls),
(457,691,o),
(419,729,qs),
(398,750,o),
(325,775,o),
(224,775,o),
(190,766,qs),
(176,762,o),
(175,762,qs),
(172,762,o),
(166,765,qs),
(142,775,ls),
(136,777,o),
(132,777,qs),
(127,777,o),
(117,771,o),
(117,758,qs),
(117,707,o),
(106,677,qs),
(102,662,o),
(102,656,qs),
(102,651,o),
(110,643,o),
(118,643,o),
(130,647,o),
(145,668,qs),
(170,702,o),
(221,729,o),
(252,729,qs),
(353,729,o),
(353,627,qs),
(353,584,l),
(303,607,o),
(174,607,o),
(131,580,qs),
(82,549,o),
(82,488,qs),
(82,434,o),
(162,369,o),
(308,369,o),
(354,408,q),
(358,373,o)
);
},
{
closed = 1;
nodes = (
(316,409,o),
(229,409,o),
(205,435,qs),
(194,447,o),
(183,479,o),
(183,512,o),
(188,525,qs),
(209,573,o),
(268,573,qs),
(312,573,o),
(353,551,q),
(353,442,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
65 64 58 56 54 50 47 46 45 44 36 35 33 31 28 26 18 17 13 11 8 7 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
20 1 3 2 9 1 10 1 66 55 0 3 7 10 3 33 0 3 2 1 2 3 1 53 0 1 0 10 7 1 10 1 0 41 11 8 2 7 9 1 0 7 0 1 2 40 0 4 4 12 34 0 2 2 5 1 0 39 6 1 5 5 12 2 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
20 1 3 2 9 1 10 1 66 55 0 3 7 10 3 33 0 3 2 1 2 3 1 53 0 1 0 10 7 1 10 1 0 41 11 8 2 7 9 1 0 7 0 1 2 40 0 5 5 12 34 0 2 2 4 1 0 39 6 1 4 4 12 2 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (38,42);
ref = .ttfautohint;
},
{
alignment = -1;
ref = guilsinglleft;
},
{
alignment = -1;
pos = (282,0);
ref = guilsinglleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
59 58 46 45 27 26 14 13 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
52 20 2 1 0 1 33 2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 3 1 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,283,l),
(484,124,l),
(559,124,l),
(559,356,l),
(68,356,l),
(68,283,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
5 4 3 2 1 0 3 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 2 2 1 44 0 0 2 2 0 0 0 38 0 0 0 2 0 0 39 0 2 0 2 0 0 36 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 1 56 0 0 2 2 0 0 0 38 0 0 0 2 0 0 39 0 2 0 2 0 0 36 4
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(528,388,qs),
(612,465,o),
(612,578,qs),
(612,694,o),
(527,771,qs),
(448,845,o),
(337,845,qs),
(215,845,o),
(134,764,qs),
(58,687,o),
(58,578,qs),
(58,468,o),
(139,390,qs),
(177,354,o),
(279,312,o),
(326,312,qs),
(446,312,o)
);
},
{
closed = 1;
nodes = (
(115,487,o),
(115,576,qs),
(115,667,o),
(178,728,qs),
(240,790,o),
(332,790,qs),
(419,790,o),
(483,730,qs),
(549,669,o),
(549,577,qs),
(549,484,o),
(485,422,qs),
(457,394,o),
(380,363,o),
(336,363,qs),
(245,363,o)
);
},
{
closed = 1;
nodes = (
(236,637,qs),
(236,521,ls),
(236,472,o),
(222,472,q),
(208,474,l),
(196,474,o),
(196,464,qs),
(196,449,o),
(217,449,q),
(269,453,l),
(321,449,l),
(341,449,o),
(341,464,qs),
(341,474,o),
(330,474,q),
(316,472,l),
(303,472,o),
(303,521,qs),
(303,559,l),
(315,554,o),
(336,534,o),
(366,485,o),
(417,447,o),
(458,447,o),
(476,458,o),
(476,474,o),
(467,474,q),
(453,472,l),
(448,472,o),
(438,483,o),
(427,501,qs),
(402,542,o),
(368,561,q),
(403,563,o),
(428,583,qs),
(440,592,o),
(455,620,o),
(455,668,o),
(428,688,qs),
(399,708,o),
(353,708,q),
(280,704,l),
(217,708,l),
(196,708,o),
(196,693,qs),
(196,689,o),
(203,683,o),
(212,683,o),
(222,685,q),
(236,685,o)
);
},
{
closed = 1;
nodes = (
(303,673,o),
(353,673,o),
(369,663,qs),
(378,657,o),
(389,641,o),
(389,608,o),
(376,597,qs),
(370,592,o),
(354,587,o),
(324,587,o),
(303,595,q),
(303,653,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
33 33 18 17 1 0 93 92 85 84 33 82 33 82 79 78 77 76 74 70 68 67 66 65 59 58 56 55 54 53 49 48 42 38 35 34 27 25 17 32 18 32 10 8 0 16 1 16 21 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
83 1 16 4 63 1 7 6 2 33 0 16 4 6 7 16 45 0 6 7 4 6 43 0 5 17 20 15 3 4 16 5 4 1 0 41 14 13 11 10 8 5 7 12 1 9 2 7 9 1 2 41 19 1 2 18 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 14 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
83 1 16 4 63 1 7 6 2 33 0 16 4 6 4 16 6 53 0 6 7 4 6 7 51 0 5 17 20 15 3 4 16 5 4 1 0 41 14 13 11 10 8 5 7 12 1 9 2 7 9 1 2 41 19 1 2 18 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 14 3 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,643,l),
(386,710,l),
(48,710,l),
(48,643,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
3 2 1 0 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 1 0 0 0 38 0 0 0 1 0 0 39 0 1 0 1 0 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,537,qs),
(348,575,o),
(348,637,qs),
(348,700,o),
(273,775,o),
(213,775,qs),
(146,775,o),
(106,734,qs),
(70,695,o),
(70,637,qs),
(70,574,o),
(108,537,qs),
(126,519,o),
(178,499,o),
(209,499,qs),
(270,499,o)
);
},
{
closed = 1;
nodes = (
(155,578,qs),
(146,589,o),
(135,619,o),
(135,672,o),
(154,694,qs),
(164,706,o),
(191,718,o),
(226,718,o),
(240,712,qs),
(284,692,o),
(284,637,qs),
(284,598,o),
(245,555,o),
(175,555,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
16 16 1 0 16 29 16 29 22 21 10 8 0 15 1 15 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 4 1 0 3 0 1 0 40 0 2 2 1 1 0 39 0 1 1 12 2 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,226,l),
(351,430,l),
(559,430,l),
(559,502,l),
(351,502,l),
(351,717,l),
(276,717,l),
(276,502,l),
(68,502,l),
(68,430,l),
(276,430,l),
(276,226,l)
);
},
{
closed = 1;
nodes = (
(559,84,l),
(559,157,l),
(68,157,l),
(68,84,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 5 6 2 5 0 0 41 0 6 0 7 6 7 0 0 40 4 1 0 0 1 0 0 39 3 1 1 1 15 0 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = twosuperior;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,330,o),
(358,349,qs),
(380,410,ls),
(384,422,o),
(384,433,o),
(374,439,o),
(370,439,qs),
(361,439,o),
(347,427,qs),
(326,404,o),
(293,396,qs),
(275,392,o),
(224,392,qs),
(138,392,l),
(169,446,o),
(242,502,qs),
(280,531,o),
(303,551,qs),
(374,613,o),
(374,664,qs),
(374,712,o),
(333,743,qs),
(313,758,o),
(253,775,o),
(196,775,o),
(174,771,qs),
(97,759,o),
(54,723,q),
(54,641,ls),
(54,628,o),
(68,619,o),
(74,619,qs),
(89,619,o),
(100,647,qs),
(105,663,o),
(117,679,qs),
(153,727,o),
(199,727,qs),
(235,727,o),
(273,686,o),
(273,629,o),
(248,594,qs),
(232,573,o),
(181,527,qs),
(105,461,o),
(75,409,qs),
(61,385,o),
(51,347,o),
(51,312,o),
(68,312,qs),
(347,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 44 42 38 36 26 25 19 17 13 11 0 50 1 50 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 45 values pushed */
22 1 2 1 1 33 0 2 1 5 1 2 5 53 0 5 4 1 5 4 51 0 4 6 1 0 4 0 1 0 40 0 1 1 3 1 0 39 0 3 3 12 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 420;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,305,o),
(336,346,qs),
(361,365,o),
(387,420,o),
(387,478,o),
(378,498,qs),
(351,559,o),
(276,575,q),
(294,583,o),
(311,595,qs),
(365,632,o),
(365,677,qs),
(365,722,o),
(322,749,qs),
(281,775,o),
(219,775,qs),
(135,775,o),
(73,733,q),
(73,651,ls),
(73,638,o),
(87,629,o),
(93,629,qs),
(98,629,o),
(113,642,o),
(116,652,qs),
(127,685,o),
(170,725,o),
(230,725,o),
(265,694,o),
(265,655,o),
(259,642,qs),
(243,603,o),
(188,580,qs),
(146,563,o),
(146,549,qs),
(146,535,o),
(162,535,q),
(198,542,l),
(239,542,o),
(266,508,qs),
(277,493,o),
(290,453,o),
(290,400,o),
(270,378,qs),
(259,368,o),
(229,355,o),
(173,355,o),
(119,394,o),
(109,427,qs),
(105,438,o),
(91,450,o),
(80,450,o),
(66,441,o),
(66,428,qs),
(66,346,l),
(128,305,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
55 54 40 38 34 32 28 27 19 18 17 16 9 8 4 3 8 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
37 1 4 6 47 1 2 5 0 1 7 1 3 33 0 5 4 2 4 5 2 53 3 1 2 0 4 2 0 51 0 0 1 4 0 1 51 0 1 0 7 1 7 1 0 40 0 4 4 6 1 0 39 0 6 6 12 4 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 420;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = acute;
kernLeft = a;
lastChange = "2025-07-10 16:20:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,685,o),
(304,705,qs),
(311,714,o),
(315,733,o),
(313,761,o),
(286,783,o),
(244,781,o),
(222,768,qs),
(207,758,o),
(179,721,qs),
(104,619,ls),
(101,614,o),
(94,600,o),
(101,591,qs),
(109,581,o),
(135,596,qs),
(250,662,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 9 1 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 7 values pushed */
0 0 0 12 0 35 1
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = acute;
unicode = 180;
},
{
glyphname = mu;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,-139,ls),
(225,-132,o),
(205,-105,o),
(205,-80,qs),
(205,-30,o),
(223,27,q),
(279,-12,o),
(426,-12,o),
(484,29,q),
(491,0,o),
(515,0,q),
(568,3,ls),
(574,3,o),
(593,1,o),
(614,0,o),
(636,-1,o),
(672,-1,o),
(692,15,o),
(692,31,o),
(682,40,o),
(666,40,o),
(660,38,qs),
(646,36,l),
(629,36,o),
(608,48,o),
(596,87,o),
(596,173,qs),
(596,428,ls),
(596,474,o),
(586,491,qs),
(581,502,o),
(561,502,q),
(507,500,ls),
(501,500,o),
(482,501,o),
(472,502,qs),
(450,503,ls),
(439,504,o),
(431,504,qs),
(383,504,o),
(383,478,qs),
(383,472,o),
(393,463,o),
(409,463,o),
(415,465,q),
(429,467,l),
(446,467,o),
(466,455,o),
(479,415,o),
(479,330,qs),
(479,82,l),
(434,47,o),
(323,47,o),
(283,87,qs),
(245,125,o),
(245,184,qs),
(245,428,ls),
(245,474,o),
(236,492,qs),
(230,502,o),
(209,502,q),
(155,500,ls),
(150,500,o),
(131,501,o),
(109,502,o),
(88,504,o),
(80,504,qs),
(32,504,o),
(32,478,qs),
(32,472,o),
(42,463,o),
(58,463,o),
(64,465,q),
(78,467,l),
(95,467,o),
(115,454,o),
(128,415,o),
(128,330,qs),
(128,-19,ls),
(128,-155,o),
(160,-212,qs),
(174,-238,o),
(210,-257,o),
(251,-257,o),
(271,-240,qs),
(283,-230,o),
(283,-211,qs),
(283,-182,o),
(252,-155,q),
(252,-155,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 0 0 89 0 89 82 81 79 76 75 72 69 68 66 65 58 55 53 52 51 49 46 45 43 42 37 36 29 26 25 21 18 17 15 14 6 5 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
38 1 5 1 83 80 2 13 5 2 33 17 1 16 13 0 13 16 0 53 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 12 11 2 5 5 13 1 0 39 15 14 2 13 13 13 34 0 0 0 17 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
38 1 5 1 83 80 2 13 11 2 33 17 1 16 15 0 15 16 0 53 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 12 1 11 11 13 1 0 39 14 1 13 13 13 34 0 5 5 15 1 0 39 0 15 15 13 34 0 0 0 17 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = mu;
unicode = (181,956);
},
{
glyphname = paragraph;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,3,o),
(340,2,o),
(356,1,qs),
(387,0,ls),
(401,0,o),
(410,0,q),
(410,760,l),
(389,760,o),
(365,762,qs),
(350,762,o),
(325,764,o),
(297,770,o),
(237,770,qs),
(123,770,o),
(58,710,qs),
(1,657,o),
(1,580,qs),
(1,485,o),
(70,430,qs),
(102,404,o),
(187,377,o),
(264,377,o),
(297,384,q),
(297,172,ls),
(297,86,o),
(286,59,qs),
(276,35,o),
(243,35,q),
(205,40,l),
(197,40,o),
(188,30,o),
(188,24,qs),
(188,-1,o),
(236,-1,q),
(307,3,ls)
);
},
{
closed = 1;
nodes = (
(728,742,qs),
(728,752,o),
(718,759,qs),
(713,763,o),
(695,768,o),
(663,768,o),
(640,767,qs),
(549,762,ls),
(527,760,o),
(510,760,q),
(510,0,l),
(623,0,l),
(623,607,ls),
(623,637,o),
(625,660,qs),
(631,729,o),
(677,729,q),
(709,727,l),
(728,727,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
35 35 1 0 35 53 35 53 48 43 42 41 37 36 27 24 22 20 13 12 7 6 5 4 0 34 1 28 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
11 1 3 6 1 33 11 9 2 6 6 4 1 0 39 8 5 2 4 4 12 34 0 3 3 4 1 0 39 8 5 2 4 4 12 34 2 1 1 1 0 1 2 39 7 10 2 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (83,232);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,244);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
15 14 8 6 2 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,-125,l),
(124,-116,o),
(159,-116,qs),
(181,-116,o),
(213,-145,o),
(213,-188,o),
(200,-207,qs),
(191,-219,o),
(174,-219,qs),
(131,-219,o),
(104,-191,qs),
(85,-174,o),
(64,-174,qs),
(53,-174,o),
(38,-192,o),
(38,-217,o),
(51,-228,qs),
(86,-257,o),
(151,-257,qs),
(201,-257,o),
(243,-225,qs),
(262,-211,o),
(284,-174,o),
(284,-138,o),
(274,-123,qs),
(243,-77,o),
(167,-77,qs),
(159,-77,l),
(182,14,l),
(131,22,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
27 25 21 19 17 15 11 9 3 1 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
28 1 2 4 1 33 29 0 2 0 31 0 2 4 3 4 2 3 53 0 0 0 4 2 0 4 1 0 41 0 3 3 1 1 0 39 0 1 1 17 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 327;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = onesuperior;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,312,o),
(297,329,o),
(297,343,o),
(289,357,o),
(280,357,q),
(253,354,l),
(224,354,o),
(224,427,qs),
(224,679,l),
(228,765,ls),
(228,777,o),
(208,777,qs),
(201,777,o),
(190,769,qs),
(164,748,ls),
(148,736,o),
(104,710,o),
(53,694,o),
(39,678,o),
(39,667,o),
(47,653,o),
(52,653,q),
(98,663,l),
(124,663,o),
(124,591,qs),
(124,427,ls),
(124,354,o),
(95,354,q),
(63,357,o),
(63,357,q),
(55,357,o),
(46,343,o),
(46,329,o),
(63,312,o),
(78,312,qs),
(173,317,l),
(265,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 0 32 31 30 29 25 23 15 14 13 12 9 8 6 5 0 36 2 35 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
4 1 3 5 1 5 3 1 53 7 6 2 3 1 8 1 0 1 0 1 2 40 0 5 5 12 5 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = onesuperior;
unicode = 185;
},
{
glyphname = ordmasculine;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,425,qs),
(509,483,o),
(509,576,qs),
(509,656,o),
(456,712,qs),
(396,775,o),
(292,775,qs),
(201,775,o),
(137,714,qs),
(74,653,o),
(74,569,qs),
(74,487,o),
(122,432,qs),
(148,402,o),
(232,364,o),
(289,364,qs),
(395,364,o)
);
},
{
closed = 1;
nodes = (
(186,560,o),
(186,629,o),
(191,652,qs),
(210,728,o),
(272,728,qs),
(323,728,o),
(356,682,qs),
(373,658,o),
(394,583,o),
(394,472,o),
(371,439,qs),
(360,425,o),
(331,410,o),
(289,410,o),
(243,439,o),
(208,490,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 28 26 19 18 10 8 0 16 1 16 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 2 4 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 12 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (92,42);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (397,0);
ref = guilsinglleft;
scale = (-0.9999,1);
},
{
alignment = -1;
pos = (679,0);
ref = guilsinglleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
59 58 46 45 27 26 14 13 4 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 33 values pushed */
52 20 2 1 0 1 33 2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 3 1 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,23,qs),
(790,700,ls),
(815,732,o),
(815,750,qs),
(815,760,o),
(797,775,o),
(778,775,o),
(773,773,qs),
(760,769,o),
(730,730,qs),
(222,77,ls),
(203,53,o),
(186,26,o),
(186,4,o),
(202,-12,o),
(237,-12,o)
);
},
{
closed = 1;
nodes = (
(688,45,o),
(680,31,o),
(680,18,o),
(696,0,o),
(712,0,q),
(802,5,l),
(894,0,l),
(910,0,o),
(926,18,o),
(926,31,o),
(917,45,o),
(909,45,q),
(882,42,l),
(866,42,o),
(853,71,o),
(853,105,qs),
(853,126,l),
(919,126,ls),
(936,126,o),
(941,139,qs),
(961,190,o),
(961,208,o),
(951,208,qs),
(948,208,o),
(945,206,qs),
(912,184,o),
(880,184,qs),
(853,184,l),
(853,447,ls),
(853,474,o),
(826,472,qs),
(815,471,o),
(797,451,qs),
(559,178,ls),
(544,161,o),
(544,148,qs),
(544,142,o),
(552,133,qs),
(558,126,o),
(572,126,qs),
(755,126,l),
(755,105,ls),
(755,42,o),
(724,42,q),
(697,45,l)
);
},
{
closed = 1;
nodes = (
(755,329,l),
(755,184,l),
(629,184,l)
);
},
{
closed = 1;
nodes = (
(292,312,o),
(308,329,o),
(308,343,o),
(299,357,o),
(291,357,q),
(264,354,l),
(234,354,o),
(234,427,qs),
(234,679,l),
(238,765,ls),
(238,777,o),
(219,777,qs),
(211,777,o),
(201,769,qs),
(175,748,ls),
(159,736,o),
(115,710,o),
(64,694,o),
(49,678,o),
(49,667,o),
(58,653,o),
(63,653,q),
(109,663,l),
(135,663,o),
(135,591,qs),
(135,427,ls),
(135,354,o),
(105,354,q),
(74,357,l),
(65,357,o),
(57,343,o),
(57,329,o),
(73,312,o),
(89,312,qs),
(184,317,l),
(275,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
66 64 61 61 0 0 95 94 93 92 88 86 78 77 76 75 72 71 70 69 64 99 66 98 61 63 61 63 60 59 56 52 49 48 47 46 43 41 38 36 34 32 30 29 21 19 17 16 0 15 0 15 9 8 24 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 16 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
62 1 13 14 1 33 17 1 16 0 4 0 16 4 53 0 4 14 0 4 14 51 0 6 13 5 13 6 5 53 20 19 15 3 14 23 1 13 6 14 13 1 2 41 22 12 2 5 7 1 3 2 5 3 1 0 41 18 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 998;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,23,qs),
(790,700,ls),
(815,732,o),
(815,750,qs),
(815,760,o),
(797,775,o),
(779,775,o),
(773,773,qs),
(760,769,o),
(730,730,qs),
(222,77,ls),
(203,53,o),
(187,26,o),
(187,4,o),
(202,-12,o),
(237,-12,o)
);
},
{
closed = 1;
nodes = (
(292,312,o),
(308,329,o),
(308,343,o),
(299,357,o),
(291,357,q),
(264,354,l),
(234,354,o),
(234,427,qs),
(234,679,l),
(238,765,ls),
(238,777,o),
(219,777,qs),
(211,777,o),
(201,769,qs),
(175,748,ls),
(159,736,o),
(115,710,o),
(64,694,o),
(49,678,o),
(49,667,o),
(58,653,o),
(63,653,q),
(109,663,l),
(135,663,o),
(135,591,qs),
(135,427,ls),
(135,354,o),
(105,354,q),
(74,357,l),
(65,357,o),
(57,343,o),
(57,329,o),
(73,312,o),
(89,312,qs),
(184,317,l),
(275,312,l)
);
},
{
closed = 1;
nodes = (
(941,17,o),
(947,35,qs),
(970,98,ls),
(974,109,o),
(974,120,o),
(963,126,o),
(959,126,qs),
(950,126,o),
(937,114,qs),
(915,91,o),
(883,83,qs),
(864,79,o),
(813,79,qs),
(727,79,l),
(758,133,o),
(831,189,qs),
(869,218,o),
(893,238,qs),
(963,300,o),
(963,351,qs),
(963,399,o),
(923,430,qs),
(902,445,o),
(843,462,o),
(785,462,o),
(763,458,qs),
(687,446,o),
(644,410,q),
(644,328,ls),
(644,315,o),
(658,306,o),
(663,306,qs),
(679,306,o),
(688,334,qs),
(694,350,o),
(706,366,qs),
(742,414,o),
(788,414,qs),
(824,414,o),
(862,373,o),
(862,316,o),
(837,281,qs),
(822,260,o),
(771,214,qs),
(695,148,o),
(664,96,qs),
(650,72,o),
(640,34,o),
(640,-1,o),
(657,-1,qs),
(937,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
53 52 18 16 0 0 96 94 90 88 78 77 71 69 65 63 52 102 53 102 47 46 45 44 40 38 30 29 28 27 24 23 22 21 16 51 18 50 0 15 0 15 9 8 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 16 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
74 1 3 11 1 33 6 1 5 0 13 0 5 13 53 0 15 2 14 2 15 14 53 0 13 0 11 3 13 11 1 2 41 9 8 4 3 3 12 17 2 2 15 3 2 1 0 41 7 1 0 0 12 34 0 14 14 1 1 0 39 18 10 16 3 1 1 13 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1005;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,23,qs),
(812,700,ls),
(837,732,o),
(837,750,qs),
(837,760,o),
(819,775,o),
(800,775,o),
(795,773,qs),
(781,769,o),
(752,730,qs),
(243,77,ls),
(208,33,o),
(208,15,qs),
(208,4,o),
(224,-12,o),
(259,-12,o)
);
},
{
closed = 1;
nodes = (
(685,45,o),
(676,31,o),
(676,18,o),
(692,0,o),
(708,0,q),
(798,5,l),
(890,0,l),
(906,0,o),
(922,18,o),
(922,31,o),
(913,45,o),
(905,45,q),
(878,42,l),
(862,42,o),
(849,71,o),
(849,105,qs),
(849,126,l),
(916,126,ls),
(932,126,o),
(938,139,qs),
(958,190,o),
(958,208,o),
(947,208,qs),
(944,208,o),
(941,206,qs),
(908,184,o),
(876,184,qs),
(849,184,l),
(849,447,ls),
(849,474,o),
(822,472,qs),
(811,471,o),
(793,451,qs),
(555,178,ls),
(540,161,o),
(540,148,qs),
(540,142,o),
(548,133,qs),
(554,126,o),
(568,126,qs),
(751,126,l),
(751,105,ls),
(751,42,o),
(720,42,q),
(693,45,l)
);
},
{
closed = 1;
nodes = (
(751,329,l),
(751,184,l),
(625,184,l)
);
},
{
closed = 1;
nodes = (
(285,305,o),
(336,346,qs),
(361,365,o),
(387,420,o),
(387,478,o),
(378,498,qs),
(351,559,o),
(276,575,q),
(294,583,o),
(311,595,qs),
(365,632,o),
(365,677,qs),
(365,722,o),
(322,749,qs),
(281,775,o),
(219,775,qs),
(135,775,o),
(73,733,q),
(73,651,ls),
(73,638,o),
(87,629,o),
(93,629,qs),
(98,629,o),
(113,642,o),
(116,652,qs),
(127,685,o),
(170,725,o),
(230,725,o),
(265,694,o),
(265,655,o),
(259,642,qs),
(243,603,o),
(188,580,qs),
(146,563,o),
(146,549,qs),
(146,535,o),
(162,535,q),
(198,542,l),
(239,542,o),
(266,508,qs),
(277,493,o),
(290,453,o),
(290,400,o),
(270,378,qs),
(259,368,o),
(229,355,o),
(173,355,o),
(119,394,o),
(109,427,qs),
(105,438,o),
(91,450,o),
(80,450,o),
(66,441,o),
(66,428,qs),
(66,346,l),
(128,305,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
61 61 0 0 119 118 104 102 98 96 92 91 83 82 81 80 73 72 68 67 61 63 61 63 60 59 56 52 49 48 47 46 43 41 38 36 34 32 30 29 21 19 17 16 0 15 0 15 9 8 23 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 16 1 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 1 1 2 39 10 21 2 1 1 13 1 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 16 1 35 13
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
101 1 17 0 111 1 15 18 64 62 2 20 14 3 33 0 18 17 15 17 18 15 53 16 1 15 4 17 15 4 51 0 4 13 17 4 13 51 0 13 14 17 13 14 51 0 6 20 5 20 6 5 53 0 14 0 20 6 14 20 1 0 41 22 12 2 5 7 1 3 2 5 3 1 0 41 0 17 17 0 1 0 39 19 1 0 0 12 34 11 9 8 3 2 2 10 1 2 39 0 10 10 13 34 21 1 1 1 13 1 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 994;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (35,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (505,519);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
55 54 47 46 27 25 22 20 16 14 4 2 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
24 1 3 1 1 33 0 0 4 2 4 0 2 53 0 2 1 4 2 1 51 0 4 4 5 1 0 39 0 5 5 15 34 0 1 1 3 1 2 39 0 3 3 17 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
24 1 3 1 1 33 0 0 4 2 4 0 2 53 0 2 1 4 2 1 51 0 4 4 5 1 0 39 0 5 5 21 34 0 1 1 3 1 2 39 0 3 3 17 3 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:26 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (260,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
64 63 89 88 81 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
1 1 0 1 1 33 0 17 16 17 55 0 16 3 16 55 0 15 3 14 3 15 14 53 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (260,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
64 63 89 88 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
1 1 0 1 1 33 0 17 16 17 55 0 16 3 16 55 0 15 3 14 3 15 14 53 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:26 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (201,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
79 78 64 63 93 91 84 83 78 97 79 97 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
81 1 16 18 1 1 0 1 2 33 0 18 16 18 55 17 20 2 16 3 16 55 0 15 3 14 3 15 14 53 19 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (183,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
79 78 64 63 103 101 99 97 93 92 90 88 85 83 78 105 79 105 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 77 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 3 21 17 1 0 41 22 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 2 39 13 7 6 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:26 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (156,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
64 63 104 103 96 95 88 87 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 66 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 19 1 17 18 1 16 3 17 16 1 0 41 20 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:29 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (256,0);
ref = ring.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
79 78 64 63 104 103 96 95 88 86 78 93 79 93 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
1 1 0 1 1 33 0 15 16 14 16 15 45 0 17 0 19 3 17 19 1 0 41 20 1 14 0 10 1 14 10 1 0 41 21 1 16 16 3 1 0 39 18 1 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
1 1 0 1 1 33 0 15 16 14 16 15 14 53 0 17 0 19 3 17 19 1 0 41 20 1 14 0 10 1 14 10 1 0 41 21 1 16 16 3 1 0 39 18 1 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
kernLeft = AE;
kernRight = E;
lastChange = "2025-07-10 16:02:03 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,20,o),
(161,40,o),
(152,51,o),
(145,51,q),
(120,48,l),
(88,48,o),
(88,66,qs),
(89,76,o),
(102,94,qs),
(174,196,ls),
(179,204,o),
(184,210,qs),
(199,228,o),
(233,228,qs),
(454,228,l),
(454,186,ls),
(454,127,o),
(450,99,qs),
(448,84,o),
(441,64,o),
(426,41,o),
(399,41,q),
(368,44,l),
(359,44,o),
(349,30,o),
(349,11,o),
(359,3,qs),
(364,-1,o),
(382,-7,o),
(415,-7,o),
(430,-6,qs),
(486,-1,ls),
(501,0,o),
(520,0,qs),
(928,0,l),
(953,74,o),
(987,133,qs),
(1005,165,o),
(1005,188,o),
(994,188,q),
(991,187,o),
(979,185,o),
(963,169,qs),
(944,150,ls),
(927,133,o),
(907,117,qs),
(838,63,o),
(717,63,qs),
(615,63,ls),
(569,63,o),
(569,129,qs),
(569,328,ls),
(569,341,o),
(591,358,o),
(611,358,qs),
(733,358,ls),
(755,358,o),
(774,347,qs),
(786,340,o),
(806,318,o),
(815,295,o),
(821,288,o),
(827,288,qs),
(842,288,o),
(842,332,o),
(840,348,q),
(840,351,ls),
(838,370,o),
(838,392,q),
(842,471,l),
(842,498,o),
(827,498,qs),
(821,498,o),
(815,490,o),
(805,467,o),
(795,456,qs),
(767,421,o),
(733,421,qs),
(612,421,ls),
(569,421,o),
(569,447,qs),
(569,647,ls),
(569,668,o),
(589,690,o),
(615,690,qs),
(747,690,ls),
(812,690,o),
(860,657,qs),
(881,643,o),
(914,606,o),
(939,574,o),
(948,574,qs),
(959,574,o),
(959,588,qs),
(959,595,o),
(954,612,qs),
(936,672,ls),
(923,715,o),
(918,753,q),
(549,753,ls),
(514,753,o),
(472,757,qs),
(456,759,o),
(424,761,o),
(380,761,o),
(368,750,qs),
(363,746,o),
(358,735,o),
(358,723,o),
(368,710,o),
(377,710,q),
(401,713,l),
(417,713,o),
(440,709,o),
(440,688,o),
(424,665,qs),
(92,196,ls),
(22,98,o),
(-23,64,qs),
(-46,48,o),
(-72,48,q),
(-95,51,l),
(-106,51,o),
(-117,36,o),
(-117,19,o),
(-99,0,o),
(-63,0,o),
(-18,7,o),
(5,7,q),
(107,0,l),
(134,0,o)
);
},
{
closed = 1;
nodes = (
(231,295,o),
(242,309,qs),
(454,617,l),
(454,275,l),
(255,275,ls),
(231,275,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
132 131 0 0 131 136 132 136 0 130 0 130 127 126 125 124 117 115 109 108 107 106 101 100 98 95 91 90 83 80 76 73 68 66 59 57 53 50 46 43 39 37 31 29 26 25 20 19 18 17 10 9 8 7 4 3 2 1 27 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 129 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 25 23 2 17 17 13 17 35 15
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 112 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 25 23 17 16 1 5 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 129 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 25 23 2 17 17 13 17 35 15
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 141 values pushed */
133 1 8 9 64 63 2 12 13 2 33 0 8 9 11 9 8 11 53 0 15 20 14 20 15 14 53 0 10 0 13 12 10 13 1 0 41 26 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 17 1 0 39 25 23 2 17 17 13 17 35 17
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 16:03:35 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(755,274,o),
(737,274,qs),
(718,274,o),
(710,243,qs),
(696,188,o),
(674,153,qs),
(615,60,o),
(501,60,qs),
(358,60,o),
(264,150,qs),
(164,247,o),
(164,406,qs),
(164,531,o),
(246,620,qs),
(283,661,o),
(378,706,o),
(429,706,qs),
(633,706,o),
(717,552,qs),
(724,539,o),
(739,539,qs),
(746,539,o),
(758,549,o),
(758,574,o),
(741,640,qs),
(733,670,o),
(729,698,qs),
(727,712,o),
(726,742,o),
(726,785,o),
(712,785,qs),
(705,785,o),
(691,772,o),
(652,733,o),
(629,733,o),
(615,740,qs),
(538,777,o),
(455,777,qs),
(279,777,o),
(165,668,qs),
(48,556,o),
(48,373,qs),
(48,226,o),
(140,122,qs),
(234,13,o),
(394,-7,q),
(370,-123,l),
(394,-113,o),
(429,-113,qs),
(451,-113,o),
(483,-142,o),
(483,-186,o),
(470,-205,qs),
(461,-216,o),
(444,-216,qs),
(401,-216,o),
(373,-189,qs),
(355,-172,o),
(334,-172,qs),
(323,-172,o),
(308,-190,o),
(308,-215,o),
(321,-226,qs),
(356,-254,o),
(421,-254,qs),
(471,-254,o),
(513,-223,qs),
(532,-208,o),
(554,-172,o),
(554,-135,o),
(544,-121,qs),
(513,-74,o),
(437,-74,qs),
(429,-74,l),
(445,-11,l),
(449,-11,o),
(457,-11,o),
(460,-11,qs),
(636,-11,o),
(755,102,q),
(755,243,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
79 77 73 71 64 62 60 58 50 48 46 45 43 41 32 30 26 24 22 20 16 14 8 6 4 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 12 34 1 0 11 33 1 3 5 3 33 0 7 6 10 6 7 45 0 9 10 12 10 9 12 53 0 12 11 10 12 11 51 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 10 10 6 1 0 39 8 1 6 6 12 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:49 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (216,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
109 108 101 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 104 values pushed */
0 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 2 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 15
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:46 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (216,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
109 108 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 104 values pushed */
0 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 15
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (157,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
99 98 113 111 104 103 98 117 99 117 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 112 values pushed */
101 1 16 18 1 33 0 18 16 18 55 17 19 2 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 16
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (112,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
124 123 116 115 108 107 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 106 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 19 1 17 18 1 16 8 17 16 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:10 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (53,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 75 74 67 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
0 14 13 14 55 0 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (53,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 75 74 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 46 values pushed */
0 14 13 14 55 0 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:09 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (42,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-5,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
65 64 1 1 79 77 70 69 64 83 65 83 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 54 values pushed */
67 1 13 15 1 33 0 15 13 15 55 14 17 2 13 7 13 55 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 16 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:09 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-50,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
1 1 90 89 82 81 74 73 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 48 values pushed */
16 1 14 15 1 13 7 14 13 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 17 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
kernRight = O;
lastChange = "2025-07-10 16:04:12 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,o),
(156,666,o),
(156,602,qs),
(156,402,l),
(98,402,ls),
(76,402,o),
(69,398,qs),
(64,396,o),
(59,387,o),
(59,359,o),
(79,350,o),
(96,350,qs),
(156,350,l),
(156,153,ls),
(156,90,o),
(146,66,qs),
(135,40,o),
(102,40,q),
(70,43,l),
(51,43,o),
(51,20,qs),
(51,11,o),
(61,3,qs),
(66,-1,o),
(83,-8,o),
(124,-8,o),
(161,-4,qs),
(174,-2,o),
(201,0,o),
(245,0,o),
(268,-2,qs),
(334,-8,ls),
(377,-12,o),
(435,-12,qs),
(559,-12,o),
(660,40,qs),
(761,91,o),
(818,179,qs),
(878,271,o),
(878,383,qs),
(878,566,o),
(770,668,qs),
(653,777,o),
(427,777,qs),
(390,777,o),
(322,770,qs),
(298,767,o),
(249,762,o),
(187,762,o),
(157,766,qs),
(145,767,o),
(117,769,o),
(74,769,o),
(61,758,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,718,o),
(70,718,q),
(94,721,l),
(114,721,o)
);
},
{
closed = 1;
nodes = (
(438,350,ls),
(456,350,o),
(476,358,o),
(476,384,o),
(473,390,qs),
(467,402,o),
(437,402,qs),
(273,402,l),
(273,650,ls),
(273,667,o),
(292,688,o),
(343,706,o),
(416,706,qs),
(576,706,o),
(662,625,qs),
(752,540,o),
(752,373,qs),
(752,201,o),
(667,127,qs),
(626,91,o),
(507,61,o),
(336,61,o),
(305,75,qs),
(273,90,o),
(273,131,qs),
(273,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 86 84 80 78 74 72 65 64 0 60 0 60 56 54 49 47 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 16 11 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 13 13 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 16:17:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (223,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
85 84 1 1 109 107 105 103 99 98 96 94 91 89 84 111 85 111 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 22 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
71 30 2 2 5 1 33 20 23 2 16 0 18 17 16 18 1 0 41 0 21 19 1 17 4 21 17 1 0 41 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 22 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (284,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
52 51 44 42 38 36 30 28 19 17 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:36 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (284,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
52 51 43 42 38 36 30 28 19 17 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 5 55 0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 2 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:37 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (225,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
42 41 56 54 47 46 41 60 42 60 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
44 1 4 6 1 33 0 6 4 6 55 5 7 2 4 0 4 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:56 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (207,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
42 41 66 64 62 60 56 55 53 51 48 46 41 68 42 68 38 36 30 28 19 17 7 5 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
8 10 2 4 0 6 5 4 6 1 0 41 0 9 7 1 5 0 9 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:37 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (180,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
67 66 59 58 51 50 43 42 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,267,l),
(458,100,l),
(511,153,l),
(344,320,l),
(507,483,l),
(456,535,l),
(292,372,l),
(125,540,l),
(71,487,l),
(239,319,l),
(75,156,l),
(127,104,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 9 1 13
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
lastChange = "2025-07-10 16:18:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(855,297,o),
(855,394,qs),
(855,439,o),
(845,482,qs),
(813,614,o),
(708,697,q),
(769,788,ls),
(787,814,o),
(787,832,qs),
(787,855,o),
(756,855,qs),
(740,855,o),
(723,830,qs),
(656,731,l),
(571,780,o),
(465,780,qs),
(277,780,o),
(162,662,qs),
(108,606,o),
(50,455,o),
(50,265,o),
(129,109,o),
(201,60,q),
(137,-35,ls),
(120,-59,o),
(120,-77,qs),
(120,-87,o),
(136,-101,o),
(147,-101,qs),
(168,-101,o),
(185,-76,qs),
(256,29,l),
(341,-9,o),
(529,-9,o),
(677,45,o),
(789,147,o)
);
},
{
closed = 1;
nodes = (
(158,270,o),
(158,445,qs),
(158,565,o),
(231,644,qs),
(303,721,o),
(410,721,qs),
(511,721,o),
(598,646,q),
(267,157,l)
);
},
{
closed = 1;
nodes = (
(735,484,o),
(735,326,qs),
(735,196,o),
(666,121,qs),
(602,52,o),
(503,52,qs),
(402,52,o),
(314,116,q),
(642,600,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 39 37 25 23 20 18 7 5 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 55 values pushed */
21 1 4 2 53 45 44 36 29 12 6 5 4 3 1 0 5 3 33 0 1 0 1 56 0 3 3 14 34 0 4 4 2 1 0 39 0 2 2 12 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (291,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
2 1 112 111 104 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 22 4 22 21 4 53 0 22 21 2 22 1 0 38 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (291,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
2 1 112 111 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 22 4 22 21 4 53 0 22 21 2 22 1 0 38 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (232,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
102 101 2 1 116 114 107 106 101 120 102 120 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 85 values pushed */
104 1 21 23 49 1 9 2 3 1 17 9 3 33 0 23 21 23 55 22 25 2 21 4 21 55 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 2 39 20 19 1 24 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 24 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (187,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 127 126 119 118 111 110 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 81 values pushed */
49 1 9 2 3 1 17 9 2 33 24 1 22 23 1 21 4 22 21 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-10 16:20:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (220,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 95 94 86 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 22 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
66 44 5 3 1 0 1 33 0 20 19 20 55 0 19 11 19 55 15 14 13 12 10 9 21 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 2 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-10 16:18:21 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(618,217,qs),
(716,282,o),
(716,400,qs),
(716,499,o),
(637,557,qs),
(599,584,o),
(486,615,o),
(356,615,o),
(281,597,q),
(281,600,ls),
(281,665,o),
(291,690,qs),
(297,706,o),
(318,722,o),
(345,722,o),
(360,720,qs),
(366,719,o),
(376,717,o),
(392,717,o),
(401,732,o),
(401,750,o),
(389,759,qs),
(383,763,o),
(364,770,o),
(325,770,o),
(281,766,qs),
(253,764,ls),
(240,762,o),
(224,762,qs),
(208,762,o),
(196,764,qs),
(170,766,ls),
(157,767,o),
(126,770,o),
(83,770,o),
(71,759,qs),
(65,754,o),
(61,744,o),
(61,732,o),
(71,719,o),
(80,719,q),
(111,722,l),
(128,722,o),
(150,707,o),
(166,664,o),
(166,600,qs),
(166,161,ls),
(166,97,o),
(156,70,qs),
(144,41,o),
(111,41,q),
(80,43,l),
(61,43,o),
(61,21,qs),
(61,11,o),
(71,3,qs),
(76,-1,o),
(94,-7,o),
(130,-7,o),
(170,-4,qs),
(196,-1,ls),
(208,0,o),
(224,0,qs),
(240,0,o),
(253,-1,qs),
(281,-4,ls),
(296,-5,o),
(329,-7,o),
(374,-7,o),
(389,3,qs),
(396,8,o),
(401,19,o),
(401,30,o),
(392,45,o),
(376,45,o),
(366,43,o),
(355,42,o),
(344,41,o),
(317,41,o),
(295,60,o),
(281,106,o),
(281,175,q),
(338,161,o),
(391,161,qs),
(533,161,o)
);
},
{
closed = 1;
nodes = (
(281,514,o),
(318,538,qs),
(338,552,o),
(379,552,qs),
(474,552,o),
(531,503,qs),
(559,479,o),
(591,409,o),
(591,329,o),
(579,302,qs),
(541,225,o),
(417,225,qs),
(338,225,o),
(281,254,q),
(281,483,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
1 0 96 94 88 86 77 76 70 69 66 65 60 59 58 57 56 54 50 49 44 43 42 41 34 33 32 31 26 25 22 20 18 17 16 15 10 9 6 5 0 84 1 84 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
75 1 19 17 85 1 18 19 2 1 0 18 3 33 0 17 0 19 18 17 19 1 0 41 0 18 20 1 0 1 18 0 1 0 41 16 15 10 3 9 9 11 1 0 39 14 13 12 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,43,o),
(277,43,q),
(253,40,l),
(244,40,o),
(232,45,o),
(223,77,o),
(223,167,qs),
(223,637,ls),
(223,788,o),
(425,788,o),
(425,634,qs),
(425,556,o),
(391,515,qs),
(375,497,o),
(336,476,o),
(289,464,o),
(289,423,o),
(339,417,q),
(528,389,o),
(528,190,qs),
(528,48,o),
(442,48,qs),
(418,48,o),
(400,57,qs),
(390,62,o),
(374,79,o),
(360,108,o),
(344,108,qs),
(337,108,o),
(323,98,o),
(323,89,qs),
(323,50,o),
(358,20,qs),
(375,6,o),
(419,-12,o),
(496,-12,o),
(534,4,qs),
(649,52,o),
(649,219,qs),
(649,309,o),
(582,380,qs),
(515,450,o),
(413,468,q),
(469,494,o),
(505,541,qs),
(543,593,o),
(543,650,qs),
(543,736,o),
(487,789,qs),
(460,815,o),
(382,845,o),
(281,845,o),
(239,829,qs),
(107,778,o),
(107,566,qs),
(107,167,ls),
(106,94,o),
(95,66,qs),
(84,40,o),
(56,40,q),
(32,43,l),
(24,43,o),
(13,30,o),
(13,11,o),
(22,3,qs),
(28,-1,o),
(47,-7,o),
(73,-7,o),
(132,0,o),
(164,0,qs),
(184,0,o),
(223,-7,o),
(244,-7,qs),
(295,-7,o),
(295,22,qs),
(295,30,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
74 73 72 71 66 65 54 52 48 46 40 39 24 23 16 15 14 13 8 7 6 4 3 1 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
32 1 7 9 1 33 0 7 9 3 9 7 3 53 0 9 9 5 1 0 39 0 5 5 14 34 11 10 8 4 4 3 3 0 1 0 39 6 2 1 3 0 0 13 0 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
kernLeft = a;
lastChange = "2025-07-10 16:20:43 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (167,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 75 74 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 12 5 12 55 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 5 12 55 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 0 39 1 13 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = a;
lastChange = "2025-07-10 16:20:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (167,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 82 81 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 2 39 1 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 0 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 13 2 0 0 13 34 9 1 8 8 0 1 2 39 1 13 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
kernLeft = a;
lastChange = "2025-07-10 16:20:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (109,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 89 88 83 81 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
92 1 12 13 17 1 10 2 71 60 3 3 8 10 3 33 14 1 12 13 5 13 12 5 53 0 2 0 10 8 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 15 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 105 values pushed */
92 1 12 13 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 14 1 12 13 5 13 12 5 53 0 2 0 10 11 2 10 1 2 41 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 15 2 0 0 13 34 9 1 8 8 0 1 0 39 1 15 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
kernLeft = a;
lastChange = "2025-07-10 16:20:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (105,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 98 97 95 93 89 87 83 82 80 78 75 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 2 39 1 18 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 109 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 17 1 15 0 13 12 15 13 1 0 41 0 16 14 1 12 5 16 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 18 2 0 0 13 34 9 1 8 8 0 1 2 39 1 18 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
kernLeft = a;
lastChange = "2025-07-10 16:20:41 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (88,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 1 98 97 90 89 82 81 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 2 0 10 8 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 2 0 10 11 2 10 1 0 41 14 1 12 12 13 1 0 39 15 1 13 13 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 99 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 15 1 13 14 1 12 5 13 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
kernLeft = a;
lastChange = "2025-07-10 16:20:49 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (165,0);
ref = ring;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
73 72 2 1 94 93 90 89 81 79 72 87 73 87 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 8 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 110 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 14 17 1 12 5 14 12 1 0 41 0 2 0 10 11 2 10 1 0 41 0 15 15 13 1 0 39 0 13 13 18 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 14
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
kernLeft = a;
lastChange = "2025-07-10 16:20:42 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(854,-12,o),
(919,77,qs),
(938,103,o),
(938,123,qs),
(938,128,o),
(925,142,o),
(902,142,o),
(887,122,qs),
(863,88,o),
(795,60,o),
(688,60,o),
(640,95,qs),
(584,134,o),
(562,210,q),
(703,245,ls),
(799,268,o),
(923,313,qs),
(946,321,o),
(946,346,qs),
(946,359,o),
(934,382,qs),
(859,514,o),
(714,514,qs),
(685,514,o),
(656,508,qs),
(566,489,o),
(507,427,q),
(450,514,o),
(314,514,qs),
(278,514,o),
(252,510,qs),
(240,508,o),
(218,503,o),
(204,499,o),
(199,498,o),
(190,498,o),
(183,501,qs),
(161,511,ls),
(146,518,o),
(139,518,qs),
(121,518,o),
(121,493,qs),
(121,430,o),
(108,390,qs),
(103,371,o),
(103,362,qs),
(103,347,o),
(131,347,o),
(154,378,qs),
(184,419,o),
(225,436,qs),
(248,445,o),
(293,445,qs),
(367,445,o),
(397,413,qs),
(432,376,o),
(436,280,q),
(374,306,o),
(305,306,qs),
(203,306,o),
(138,262,qs),
(72,216,o),
(72,147,qs),
(72,74,o),
(128,31,qs),
(156,11,o),
(237,-12,o),
(352,-12,o),
(460,34,o),
(498,76,q),
(575,-12,o)
);
},
{
closed = 1;
nodes = (
(551,294,qs),
(551,371,o),
(597,412,qs),
(638,449,o),
(701,449,qs),
(752,449,o),
(792,409,qs),
(808,393,o),
(825,356,o),
(825,334,o),
(814,330,qs),
(706,293,o),
(553,256,q),
(551,274,o)
);
},
{
closed = 1;
nodes = (
(259,52,o),
(191,104,o),
(191,196,o),
(264,250,o),
(385,250,o),
(437,224,q),
(441,163,o),
(465,120,q),
(450,104,o),
(432,92,qs),
(374,52,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
95 94 91 90 80 78 70 69 64 63 60 59 48 46 42 40 35 34 31 29 23 22 18 16 12 10 3 2 14 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 15 34 0 3 3 4 1 0 39 7 6 2 4 4 15 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 16 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
43 1 3 2 71 13 2 12 1 89 56 2 9 12 87 0 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 0 39 10 1 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,45,o),
(517,75,o),
(536,106,o),
(536,128,o),
(521,143,o),
(496,140,o),
(483,122,qs),
(441,62,o),
(355,62,qs),
(278,62,o),
(226,120,qs),
(170,181,o),
(170,280,qs),
(170,358,o),
(216,401,qs),
(237,421,o),
(292,440,o),
(380,440,o),
(413,429,qs),
(434,422,o),
(473,396,o),
(512,346,o),
(525,346,qs),
(539,346,o),
(539,361,qs),
(539,370,o),
(534,383,qs),
(525,406,o),
(522,433,qs),
(521,446,o),
(521,476,o),
(521,514,o),
(504,514,qs),
(499,514,o),
(491,511,qs),
(476,503,ls),
(467,500,o),
(450,493,o),
(438,493,o),
(423,500,o),
(399,507,o),
(363,514,o),
(293,514,o),
(256,504,qs),
(144,473,o),
(86,378,qs),
(49,317,o),
(49,251,qs),
(49,156,o),
(105,86,qs),
(161,17,o),
(251,-3,q),
(226,-125,l),
(250,-116,o),
(284,-116,qs),
(306,-116,o),
(339,-145,o),
(339,-188,o),
(325,-207,qs),
(317,-219,o),
(299,-219,qs),
(257,-219,o),
(229,-191,qs),
(211,-174,o),
(190,-174,qs),
(178,-174,o),
(164,-192,o),
(164,-217,o),
(176,-228,qs),
(211,-257,o),
(277,-257,qs),
(326,-257,o),
(368,-225,qs),
(387,-211,o),
(410,-174,o),
(410,-138,o),
(400,-123,qs),
(368,-77,o),
(292,-77,qs),
(285,-77,l),
(301,-11,l),
(312,-12,o),
(347,-12,o),
(396,0,o),
(443,19,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
76 74 67 66 62 60 52 50 46 45 42 41 30 28 24 22 20 18 14 12 6 4 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 16 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
32 1 0 11 31 1 3 5 2 33 0 3 5 4 5 3 4 53 0 1 0 5 3 1 5 1 0 41 0 7 7 15 34 0 10 10 6 1 0 39 8 1 6 6 15 34 0 9 9 6 1 0 39 8 1 6 6 15 34 0 11 11 0 1 0 39 0 0 0 13 34 0 4 4 2 1 0 39 0 2 2 17 2 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (166,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
60 59 51 49 39 38 31 29 25 23 8 6 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 5 0 5 55 0 2 4 1 4 2 1 53 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (166,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
67 66 51 49 39 38 31 29 25 23 8 6 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (107,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
74 73 68 66 59 58 51 49 39 38 31 29 25 23 8 6 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
77 1 5 6 20 1 2 4 2 33 7 1 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 18 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (86,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
83 82 75 74 67 66 59 58 51 49 39 38 31 29 25 23 8 6 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 7 1 5 5 6 1 0 39 8 1 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 8 1 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (52,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (40,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 1 52 51 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
39 1 0 5 1 33 0 8 5 8 55 6 1 5 5 15 34 9 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (53,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (40,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 1 59 58 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
39 1 0 5 1 33 0 8 8 12 34 6 1 5 5 15 34 9 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-19,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 66 65 60 58 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 49 values pushed */
69 1 8 9 39 1 0 5 2 33 10 1 8 9 5 9 8 5 53 0 9 9 18 34 6 1 5 5 15 34 11 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (8,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-40,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 75 74 67 66 59 58 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
39 1 0 5 1 33 11 1 9 10 1 8 5 9 8 1 0 41 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
39 1 0 5 1 33 10 1 8 8 9 1 0 39 11 1 9 9 12 34 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
39 1 0 5 1 33 11 1 9 10 1 8 5 9 8 1 0 41 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(642,715,o),
(642,736,qs),
(642,746,o),
(627,761,o),
(602,761,o),
(565,750,qs),
(445,711,l),
(355,790,o),
(237,827,qs),
(180,845,o),
(145,845,qs),
(119,845,o),
(119,826,qs),
(119,816,o),
(133,804,o),
(151,798,qs),
(276,754,o),
(352,681,q),
(227,642,ls),
(197,632,o),
(197,611,qs),
(197,600,o),
(210,585,o),
(233,585,o),
(264,595,qs),
(394,636,l),
(455,556,o),
(478,448,q),
(406,489,o),
(325,489,qs),
(210,489,o),
(134,417,qs),
(59,346,o),
(59,238,qs),
(59,125,o),
(135,57,qs),
(210,-10,o),
(334,-10,qs),
(455,-10,o),
(534,81,qs),
(617,176,o),
(617,331,qs),
(617,523,o),
(490,666,q),
(600,701,ls)
);
},
{
closed = 1;
nodes = (
(216,383,qs),
(257,429,o),
(332,429,qs),
(405,429,o),
(450,383,qs),
(472,360,o),
(497,296,o),
(497,202,o),
(486,164,qs),
(457,51,o),
(352,51,qs),
(277,51,o),
(228,110,qs),
(205,139,o),
(177,216,o),
(177,258,qs),
(177,339,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
59 57 51 49 40 39 34 32 21 20 15 13 7 5 7 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
37 26 18 0 4 2 4 16 1 6 1 2 33 0 2 4 1 4 2 1 53 0 1 0 6 5 1 6 1 0 41 0 3 3 14 34 0 4 4 12 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
37 26 18 0 4 2 4 16 1 6 1 2 33 0 2 4 1 4 2 1 53 0 1 0 6 5 1 6 1 0 41 0 3 3 14 34 0 4 4 12 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (161,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 112 111 109 107 103 101 97 96 94 92 89 87 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
28 1 12 4 75 34 2 2 12 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 4 19 15 1 0 41 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 21 3 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
28 1 12 4 75 34 2 2 12 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 6 19 15 1 0 41 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 21 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (165,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
37 36 33 31 25 23 15 13 7 5 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 4 55 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (165,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
44 43 33 31 25 23 15 13 7 5 5 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (106,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
51 50 45 43 36 35 33 31 25 23 15 13 7 5 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
54 1 4 5 1 33 6 1 4 5 0 5 4 0 53 0 5 5 18 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (103,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
60 59 57 55 51 49 45 44 42 40 37 35 33 31 25 23 15 13 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
9 1 7 0 5 4 7 5 1 0 41 0 8 6 1 4 0 8 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (85,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
60 59 52 51 44 43 36 35 33 31 25 23 15 13 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 4 5 1 0 39 7 1 5 5 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 4 0 5 4 1 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,490,o),
(388,536,o),
(370,557,qs),
(361,567,o),
(333,581,o),
(282,581,o),
(261,559,qs),
(250,548,o),
(240,521,o),
(240,474,o),
(257,454,qs),
(266,443,o),
(294,429,o),
(331,429,o),
(358,442,o),
(377,463,o)
);
},
{
closed = 1;
nodes = (
(559,283,l),
(559,356,l),
(68,356,l),
(68,283,l)
);
},
{
closed = 1;
nodes = (
(294,59,o),
(346,59,o),
(368,82,qs),
(388,104,o),
(388,132,qs),
(388,165,o),
(370,186,qs),
(361,197,o),
(333,210,o),
(282,210,o),
(261,188,qs),
(250,178,o),
(240,149,o),
(240,120,o),
(248,93,o),
(266,72,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
34 33 26 25 19 18 17 16 10 9 2 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
0 1 0 0 2 1 0 1 0 41 0 2 0 3 4 2 3 0 0 41 0 4 5 5 4 1 0 38 0 4 4 5 1 0 39 0 5 4 5 1 0 36 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(606,203,o),
(606,288,o),
(600,315,qs),
(580,408,o),
(507,461,q),
(555,532,ls),
(572,559,o),
(572,574,qs),
(572,585,o),
(557,598,o),
(536,598,o),
(521,588,o),
(510,573,qs),
(454,491,l),
(399,514,o),
(329,514,qs),
(211,514,o),
(130,437,qs),
(49,359,o),
(49,250,qs),
(49,113,o),
(148,41,q),
(148,40,l),
(93,-42,ls),
(78,-64,o),
(78,-82,qs),
(78,-92,o),
(92,-105,o),
(104,-105,qs),
(124,-105,o),
(141,-81,qs),
(203,11,l),
(258,-12,o),
(397,-12,o),
(500,30,o),
(570,104,o)
);
},
{
closed = 1;
nodes = (
(170,201,o),
(170,286,qs),
(170,329,o),
(181,356,qs),
(211,440,o),
(301,440,qs),
(354,440,o),
(398,408,q),
(215,138,l)
);
},
{
closed = 1;
nodes = (
(483,301,o),
(483,212,qs),
(483,167,o),
(473,141,qs),
(443,62,o),
(353,62,qs),
(301,62,o),
(258,93,q),
(440,363,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
48 46 39 37 25 24 20 18 7 5 2 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
30 21 2 4 2 53 45 44 36 4 5 4 3 1 0 5 3 33 0 3 2 3 55 0 1 0 1 56 0 4 4 2 1 0 39 0 2 2 15 34 0 5 5 0 1 0 39 0 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (164,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
82 81 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 3 15 55 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (164,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
89 88 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (105,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
96 95 90 88 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
99 1 15 16 36 1 5 1 1 1 11 5 3 33 17 1 15 16 3 16 15 3 53 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 2 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (84,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
105 104 97 96 89 88 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
36 1 5 1 1 1 11 5 2 33 17 1 15 15 16 1 0 39 18 1 16 16 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
36 1 5 1 1 1 11 5 2 33 18 1 16 17 1 15 3 16 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (207,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 86 85 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 0 17 17 12 34 18 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,-219,o),
(1,-231,o),
(3,-236,qs),
(11,-257,o),
(50,-257,qs),
(152,-254,l),
(257,-257,ls),
(286,-257,o),
(299,-247,qs),
(304,-242,o),
(309,-231,o),
(309,-219,o),
(298,-206,o),
(290,-206,q),
(266,-209,l),
(251,-209,o),
(230,-203,o),
(211,-167,o),
(211,-87,qs),
(211,22,l),
(267,-12,o),
(352,-12,qs),
(467,-12,o),
(546,65,qs),
(623,142,o),
(623,251,qs),
(623,374,o),
(549,444,qs),
(514,478,o),
(412,514,o),
(272,514,o),
(211,474,q),
(211,781,ls),
(211,821,o),
(199,836,qs),
(192,844,o),
(172,844,q),
(98,838,l),
(26,839,ls),
(9,839,o),
(1,830,qs),
(-2,826,o),
(-5,817,o),
(-5,804,o),
(14,796,o),
(40,790,o),
(67,782,o),
(78,767,o),
(81,755,qs),
(95,692,o),
(95,564,qs),
(95,-87,ls),
(95,-157,o),
(83,-185,qs),
(72,-209,o),
(44,-209,q),
(20,-206,l),
(12,-206,o)
);
},
{
closed = 1;
nodes = (
(454,388,qs),
(505,331,o),
(505,227,qs),
(505,151,o),
(463,107,qs),
(442,86,o),
(383,63,o),
(325,63,o),
(306,69,qs),
(240,87,o),
(211,146,q),
(211,389,l),
(265,439,o),
(325,439,qs),
(407,439,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
59 58 0 0 65 64 58 72 59 72 0 57 0 57 53 49 44 43 42 41 36 34 27 26 21 20 19 17 2 1 13 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 16 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 16 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
25 1 9 3 61 60 2 10 9 37 1 4 10 3 33 2 1 1 1 14 34 12 1 9 9 3 1 0 39 0 3 3 15 34 0 10 10 4 1 0 39 0 4 4 13 34 11 8 6 5 4 0 0 7 1 2 39 0 7 7 17 7 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (127,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
1 1 102 101 94 93 86 85 78 77 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 20 1 18 19 1 17 6 18 17 1 0 41 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 19 1 17 17 18 1 0 39 20 1 18 18 12 34 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
55 28 27 3 2 0 1 33 0 2 0 3 0 2 3 53 20 1 18 19 1 17 6 18 17 1 0 41 21 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:27 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (169,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
78 78 64 63 78 91 78 89 85 82 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 20 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
1 1 0 1 1 33 0 15 3 14 3 15 14 53 0 16 19 1 17 3 16 17 1 0 41 18 1 14 0 10 1 14 10 1 2 41 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = a;
lastChange = "2025-07-10 16:20:44 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (111,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
2 1 75 74 73 72 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
17 1 10 2 71 60 3 3 8 10 2 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 8 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 14 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 97 values pushed */
17 1 10 2 71 60 2 11 10 3 1 8 11 3 33 0 12 0 13 5 12 13 0 0 41 0 2 0 10 11 2 10 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 14 2 0 0 13 34 9 1 8 8 0 1 0 39 1 14 2 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (168,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
64 63 95 93 91 89 85 83 80 79 71 69 63 77 64 76 62 61 58 57 56 55 50 47 41 40 39 38 34 32 31 30 27 26 25 24 16 15 9 8 7 6 3 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
92 78 2 17 16 1 1 0 1 2 33 18 1 16 17 17 16 43 0 15 3 14 3 15 14 53 20 1 14 0 10 1 14 10 1 2 41 0 19 19 17 1 0 39 0 17 17 14 34 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
92 78 2 17 16 1 1 0 1 2 33 18 1 16 17 16 55 0 15 3 14 3 15 14 53 20 1 14 0 10 1 14 10 1 2 41 0 19 19 17 1 0 39 0 17 17 14 34 0 3 3 12 34 12 11 9 8 5 4 2 7 1 1 0 1 0 39 13 7 6 3 0 0 13 0 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = a;
lastChange = "2025-07-10 16:20:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (72,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (76,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 1 91 89 86 84 80 78 74 73 70 68 63 61 52 51 50 49 41 40 39 38 36 34 28 27 22 21 16 14 7 6 1 59 2 57 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
88 72 2 13 12 17 1 10 2 71 60 3 3 8 10 3 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 8 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 11 9 2 8 8 0 1 0 39 1 16 2 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 108 values pushed */
88 72 2 13 12 17 1 10 2 71 60 2 11 10 3 1 8 11 4 33 0 13 0 15 5 13 15 1 2 41 0 2 0 10 11 2 10 1 0 41 14 1 12 12 12 34 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 11 11 0 1 0 39 1 16 2 0 0 13 34 9 1 8 8 0 1 0 39 1 16 2 0 0 13 0 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-10 16:03:28 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-7,o),
(244,11,o),
(244,31,o),
(233,44,o),
(225,44,q),
(201,41,l),
(166,41,o),
(166,62,qs),
(167,79,o),
(192,140,q),
(207,182,l),
(220,213,o),
(270,213,qs),
(526,213,ls),
(552,213,o),
(577,199,o),
(583,185,qs),
(617,120,l),
(637,77,o),
(637,56,qs),
(637,39,o),
(607,39,q),
(572,43,l),
(554,43,o),
(554,22,qs),
(554,12,o),
(565,3,qs),
(571,-1,o),
(590,-7,o),
(630,-7,o),
(679,-1,o),
(704,0,q),
(650,-55,o),
(650,-138,qs),
(650,-163,o),
(655,-180,qs),
(670,-227,o),
(717,-227,qs),
(825,-226,ls),
(833,-226,o),
(842,-218,o),
(842,-212,qs),
(842,-200,o),
(815,-193,qs),
(797,-189,o),
(780,-178,qs),
(731,-147,o),
(731,-94,qs),
(731,-37,o),
(763,-2,q),
(810,-7,o),
(842,-7,o),
(862,11,o),
(862,30,o),
(854,44,o),
(844,44,q),
(819,41,l),
(800,41,o),
(777,64,qs),
(761,80,o),
(736,134,qs),
(478,698,ls),
(457,746,o),
(444,765,qs),
(438,774,o),
(427,782,o),
(418,782,o),
(407,775,o),
(393,745,qs),
(131,179,ls),
(89,89,o),
(64,58,qs),
(51,41,o),
(28,41,q),
(4,43,l),
(-15,43,o),
(-15,21,qs),
(-15,12,o),
(5,-7,o),
(26,-7,q),
(96,0,l),
(194,-7,l)
);
},
{
closed = 1;
nodes = (
(258,275,o),
(258,289,qs),
(258,294,o),
(265,310,qs),
(378,568,ls),
(392,602,o),
(401,602,qs),
(409,602,o),
(427,556,qs),
(532,300,ls),
(536,292,o),
(536,289,qs),
(536,275,o),
(481,275,qs),
(312,275,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
83 82 90 88 82 96 83 95 81 80 77 76 75 74 69 66 60 59 58 57 52 51 50 49 44 41 30 29 26 25 24 23 15 14 8 7 6 5 2 1 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 0 7 0 7 56 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 34 0 7 7 17 7 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
31 0 2 0 1 1 33 0 17 3 16 3 17 16 53 0 7 0 7 56 18 1 16 0 12 1 16 12 1 2 41 0 3 3 12 34 14 13 11 10 5 4 2 7 1 1 0 1 0 39 15 9 8 6 4 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = a;
lastChange = "2025-07-10 16:20:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,-2,q),
(442,-57,o),
(442,-137,qs),
(442,-184,o),
(466,-211,qs),
(479,-226,o),
(510,-226,qs),
(617,-225,ls),
(625,-225,o),
(634,-217,o),
(634,-212,qs),
(634,-207,o),
(626,-198,o),
(589,-188,o),
(572,-178,qs),
(523,-147,o),
(523,-93,qs),
(523,-34,o),
(556,-1,q),
(600,-4,o),
(603,-4,qs),
(628,-4,o),
(642,7,qs),
(647,11,o),
(651,22,o),
(651,32,o),
(641,46,o),
(633,46,q),
(605,42,l),
(589,42,o),
(568,49,o),
(551,85,o),
(551,173,qs),
(551,314,ls),
(551,409,o),
(506,455,qs),
(479,482,o),
(387,514,o),
(266,514,o),
(196,497,q),
(193,497,o),
(173,509,qs),
(159,518,o),
(140,518,qs),
(121,518,o),
(121,493,qs),
(121,430,o),
(108,390,qs),
(103,371,o),
(103,362,qs),
(103,347,o),
(131,347,o),
(154,378,qs),
(184,419,o),
(218,434,qs),
(234,440,o),
(269,445,o),
(320,445,o),
(348,439,qs),
(437,422,o),
(437,326,qs),
(437,270,l),
(369,306,o),
(285,306,qs),
(198,306,o),
(140,270,qs),
(72,228,o),
(72,147,qs),
(72,73,o),
(124,31,qs),
(150,11,o),
(228,-12,o),
(302,-12,o),
(324,-8,qs),
(396,6,o),
(438,48,q),
(443,-3,o),
(472,-3,qs),
(485,-3,o)
);
},
{
closed = 1;
nodes = (
(389,57,o),
(314,57,qs),
(254,57,o),
(187,107,o),
(187,158,qs),
(187,177,o),
(195,192,qs),
(223,245,o),
(314,245,qs),
(379,245,o),
(437,208,q),
(437,116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 89 87 82 80 72 69 58 56 51 50 49 48 40 39 38 37 35 33 27 26 21 20 15 13 6 5 0 78 1 78 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 15 34 0 4 4 5 1 0 39 7 1 5 5 15 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
16 1 12 2 90 79 2 3 8 12 77 59 2 0 8 3 33 0 2 0 12 8 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 13 9 2 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 34 0 11 11 17 11 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 99 values pushed */
16 1 12 2 90 79 2 13 12 2 1 8 13 77 59 2 0 8 4 33 0 11 0 11 56 0 2 0 12 13 2 12 1 0 41 0 6 6 15 34 0 3 3 5 1 0 39 7 1 5 5 21 34 0 4 4 5 1 0 39 7 1 5 5 21 34 0 13 13 0 1 0 39 10 1 14 3 0 0 13 34 9 1 8 8 0 1 0 39 10 1 14 3 0 0 13 0 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 16:03:33 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (281,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
64 63 55 54 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
1 1 6 7 1 33 0 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,7);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (166,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
66 65 49 47 43 42 40 38 18 16 9 8 4 2 7 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 43 values pushed */
0 2 0 2 56 0 6 6 12 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 16:03:35 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (223,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
54 53 68 66 59 58 53 72 54 72 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
56 1 8 10 1 1 6 7 2 33 0 10 8 10 55 9 11 2 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,7);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (107,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
73 72 67 65 58 57 49 47 43 42 40 38 18 16 9 8 4 2 9 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
76 1 6 7 1 33 8 1 6 7 3 7 6 3 53 0 2 0 2 56 0 7 7 18 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 16:03:37 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (304,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
54 53 63 61 53 69 54 69 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
1 1 6 7 1 33 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 9 10 1 8 1 9 8 1 0 41 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 0 39 0 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,7);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (180,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
57 56 66 64 56 72 57 72 49 47 43 42 40 38 18 16 9 8 4 2 9 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 49 values pushed */
0 2 0 2 56 0 7 8 1 6 3 7 6 1 0 41 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = C;
lastChange = "2025-07-10 16:03:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (223,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
70 68 64 62 56 54 51 49 45 43 36 34 32 30 22 20 18 17 15 13 4 2 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
71 66 2 8 9 1 1 6 7 2 33 10 1 9 8 9 55 0 8 1 8 55 0 2 1 5 1 2 45 0 4 5 7 5 4 7 53 0 7 6 5 7 6 51 0 5 5 1 1 0 39 3 1 1 1 12 34 0 6 6 0 1 2 39 0 0 0 16 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,7);
ref = .ttfautohint;
},
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (107,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
67 65 59 57 49 47 43 42 40 38 18 16 9 8 4 2 8 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 58 values pushed */
74 69 2 6 7 1 33 0 6 7 3 7 6 3 53 0 2 0 2 56 0 7 7 12 34 0 4 4 15 34 0 1 1 3 1 0 39 5 1 3 3 15 34 0 0 0 3 1 0 39 5 1 3 3 15 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernLeft = H;
kernRight = O;
lastChange = "2025-07-10 16:03:40 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (242,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 86 84 80 78 72 70 65 63 56 55 1 51 1 51 44 43 42 41 36 35 32 31 28 26 18 16 13 12 9 8 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 11 15 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
87 82 2 12 13 1 33 14 1 13 12 13 55 0 12 1 12 55 15 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (39,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,2);
ref = d;
},
{
alignment = -1;
pos = (589,73);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
88 87 71 70 68 67 61 59 56 53 52 51 50 48 43 42 41 40 32 31 27 26 23 22 12 10 3 2 14 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 12 12 2 1 0 39 13 4 3 3 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 12 12 2 1 0 39 13 4 3 3 2 2 14 34 0 10 10 1 1 0 39 0 1 1 21 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 4 3 2 2 2 14 34 0 12 12 13 1 0 39 0 13 13 14 34 0 10 10 1 1 0 39 0 1 1 21 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
kernRight = O;
lastChange = "2025-07-10 16:03:42 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,o),
(156,666,o),
(156,602,qs),
(156,402,l),
(98,402,ls),
(76,402,o),
(69,398,qs),
(64,396,o),
(59,387,o),
(59,359,o),
(79,350,o),
(96,350,qs),
(156,350,l),
(156,153,ls),
(156,90,o),
(146,66,qs),
(135,40,o),
(102,40,q),
(70,43,l),
(51,43,o),
(51,20,qs),
(51,11,o),
(61,3,qs),
(66,-1,o),
(83,-8,o),
(124,-8,o),
(161,-4,qs),
(174,-2,o),
(201,0,o),
(245,0,o),
(268,-2,qs),
(334,-8,ls),
(377,-12,o),
(435,-12,qs),
(559,-12,o),
(660,40,qs),
(761,91,o),
(818,179,qs),
(878,271,o),
(878,383,qs),
(878,566,o),
(770,668,qs),
(653,777,o),
(427,777,qs),
(390,777,o),
(322,770,qs),
(298,767,o),
(249,762,o),
(187,762,o),
(157,766,qs),
(145,767,o),
(117,769,o),
(74,769,o),
(61,758,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,718,o),
(70,718,q),
(94,721,l),
(114,721,o)
);
},
{
closed = 1;
nodes = (
(438,350,ls),
(456,350,o),
(476,358,o),
(476,384,o),
(473,390,qs),
(467,402,o),
(437,402,qs),
(273,402,l),
(273,650,ls),
(273,667,o),
(292,688,o),
(343,706,o),
(416,706,qs),
(576,706,o),
(662,625,qs),
(752,540,o),
(752,373,qs),
(752,201,o),
(667,127,qs),
(626,91,o),
(507,61,o),
(336,61,o),
(305,75,qs),
(273,90,o),
(273,131,qs),
(273,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 86 84 80 78 74 72 65 64 0 60 0 60 56 54 49 47 43 42 41 40 35 34 31 30 27 25 17 15 12 11 8 7 2 1 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 13 16 11 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
14 1 10 15 1 9 12 10 9 1 0 41 16 11 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 13 13 1 1 0 39 3 2 2 1 1 12 34 0 12 12 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-3,q),
(531,0,ls),
(536,0,o),
(555,-1,o),
(566,-2,qs),
(588,-4,ls),
(598,-4,o),
(631,-4,o),
(645,7,qs),
(650,11,o),
(654,22,o),
(654,33,o),
(644,42,o),
(636,42,q),
(608,38,l),
(591,38,o),
(571,50,o),
(558,88,o),
(558,173,qs),
(558,597,l),
(597,597,ls),
(644,597,o),
(644,618,qs),
(644,626,o),
(629,642,o),
(597,642,qs),
(558,642,l),
(558,781,ls),
(558,824,o),
(552,835,qs),
(549,841,o),
(537,845,o),
(521,845,o),
(511,843,o),
(505,842,qs),
(475,839,ls),
(464,838,o),
(435,838,o),
(404,841,qs),
(394,842,o),
(374,844,o),
(347,844,o),
(332,828,o),
(332,821,qs),
(332,800,o),
(367,797,qs),
(386,795,o),
(418,783,o),
(442,742,o),
(442,659,qs),
(442,642,l),
(274,642,ls),
(228,642,o),
(228,621,qs),
(228,597,o),
(273,597,qs),
(442,597,l),
(442,487,l),
(384,514,o),
(310,514,qs),
(195,514,o),
(116,438,qs),
(39,362,o),
(39,252,qs),
(39,132,o),
(113,62,qs),
(148,27,o),
(250,-11,o),
(385,-11,o),
(446,26,q),
(456,-3,o)
);
},
{
closed = 1;
nodes = (
(258,62,o),
(208,119,qs),
(157,178,o),
(157,277,qs),
(157,353,o),
(199,396,qs),
(241,440,o),
(317,440,qs),
(399,440,o),
(442,385,q),
(442,98,l),
(403,62,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
82 81 75 73 70 67 66 65 64 62 57 56 55 54 50 48 45 43 38 37 33 32 29 28 19 17 15 13 11 9 2 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 13 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 16 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 13 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 79 values pushed */
12 1 14 1 72 71 2 15 14 0 1 0 9 3 33 7 1 3 8 1 2 1 3 2 1 2 41 6 5 2 4 4 14 34 0 14 14 1 1 0 39 0 1 1 15 34 0 15 15 0 1 0 39 13 12 11 3 0 0 16 34 10 1 9 9 0 1 0 39 13 12 11 3 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:51 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (125,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
98 98 98 111 98 109 105 102 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 105 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 16 18 1 17 8 16 17 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (109,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
60 59 58 57 51 49 39 38 31 29 25 23 8 6 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 5 0 6 0 5 6 0 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (124,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
115 113 111 109 105 103 100 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 120 values pushed */
112 98 2 17 16 1 33 18 1 16 17 17 16 43 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 0 19 19 17 1 0 39 0 17 17 14 34 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 17
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 119 values pushed */
112 98 2 17 16 1 33 18 1 16 17 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 0 19 19 17 1 0 39 0 17 17 14 34 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 17
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (74,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
76 74 71 69 65 63 59 58 51 49 39 38 31 29 25 23 8 6 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
73 57 2 6 5 20 1 2 4 2 33 0 2 4 1 4 2 1 53 0 6 0 8 0 6 8 1 2 41 7 1 5 5 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (239,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
99 98 108 106 98 114 99 114 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 105 values pushed */
0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 17 18 1 16 8 17 16 1 0 41 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 0 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 14
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (180,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
58 57 67 65 57 73 58 73 51 49 39 38 31 29 25 23 8 6 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
20 1 2 4 1 33 0 2 4 1 4 2 1 53 0 6 7 1 5 0 6 5 1 0 41 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:59 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,-179,qs),
(493,-227,o),
(558,-227,qs),
(666,-226,ls),
(673,-226,o),
(682,-218,o),
(682,-212,qs),
(682,-200,o),
(663,-195,q),
(630,-189,o),
(608,-178,qs),
(546,-148,o),
(546,-94,qs),
(546,-44,o),
(593,0,q),
(629,0,l),
(649,74,o),
(678,133,qs),
(707,189,o),
(682,188,qs),
(678,187,o),
(667,185,o),
(650,169,qs),
(633,150,ls),
(618,133,o),
(600,117,qs),
(540,63,o),
(419,63,qs),
(317,63,ls),
(271,63,o),
(271,129,qs),
(271,328,ls),
(271,341,o),
(293,358,o),
(313,358,qs),
(435,358,ls),
(456,358,o),
(477,344,qs),
(487,336,o),
(507,313,o),
(517,291,o),
(523,282,o),
(529,282,qs),
(544,282,o),
(544,310,q),
(541,392,l),
(544,471,l),
(544,498,o),
(529,498,qs),
(523,498,o),
(517,490,o),
(507,467,o),
(497,456,qs),
(469,421,o),
(435,421,qs),
(314,421,ls),
(271,421,o),
(271,447,qs),
(271,655,ls),
(271,676,o),
(291,699,o),
(317,699,qs),
(449,699,ls),
(489,699,o),
(514,693,qs),
(527,690,o),
(560,675,o),
(587,646,qs),
(616,614,o),
(616,614,q),
(633,595,o),
(640,595,qs),
(650,595,o),
(650,609,qs),
(650,616,o),
(646,632,qs),
(633,687,ls),
(624,727,o),
(621,762,q),
(217,762,ls),
(190,762,o),
(154,766,qs),
(129,769,ls),
(116,770,o),
(73,770,o),
(61,759,qs),
(55,754,o),
(51,744,o),
(51,731,o),
(61,719,o),
(70,719,q),
(94,722,l),
(113,722,o),
(138,707,o),
(156,667,o),
(156,602,qs),
(156,161,ls),
(156,95,o),
(146,70,qs),
(135,41,o),
(101,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,3,qs),
(65,-1,o),
(83,-7,o),
(116,-7,o),
(131,-6,qs),
(188,-1,ls),
(202,0,o),
(222,0,qs),
(529,0,l),
(465,-60,o),
(465,-138,qs),
(465,-162,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
114 111 101 100 97 96 89 86 82 79 74 72 68 66 62 59 55 52 45 43 37 35 32 31 26 25 24 23 16 15 14 13 8 7 5 2 18 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 17 0 17 56 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 0 35 14
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 34 0 17 17 17 17 35 14
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 101 values pushed */
0 8 9 11 9 8 11 53 0 15 12 14 12 15 14 53 0 17 0 17 56 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 0 0 39 16 1 2 0 0 13 34 3 1 2 2 0 0 0 39 16 1 2 0 0 13 0 35 14
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,-137,qs),
(343,-226,o),
(411,-226,qs),
(518,-225,ls),
(525,-225,o),
(534,-217,o),
(534,-212,qs),
(534,-199,o),
(508,-192,qs),
(490,-188,o),
(473,-178,qs),
(424,-147,o),
(424,-93,qs),
(424,-25,o),
(470,23,q),
(488,34,o),
(503,47,qs),
(550,88,o),
(550,121,qs),
(550,125,o),
(548,129,qs),
(541,146,o),
(530,146,qs),
(513,146,o),
(498,124,qs),
(489,111,o),
(473,100,qs),
(424,62,o),
(365,62,qs),
(296,62,o),
(246,96,qs),
(189,135,o),
(172,206,q),
(258,227,ls),
(410,263,o),
(535,308,qs),
(550,313,o),
(555,325,qs),
(558,330,o),
(559,340,o),
(559,359,o),
(539,395,qs),
(510,443,o),
(467,473,qs),
(407,514,o),
(327,514,qs),
(207,514,o),
(125,434,qs),
(49,358,o),
(49,251,qs),
(49,131,o),
(131,58,qs),
(169,24,o),
(271,-12,o),
(358,-12,o),
(385,-7,q),
(343,-67,o)
);
},
{
closed = 1;
nodes = (
(165,276,qs),
(165,285,ls),
(165,371,o),
(227,411,qs),
(272,440,o),
(323,440,qs),
(375,440,o),
(408,410,qs),
(422,396,o),
(436,366,o),
(436,349,o),
(435,346,qs),
(429,337,o),
(305,304,qs),
(166,268,l),
(165,272,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
67 65 54 51 34 32 28 26 11 9 2 1 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 2 3 45 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 16 34 0 4 4 17 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
23 1 3 5 0 1 0 2 2 33 0 3 5 2 5 3 2 53 0 4 0 4 56 0 5 5 1 1 0 39 0 1 1 15 34 0 2 2 0 1 2 39 0 0 0 13 0 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
kernLeft = H;
kernRight = E;
lastChange = "2025-07-10 16:03:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (157,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
115 113 109 107 101 99 95 92 87 85 81 79 75 72 68 65 59 57 51 49 46 45 40 39 38 37 30 29 28 27 22 21 19 16 13 12 5 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 112 values pushed */
116 111 2 16 17 1 33 18 1 17 16 17 55 0 16 8 16 55 0 10 11 13 11 10 13 53 0 1 14 0 14 1 0 53 0 12 0 15 14 12 15 1 0 41 7 1 6 6 8 1 0 39 9 1 8 8 12 34 0 11 11 8 1 0 39 9 1 8 8 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 0 0 2 1 2 39 3 1 2 2 13 34 5 1 4 4 2 1 0 39 3 1 2 2 13 2 35 16
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (107,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
68 66 60 58 51 49 39 38 31 29 25 23 8 6 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 16 3 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
75 70 2 5 6 20 1 2 4 2 33 0 5 6 0 6 5 0 53 0 2 4 1 4 2 1 53 0 6 6 12 34 0 4 4 0 1 0 39 0 0 0 15 34 0 1 1 3 1 0 39 0 3 3 13 3 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = G;
lastChange = "2025-07-10 16:04:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (255,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
83 82 1 1 97 95 88 87 82 101 83 101 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 2 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 4 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 85 values pushed */
85 1 14 16 7 1 7 0 2 33 0 16 14 16 55 15 18 2 14 4 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 17 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (91,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
101 100 95 93 86 85 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 95 values pushed */
104 1 12 13 6 1 4 8 1 1 11 6 3 33 14 1 12 13 2 13 12 2 53 0 2 0 13 2 0 51 0 3 1 9 1 3 9 53 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 13 13 18 34 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = G;
lastChange = "2025-07-10 16:04:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (222,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 99 97 95 93 89 87 84 83 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 15 14 43 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 88 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
96 82 2 15 14 7 1 7 0 2 33 16 1 14 15 14 55 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 18 13 9 8 4 0 7 10 0 1 0 41 0 17 17 15 1 0 39 0 15 15 14 34 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 12
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (58,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
103 101 98 96 92 90 86 85 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 99 values pushed */
100 84 2 13 12 6 1 4 8 1 1 11 6 3 33 0 2 15 0 15 2 0 53 0 3 1 9 1 3 9 53 0 13 0 15 2 13 15 1 2 41 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 14 1 12 12 12 34 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = G;
lastChange = "2025-07-10 16:04:33 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (337,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
83 82 1 1 92 90 82 98 83 98 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 2 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 4 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 0 15 17 1 14 4 15 14 1 0 41 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 1 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (164,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
85 84 94 92 84 100 85 100 81 80 74 72 68 66 62 60 52 50 43 42 35 33 32 31 26 25 21 20 17 16 15 13 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 89 values pushed */
6 1 4 8 1 1 11 6 2 33 0 2 12 0 12 2 0 53 0 3 1 9 1 3 9 53 0 13 14 1 12 2 13 12 1 0 41 0 8 5 1 4 6 8 4 1 0 41 0 6 0 11 10 6 11 1 0 41 0 1 1 15 34 0 9 9 0 1 0 39 0 0 0 15 34 0 10 10 7 1 2 39 0 7 7 17 7 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Gcommaaccent;
kernLeft = O;
kernRight = G;
lastChange = "2025-07-10 16:04:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (348,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
1 1 93 91 86 85 1 81 1 81 77 76 75 74 71 70 65 64 63 62 55 53 46 45 41 39 32 30 28 26 24 22 14 13 3 2 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 6 6 2 1 0 39 4 1 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 13 34 0 14 14 15 1 0 39 0 15 15 17 15 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
7 1 7 0 1 33 0 3 2 6 2 3 6 53 0 5 6 10 6 5 10 53 12 11 2 10 16 13 9 8 4 0 7 10 0 1 0 41 0 4 4 18 34 0 6 6 2 1 0 39 0 2 2 12 34 0 7 7 1 1 0 39 0 1 1 16 34 0 14 14 15 1 0 39 0 15 15 17 15 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = Gcommaaccent;
unicode = 290;
},
{
glyphname = gcommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,594,qs),
(370,602,o),
(380,624,o),
(380,656,o),
(362,673,o),
(340,683,o),
(322,693,o),
(322,714,o),
(334,730,o),
(374,751,o),
(374,774,o),
(362,788,o),
(351,788,qs),
(307,788,o),
(274,757,qs),
(257,742,o),
(236,698,o),
(236,621,o),
(277,576,o),
(341,576,o)
);
},
{
closed = 1;
nodes = (
(113,-38,qs),
(55,-73,o),
(55,-125,qs),
(55,-179,o),
(112,-213,qs),
(179,-252,o),
(313,-252,qs),
(443,-252,o),
(521,-208,qs),
(596,-164,o),
(596,-93,qs),
(596,-32,o),
(540,1,qs),
(510,19,o),
(415,42,o),
(253,52,o),
(214,65,qs),
(195,72,o),
(195,87,qs),
(195,99,o),
(218,109,qs),
(229,114,o),
(267,121,o),
(299,121,o),
(310,121,o),
(316,120,q),
(422,123,o),
(490,186,qs),
(558,248,o),
(558,341,qs),
(558,412,o),
(499,458,q),
(556,460,o),
(620,493,o),
(620,518,qs),
(620,528,o),
(606,544,o),
(576,544,o),
(557,532,qs),
(539,521,ls),
(501,497,o),
(434,496,q),
(384,514,o),
(329,514,qs),
(209,514,o),
(136,459,qs),
(101,433,o),
(62,359,o),
(62,288,o),
(68,264,qs),
(91,184,o),
(177,145,q),
(138,131,o),
(97,85,o),
(97,62,qs),
(97,14,o),
(162,-16,q),
(133,-25,o)
);
},
{
closed = 1;
nodes = (
(186,388,qs),
(211,440,o),
(297,440,qs),
(358,440,o),
(396,404,qs),
(442,361,o),
(442,280,qs),
(442,189,o),
(326,189,qs),
(176,189,o),
(176,345,qs),
(176,370,o)
);
},
{
closed = 1;
nodes = (
(202,-50,o),
(240,-39,q),
(387,-44,o),
(453,-73,qs),
(482,-85,o),
(505,-115,o),
(505,-143,o),
(489,-164,o),
(436,-185,o),
(353,-185,qs),
(163,-185,o),
(163,-109,qs),
(163,-89,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 100 99 93 91 87 85 81 79 71 69 62 61 54 52 51 50 45 44 40 39 36 35 34 32 0 19 0 19 7 5 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 91 values pushed */
25 1 6 10 20 1 13 8 2 33 0 4 1 2 1 4 2 53 0 5 3 11 3 5 11 53 0 10 7 1 6 8 10 6 1 0 41 0 8 0 13 12 8 13 1 0 41 14 1 1 1 0 1 0 39 0 0 0 18 34 0 3 3 15 34 0 11 11 2 1 0 39 0 2 2 15 34 0 12 12 9 1 2 39 0 9 9 17 9 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = gcommaaccent;
unicode = 291;
},
{
glyphname = Hcircumflex;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:04:40 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = H;
},
{
alignment = -1;
pos = (250,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
151 150 1 1 165 163 156 155 150 169 151 169 1 149 1 149 143 140 134 133 132 131 126 125 122 121 118 117 111 110 109 108 101 100 99 98 93 92 89 88 84 83 78 77 75 74 69 66 61 60 59 58 53 52 49 47 43 42 37 36 35 34 27 26 25 24 19 18 15 13 10 9 3 2 35 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
153 1 30 32 1 33 0 32 30 32 55 31 34 2 30 8 30 55 0 13 0 28 0 13 28 1 2 41 20 19 15 14 12 11 7 7 6 6 8 1 0 39 18 17 16 10 9 5 8 8 12 34 33 29 27 26 22 21 5 4 8 0 0 1 1 0 39 25 24 23 3 2 5 1 1 13 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 946;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,22,qs),
(366,30,o),
(355,43,o),
(347,43,q),
(323,40,l),
(309,40,o),
(288,47,o),
(268,86,o),
(268,167,qs),
(268,347,l),
(296,383,o),
(333,406,qs),
(351,417,o),
(392,431,o),
(444,431,o),
(484,408,o),
(514,359,o),
(514,306,qs),
(514,167,ls),
(514,92,o),
(495,40,o),
(466,40,q),
(440,43,l),
(431,43,o),
(421,30,o),
(421,18,o),
(423,13,qs),
(431,-7,o),
(473,-7,q),
(576,0,l),
(592,0,o),
(648,-6,qs),
(693,-11,o),
(711,3,qs),
(716,8,o),
(720,18,o),
(720,30,o),
(711,43,o),
(703,43,q),
(677,40,l),
(665,40,o),
(647,49,o),
(629,89,o),
(629,167,qs),
(629,334,ls),
(629,382,o),
(617,417,qs),
(581,514,o),
(458,514,qs),
(349,514,o),
(268,427,q),
(268,781,ls),
(268,834,o),
(257,841,q),
(328,884,l),
(454,809,ls),
(470,798,o),
(481,798,qs),
(496,798,o),
(494,825,o),
(488,833,qs),
(382,948,ls),
(348,986,o),
(330,986,qs),
(322,986,o),
(303,981,o),
(275,948,q),
(174,838,l),
(163,838,ls),
(146,838,o),
(114,841,qs),
(94,843,ls),
(84,844,o),
(58,844,o),
(42,828,o),
(42,821,qs),
(42,800,o),
(78,797,qs),
(96,795,o),
(128,783,o),
(152,742,o),
(152,660,qs),
(152,167,ls),
(152,95,o),
(140,67,qs),
(128,40,o),
(101,40,q),
(77,43,l),
(68,43,o),
(58,30,o),
(58,11,o),
(67,3,qs),
(73,-1,o),
(92,-7,o),
(118,-7,o),
(178,0,o),
(209,0,q),
(314,-7,l),
(366,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 0 95 94 93 92 84 83 77 76 75 74 70 67 60 59 58 57 50 48 41 39 35 33 30 28 25 24 12 11 10 9 4 3 0 98 2 98 18 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
43 1 4 6 44 1 7 4 88 47 2 2 14 3 33 0 6 4 6 55 0 7 4 8 4 7 8 53 5 1 4 4 14 34 0 14 14 8 1 0 39 0 8 8 15 34 16 15 13 12 10 9 3 7 2 2 0 1 2 39 11 1 17 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Hbar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,53,o),
(271,90,o),
(271,154,qs),
(271,374,ls),
(271,387,o),
(295,405,o),
(323,405,qs),
(623,405,ls),
(650,405,o),
(675,387,o),
(675,374,qs),
(675,154,ls),
(675,91,o),
(665,67,qs),
(653,41,o),
(620,41,q),
(588,43,l),
(580,43,o),
(570,30,o),
(570,12,o),
(579,3,qs),
(584,-1,o),
(602,-7,o),
(639,-7,o),
(678,-4,qs),
(704,-1,ls),
(717,0,o),
(748,0,o),
(761,-1,qs),
(787,-4,ls),
(800,-5,o),
(814,-6,qs),
(869,-11,o),
(886,3,qs),
(891,8,o),
(895,19,o),
(895,30,o),
(885,43,o),
(876,43,q),
(845,41,l),
(828,41,o),
(806,53,o),
(790,91,o),
(790,154,qs),
(790,531,l),
(851,531,ls),
(899,531,o),
(899,555,qs),
(899,565,o),
(895,570,qs),
(885,583,o),
(851,583,qs),
(790,583,l),
(790,608,ls),
(790,671,o),
(800,695,qs),
(812,722,o),
(845,722,q),
(876,719,l),
(885,719,o),
(895,732,o),
(895,750,o),
(886,759,qs),
(880,763,o),
(862,770,o),
(826,770,o),
(787,766,qs),
(761,764,ls),
(748,762,o),
(717,762,o),
(704,764,qs),
(678,766,ls),
(665,767,o),
(635,770,o),
(591,770,o),
(579,759,qs),
(574,754,o),
(570,744,o),
(570,732,o),
(580,719,o),
(588,719,q),
(620,722,o),
(620,722,q),
(637,722,o),
(659,709,o),
(675,671,o),
(675,608,qs),
(675,583,l),
(271,583,l),
(271,608,ls),
(271,672,o),
(281,695,qs),
(292,722,o),
(326,722,q),
(357,719,l),
(376,719,o),
(376,741,qs),
(376,750,o),
(367,759,qs),
(361,763,o),
(344,770,o),
(307,770,o),
(268,766,qs),
(241,764,ls),
(229,762,o),
(213,762,qs),
(198,762,o),
(186,764,qs),
(160,766,ls),
(146,767,o),
(116,770,o),
(73,770,o),
(61,759,qs),
(55,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(69,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,583,l),
(93,583,ls),
(44,583,o),
(44,559,qs),
(44,531,o),
(91,531,qs),
(156,531,l),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(69,43,l),
(61,43,o),
(51,30,o),
(51,11,o),
(61,3,qs),
(66,-1,o),
(83,-7,o),
(120,-7,o),
(160,-4,qs),
(186,-1,ls),
(198,0,o),
(213,0,qs),
(229,0,o),
(241,-1,qs),
(268,-4,ls),
(281,-5,o),
(296,-6,qs),
(350,-11,o),
(367,3,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(367,43,o),
(357,43,q),
(326,41,l),
(309,41,o)
);
},
{
closed = 1;
nodes = (
(271,475,o),
(271,500,qs),
(271,531,l),
(675,531,l),
(675,500,ls),
(675,475,o),
(623,475,qs),
(323,475,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
162 161 0 0 165 164 161 168 162 167 0 160 0 160 154 151 145 144 143 142 137 136 133 132 129 128 122 121 120 119 115 113 109 107 103 102 101 100 95 94 91 90 86 85 80 79 77 76 72 71 67 66 65 64 59 58 55 53 49 48 43 42 41 40 36 34 32 30 26 25 24 23 18 17 14 12 9 8 2 1 38 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 76 values pushed */
23 15 2 7 35 24 2 6 34 7 6 1 0 41 37 1 34 0 32 0 34 32 1 0 41 22 21 17 16 14 13 9 7 8 8 10 1 0 39 20 19 18 12 11 5 10 10 12 34 36 33 31 30 26 25 5 4 8 0 0 1 1 0 39 29 28 27 3 2 5 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 946;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,22,qs),
(366,30,o),
(355,43,o),
(347,43,q),
(323,40,l),
(309,40,o),
(288,47,o),
(268,86,o),
(268,167,qs),
(268,347,l),
(296,383,o),
(333,406,qs),
(351,417,o),
(392,431,o),
(444,431,o),
(484,408,o),
(514,359,o),
(514,306,qs),
(514,167,ls),
(514,92,o),
(495,40,o),
(466,40,q),
(440,43,l),
(431,43,o),
(421,30,o),
(421,18,o),
(423,13,qs),
(431,-7,o),
(473,-7,q),
(576,0,l),
(592,0,o),
(648,-6,qs),
(693,-11,o),
(711,3,qs),
(716,8,o),
(720,18,o),
(720,30,o),
(711,43,o),
(703,43,q),
(677,40,l),
(665,40,o),
(647,49,o),
(629,89,o),
(629,167,qs),
(629,334,ls),
(629,382,o),
(617,417,qs),
(581,514,o),
(458,514,qs),
(349,514,o),
(268,427,q),
(268,581,l),
(441,581,ls),
(460,581,o),
(474,587,qs),
(481,591,o),
(489,602,o),
(489,620,o),
(484,626,qs),
(472,642,o),
(441,642,qs),
(268,642,l),
(268,781,ls),
(268,824,o),
(263,835,qs),
(260,841,o),
(248,845,o),
(229,845,o),
(216,842,qs),
(186,839,o),
(186,839,q),
(174,838,o),
(146,838,o),
(114,841,qs),
(94,843,ls),
(84,844,o),
(58,844,o),
(42,828,o),
(42,821,qs),
(42,800,o),
(78,797,qs),
(96,795,o),
(128,783,o),
(152,742,o),
(152,660,qs),
(152,642,l),
(98,642,ls),
(75,642,o),
(49,625,o),
(49,599,o),
(74,581,o),
(96,581,qs),
(152,581,l),
(152,167,ls),
(152,95,o),
(140,67,qs),
(128,40,o),
(101,40,q),
(77,43,l),
(68,43,o),
(58,30,o),
(58,11,o),
(67,3,qs),
(73,-1,o),
(92,-7,o),
(118,-7,o),
(178,0,o),
(209,0,q),
(314,-7,l),
(366,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 0 106 105 104 103 95 94 88 87 86 85 81 78 71 70 69 68 61 59 57 55 49 47 42 41 37 36 33 32 23 21 18 16 12 11 10 9 4 3 0 109 2 109 21 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
99 58 2 2 17 1 33 9 1 5 10 1 4 11 5 4 1 2 41 8 7 2 6 6 14 34 0 17 17 11 1 0 39 0 11 11 15 34 19 18 16 15 13 12 3 7 2 2 0 1 0 39 14 1 20 3 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Itilde;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-23,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
65 64 1 1 89 87 85 83 79 78 76 74 71 69 64 91 65 91 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 59 values pushed */
17 20 2 13 0 15 14 13 15 1 0 41 0 18 16 1 14 7 18 14 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 19 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (26,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-22,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 1 75 74 72 70 66 64 60 59 57 55 52 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 15 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 53 values pushed */
39 1 0 5 1 33 13 1 11 0 9 8 11 9 1 0 41 0 12 10 1 8 5 12 8 1 0 41 6 1 5 5 15 34 14 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (11,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-37,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
64 64 1 1 64 77 64 75 71 68 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
0 13 16 1 14 7 13 14 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (31,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-17,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 1 52 51 50 49 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 11 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 41 values pushed */
39 1 0 5 1 33 0 8 0 9 5 8 9 0 0 41 6 1 5 5 15 34 10 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:09 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (5,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-38,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
1 1 81 79 77 75 71 69 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
78 64 2 14 13 1 33 15 1 13 14 5 13 1 0 38 0 16 16 14 1 0 39 0 14 14 14 34 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 17 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-52,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 68 66 63 61 57 55 51 50 1 48 1 48 41 40 38 37 23 22 21 20 15 14 11 10 3 2 13 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
65 49 2 9 8 39 1 0 5 2 33 0 9 0 11 5 9 11 1 2 41 10 1 8 8 12 34 6 1 5 5 15 34 12 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:12 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,-179,qs),
(159,-227,o),
(224,-227,qs),
(332,-226,ls),
(339,-226,o),
(348,-218,o),
(348,-212,qs),
(348,-200,o),
(329,-195,q),
(296,-189,o),
(274,-178,qs),
(212,-148,o),
(212,-94,qs),
(212,-45,o),
(257,-2,q),
(290,-5,ls),
(307,-7,o),
(354,-7,o),
(367,4,qs),
(372,8,o),
(376,19,o),
(376,30,o),
(367,44,o),
(358,44,q),
(326,41,l),
(309,41,o),
(288,54,o),
(271,91,o),
(271,154,qs),
(271,608,ls),
(271,671,o),
(282,695,qs),
(293,722,o),
(326,722,q),
(358,719,l),
(376,719,o),
(376,741,qs),
(376,750,o),
(367,759,qs),
(362,763,o),
(344,770,o),
(308,770,o),
(268,766,qs),
(242,764,ls),
(229,762,o),
(199,762,o),
(186,764,qs),
(160,766,ls),
(147,767,o),
(117,770,o),
(73,770,o),
(61,759,qs),
(56,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(70,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,154,ls),
(156,91,o),
(146,67,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,4,qs),
(66,0,o),
(84,-7,o),
(125,-7,o),
(159,-3,qs),
(179,-1,o),
(194,0,q),
(131,-60,o),
(131,-138,qs),
(131,-162,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
78 75 63 62 57 56 55 54 47 46 45 44 39 38 35 34 30 29 24 23 22 21 14 13 12 11 6 5 3 2 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 14 0 14 56 10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 0 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 34 0 14 14 17 14 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 14 0 14 56 10 9 5 3 4 4 6 1 0 39 8 7 2 6 6 12 34 12 11 3 3 2 2 0 1 2 39 13 1 2 0 0 13 0 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,663,o),
(272,708,o),
(254,729,qs),
(245,740,o),
(217,753,o),
(166,753,o),
(145,731,qs),
(135,721,o),
(124,693,o),
(124,646,o),
(141,626,qs),
(150,615,o),
(178,602,o),
(214,602,o),
(242,615,o),
(262,636,o)
);
},
{
closed = 1;
nodes = (
(141,-179,qs),
(162,-227,o),
(227,-227,qs),
(334,-226,ls),
(342,-226,o),
(351,-218,o),
(351,-212,qs),
(351,-200,o),
(331,-195,q),
(299,-189,o),
(277,-178,qs),
(215,-148,o),
(215,-94,qs),
(215,-45,o),
(258,-3,q),
(286,-6,ls),
(299,-7,o),
(313,-7,qs),
(364,-7,o),
(364,22,qs),
(364,30,o),
(354,43,o),
(346,43,q),
(322,40,l),
(307,40,o),
(287,50,o),
(267,92,o),
(267,174,qs),
(267,438,ls),
(267,478,o),
(255,493,qs),
(248,500,o),
(228,500,q),
(154,495,l),
(83,500,o),
(83,500,q),
(65,500,o),
(57,491,qs),
(54,487,o),
(51,479,o),
(51,465,o),
(70,456,o),
(96,448,o),
(123,438,o),
(135,421,o),
(139,413,qs),
(151,387,o),
(151,318,qs),
(151,174,ls),
(151,138,o),
(148,112,qs),
(140,40,o),
(100,40,q),
(76,43,l),
(67,43,o),
(57,30,o),
(57,11,o),
(66,3,qs),
(72,-1,o),
(91,-7,o),
(116,-7,o),
(125,-6,qs),
(154,-3,ls),
(175,0,o),
(197,0,q),
(134,-60,o),
(134,-138,qs),
(134,-162,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
81 78 66 64 61 60 59 58 51 50 47 46 31 30 29 28 23 22 19 18 10 9 2 1 12 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
49 1 4 6 1 33 0 11 2 11 56 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 2 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
49 1 4 6 1 33 0 0 0 1 1 0 39 0 1 1 12 34 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 34 0 11 11 17 11 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
49 1 4 6 1 33 0 11 2 11 56 0 1 0 0 6 1 0 1 0 41 7 1 6 6 15 34 9 8 5 3 4 4 2 1 2 39 10 3 2 2 2 13 2 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 394;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
kernLeft = H;
kernRight = H;
lastChange = "2025-07-10 16:17:09 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (76,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
65 64 1 1 74 72 64 80 65 80 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 47 values pushed */
0 14 16 1 13 7 14 13 1 0 41 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 15 12 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,54,o),
(265,90,o),
(265,171,qs),
(265,431,ls),
(265,470,o),
(253,485,qs),
(247,493,o),
(227,493,q),
(154,487,l),
(84,493,l),
(67,493,o),
(59,483,qs),
(56,479,o),
(53,471,o),
(53,458,o),
(72,449,o),
(97,441,o),
(128,430,o),
(140,407,qs),
(151,381,o),
(151,312,qs),
(151,171,ls),
(151,101,o),
(140,72,qs),
(128,46,o),
(101,46,q),
(77,50,l),
(69,50,o),
(59,37,o),
(59,19,o),
(68,11,qs),
(73,6,o),
(92,0,o),
(118,0,o),
(137,2,o),
(160,5,o),
(188,7,o),
(235,7,o),
(260,4,qs),
(331,-7,o),
(351,10,qs),
(356,14,o),
(360,24,o),
(360,37,o),
(351,50,o),
(342,50,q),
(319,46,l),
(305,46,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 47 0 47 40 39 37 36 22 21 20 19 14 13 10 9 2 1 9 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 31 values pushed */
38 1 0 5 1 33 6 1 5 5 15 34 8 7 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = IJ;
kernLeft = H;
kernRight = J;
lastChange = "2025-07-10 16:04:46 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (428,0);
ref = J;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
64 64 1 1 64 117 64 117 112 111 108 107 105 103 98 97 96 95 87 86 82 80 75 73 66 65 1 63 1 63 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 10 8 3 2 25 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
78 1 0 15 1 33 0 15 5 0 5 15 0 53 24 22 18 17 13 11 10 6 8 5 5 7 1 0 39 21 20 19 9 8 5 7 7 12 34 16 23 12 4 3 5 0 0 1 1 0 39 14 2 2 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
78 1 0 16 1 33 0 15 5 16 5 15 16 53 24 22 18 17 13 11 10 6 8 5 5 7 1 0 39 21 20 19 9 8 5 7 7 12 34 0 16 16 1 1 0 39 14 2 2 1 1 13 34 23 12 4 3 4 0 0 1 1 0 39 14 2 2 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1122;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (394,0);
ref = j;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
19 17 116 114 107 104 101 100 86 85 81 79 72 71 64 63 58 57 56 55 48 47 45 44 29 28 27 26 21 20 17 61 19 61 11 10 3 2 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 11 1 1 10 1 0 6 1 0 1 0 41 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 10 1 0 0 1 1 0 39 11 1 1 1 12 34 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
46 1 4 6 117 1 16 13 2 33 0 12 2 13 2 12 13 53 11 1 1 10 1 0 6 1 0 1 0 41 15 14 7 3 6 6 15 34 9 8 5 3 4 4 2 1 2 39 3 17 2 2 2 13 34 0 13 13 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 771;
}
);
note = ij;
unicode = 307;
},
{
glyphname = Jcircumflex;
kernLeft = J;
kernRight = J;
lastChange = "2025-07-10 16:17:15 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (76,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (292,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
56 55 1 1 70 68 61 60 55 74 56 74 1 54 1 54 49 48 45 44 42 40 35 34 33 32 24 23 19 17 12 10 3 2 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
58 1 10 12 15 1 1 3 2 33 0 12 10 12 55 11 14 2 10 6 10 55 0 2 0 3 0 2 3 53 13 9 5 4 4 0 0 6 1 0 39 8 7 2 6 6 12 34 0 3 3 1 1 0 39 0 1 1 16 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = dotlessj;
},
{
alignment = -1;
pos = (-13,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
58 57 52 50 43 42 39 37 30 27 24 23 9 8 4 2 8 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
61 1 5 6 40 1 4 1 2 33 7 1 5 6 2 6 5 2 53 0 0 2 1 2 0 1 53 0 6 6 18 34 3 1 2 2 15 34 0 1 1 4 1 2 39 0 4 4 17 4 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = Kcommaaccent;
kernLeft = H;
kernRight = K;
lastChange = "2025-07-10 16:17:18 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (305,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
1 1 130 128 123 122 1 118 1 118 106 105 99 98 97 96 86 85 84 83 80 79 78 76 73 70 59 58 57 56 51 50 47 45 41 40 35 34 33 32 25 24 23 22 17 16 14 12 10 8 3 2 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
114 89 63 3 0 6 1 33 17 16 13 12 11 7 6 6 6 8 1 0 39 15 14 10 9 4 8 8 12 34 24 21 19 18 5 4 6 0 0 1 1 0 39 20 3 2 3 1 1 13 34 0 22 22 23 1 0 39 0 23 23 17 23 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 793;
}
);
note = Kcommaaccent;
unicode = 310;
},
{
glyphname = kcommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (42,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (220,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
3 1 109 107 102 101 89 88 87 86 78 77 76 75 72 71 65 64 63 62 57 56 55 54 51 49 48 47 46 45 40 39 38 37 29 28 27 26 23 22 10 9 8 7 1 97 3 97 23 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 67 values pushed */
83 60 33 3 1 6 1 33 5 4 2 3 3 14 34 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 15 34 19 18 14 13 2 5 1 1 0 1 2 39 17 16 15 22 4 0 0 13 34 0 20 20 21 1 2 39 0 21 21 17 21 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = kcommaaccent;
unicode = 311;
},
{
glyphname = kgreenlandic;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,7,o),
(284,1,qs),
(295,0,o),
(309,0,qs),
(355,0,o),
(355,24,qs),
(355,40,o),
(337,40,q),
(313,37,l),
(301,37,o),
(283,48,o),
(266,94,o),
(266,171,qs),
(266,253,l),
(366,151,l),
(438,81,ls),
(467,53,o),
(505,21,o),
(536,0,o),
(554,0,q),
(612,4,ls),
(618,4,o),
(635,3,o),
(646,2,qs),
(665,1,ls),
(675,0,o),
(682,0,qs),
(724,0,o),
(724,25,qs),
(724,32,o),
(713,41,o),
(706,41,q),
(684,37,l),
(650,37,o),
(580,102,qs),
(382,285,l),
(493,340,o),
(589,425,qs),
(630,460,o),
(650,460,q),
(677,457,l),
(685,457,o),
(695,466,o),
(695,472,qs),
(695,498,o),
(652,498,qs),
(630,498,o),
(592,490,o),
(572,490,q),
(462,498,l),
(418,498,o),
(418,472,qs),
(418,466,o),
(428,457,o),
(436,457,q),
(464,460,l),
(500,460,o),
(500,441,qs),
(500,427,o),
(465,398,qs),
(382,331,o),
(266,291,q),
(266,432,ls),
(266,471,o),
(254,485,qs),
(248,493,o),
(228,493,q),
(155,487,l),
(129,487,o),
(99,493,o),
(85,493,qs),
(54,493,o),
(54,472,qs),
(54,463,o),
(72,456,o),
(122,444,o),
(131,432,qs),
(152,404,o),
(152,311,qs),
(152,171,ls),
(152,37,o),
(104,37,q),
(78,40,l),
(60,40,o),
(60,24,qs),
(60,0,o),
(111,0,q),
(213,7,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
87 86 84 82 80 79 78 77 68 67 66 65 63 62 61 59 56 55 54 53 48 47 46 45 42 40 39 36 33 32 31 30 21 20 19 18 17 15 6 5 4 3 1 0 22 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 52 values pushed */
73 51 25 3 1 6 1 33 11 10 7 3 6 6 3 1 0 39 9 8 5 4 4 3 3 15 34 19 18 13 12 2 5 1 1 0 1 2 39 21 20 17 16 15 14 6 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Lacute;
kernLeft = H;
kernRight = L;
lastChange = "2025-07-10 16:17:21 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(593,904,o),
(593,943,qs),
(593,963,o),
(567,986,o),
(538,986,o),
(528,984,qs),
(498,978,o),
(459,930,qs),
(382,834,ls),
(374,823,o),
(374,816,qs),
(374,812,o),
(380,802,o),
(395,802,o),
(411,810,qs),
(526,869,ls)
);
},
{
closed = 1;
nodes = (
(647,178,qs),
(580,109,o),
(519,79,qs),
(483,62,o),
(416,62,qs),
(313,62,ls),
(269,62,o),
(269,126,qs),
(269,588,ls),
(269,651,o),
(279,673,qs),
(290,699,o),
(323,699,q),
(354,696,l),
(363,696,o),
(373,709,o),
(373,727,o),
(363,735,qs),
(358,740,o),
(340,746,o),
(305,746,o),
(266,742,qs),
(240,740,ls),
(228,739,o),
(198,739,o),
(172,741,o),
(147,744,o),
(118,746,o),
(75,746,o),
(63,735,qs),
(58,731,o),
(53,721,o),
(53,709,o),
(63,696,o),
(72,696,q),
(103,699,l),
(120,699,o),
(141,687,o),
(156,651,o),
(156,588,qs),
(156,158,ls),
(156,92,o),
(147,68,qs),
(136,40,o),
(103,40,q),
(72,43,l),
(63,43,o),
(53,29,o),
(53,12,o),
(63,3,qs),
(68,-1,o),
(85,-7,o),
(118,-7,o),
(133,-6,qs),
(180,-2,ls),
(212,0,o),
(245,0,qs),
(623,0,l),
(633,46,o),
(644,78,qs),
(649,94,o),
(662,124,o),
(684,168,o),
(684,182,qs),
(684,194,o),
(672,194,qs),
(663,194,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
17 16 78 75 70 69 68 67 62 61 58 57 54 53 48 47 46 45 38 37 36 35 30 29 26 24 16 82 17 82 11 10 2 1 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 63 values pushed */
0 1 0 1 55 0 0 9 0 55 15 1 2 7 14 7 2 14 53 11 10 2 9 13 12 8 3 7 2 9 7 1 0 41 0 14 14 3 1 2 39 4 1 3 3 13 34 6 1 5 5 3 1 0 39 4 1 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,2,o),
(162,5,o),
(192,7,o),
(223,7,o),
(278,1,qs),
(289,0,o),
(303,0,qs),
(349,0,o),
(349,24,qs),
(349,40,o),
(332,40,q),
(307,37,l),
(295,37,o),
(277,48,o),
(260,92,o),
(260,171,qs),
(260,683,ls),
(260,725,o),
(255,735,qs),
(251,741,o),
(240,745,o),
(224,745,o),
(214,743,o),
(209,742,qs),
(179,739,ls),
(168,738,o),
(140,738,o),
(109,741,qs),
(89,743,ls),
(79,744,o),
(69,744,qs),
(39,744,o),
(39,725,qs),
(39,716,o),
(56,709,o),
(92,706,o),
(124,689,o),
(146,644,o),
(146,562,qs),
(146,171,ls),
(146,95,o),
(137,67,qs),
(127,37,o),
(99,37,q),
(74,40,l),
(56,40,o),
(56,24,qs),
(56,0,o),
(106,0,qs),
(114,0,o)
);
},
{
closed = 1;
nodes = (
(369,906,o),
(369,945,qs),
(369,965,o),
(343,988,o),
(314,988,o),
(304,986,qs),
(273,979,o),
(235,932,qs),
(158,841,l),
(149,830,o),
(149,823,qs),
(149,819,o),
(156,809,o),
(171,809,o),
(187,817,qs),
(302,871,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 0 61 60 52 51 46 45 43 41 39 38 37 36 28 27 23 22 19 17 6 5 4 3 0 49 1 49 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 37 values pushed */
0 11 10 11 55 0 10 3 10 55 5 4 2 3 1 3 55 7 6 2 3 1 1 0 1 2 39 9 8 12 3 0 0 13 0 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 382;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Lcommaaccent;
kernLeft = H;
kernRight = L;
lastChange = "2025-07-10 16:17:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (246,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 80 78 73 72 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 5 12 5 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 34 0 13 13 14 1 0 39 0 14 14 17 14 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Lcommaaccent;
unicode = 315;
},
{
glyphname = lcommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (36,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (86,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 60 58 53 52 1 48 1 48 41 40 39 38 35 34 22 21 20 19 14 13 12 11 3 2 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 38 values pushed */
7 6 2 5 5 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 34 0 9 9 10 1 0 39 0 10 10 17 10 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = lcommaaccent;
unicode = 316;
},
{
glyphname = Lcaron;
kernLeft = H;
kernRight = L;
lastChange = "2025-07-10 16:17:21 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,2);
ref = L;
},
{
alignment = -1;
pos = (425,0);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 88 87 71 70 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
15 1 0 13 12 13 0 12 53 11 10 6 3 5 5 7 1 0 39 14 9 8 3 7 7 12 34 0 13 13 7 1 0 39 14 9 8 3 7 7 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 13 12 13 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 13 13 14 1 0 39 0 14 14 12 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (36,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,2);
ref = l;
},
{
alignment = -1;
pos = (270,73);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
1 1 68 67 51 50 1 48 1 48 41 40 39 38 35 34 22 21 20 19 14 13 12 11 3 2 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 9 9 5 1 0 39 10 7 6 3 5 5 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 4
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 6 2 5 5 14 34 0 9 9 10 1 0 39 0 10 10 14 34 11 8 4 3 4 0 0 1 1 0 39 2 1 1 1 13 1 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 482;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
kernLeft = H;
lastChange = "2025-07-10 15:59:46 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (448,386);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 83 82 76 74 64 61 56 55 54 53 48 47 44 43 39 38 33 32 31 30 23 22 21 20 15 14 11 9 1 68 2 68 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 21 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 15 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
15 1 0 14 12 14 0 12 53 11 10 6 3 5 5 7 1 0 39 9 8 2 7 7 12 34 0 14 14 13 1 0 39 0 13 13 21 34 0 12 12 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,227,o),
(621,227,o),
(645,252,qs),
(667,276,o),
(667,304,qs),
(667,336,o),
(646,360,qs),
(624,388,o),
(587,388,qs),
(551,388,o),
(526,363,qs),
(516,352,o),
(503,322,o),
(503,292,o),
(513,265,o),
(533,242,o)
);
},
{
closed = 1;
nodes = (
(280,49,o),
(262,89,o),
(262,167,qs),
(262,781,ls),
(262,822,o),
(254,836,qs),
(250,845,o),
(231,845,q),
(156,838,l),
(139,838,o),
(107,841,qs),
(87,843,ls),
(78,844,o),
(51,844,o),
(36,828,o),
(36,821,qs),
(36,800,o),
(72,797,qs),
(90,795,o),
(123,782,o),
(146,742,o),
(146,658,qs),
(146,167,ls),
(146,91,o),
(137,66,qs),
(127,40,o),
(98,40,q),
(72,43,l),
(64,43,o),
(54,30,o),
(54,11,o),
(63,3,qs),
(69,-1,o),
(89,-7,o),
(121,-7,o),
(177,0,o),
(223,0,o),
(235,-1,qs),
(280,-6,ls),
(326,-11,o),
(343,3,qs),
(349,8,o),
(353,18,o),
(353,30,o),
(343,43,o),
(335,43,q),
(310,40,l),
(297,40,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
16 16 16 63 16 63 56 55 54 53 50 49 37 36 35 34 29 28 27 26 18 17 14 13 7 5 12 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 36 values pushed */
0 0 0 1 2 0 1 1 0 41 9 8 2 7 7 14 34 11 10 6 5 4 2 2 3 1 0 39 4 1 3 3 13 3 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 687;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
kernRight = L;
lastChange = "2025-07-10 16:17:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(618,182,q),
(587,144,o),
(537,98,o),
(473,63,o),
(416,63,qs),
(316,63,ls),
(271,63,o),
(271,129,qs),
(271,366,l),
(401,437,ls),
(442,459,o),
(442,479,qs),
(442,490,o),
(428,502,o),
(409,502,o),
(368,480,qs),
(271,428,l),
(271,608,ls),
(271,672,o),
(281,695,qs),
(293,722,o),
(326,722,q),
(358,719,o),
(358,719,q),
(367,719,o),
(377,732,o),
(377,750,o),
(367,759,qs),
(362,763,o),
(344,770,o),
(308,770,o),
(268,766,qs),
(242,764,ls),
(229,762,o),
(198,762,o),
(186,764,qs),
(160,766,ls),
(146,767,o),
(117,770,o),
(73,770,o),
(61,759,qs),
(56,754,o),
(51,744,o),
(51,732,o),
(61,719,o),
(70,719,q),
(102,722,l),
(119,722,o),
(140,709,o),
(156,671,o),
(156,608,qs),
(156,366,l),
(88,330,ls),
(59,314,o),
(59,294,qs),
(59,283,o),
(72,270,o),
(94,270,o),
(125,287,qs),
(156,304,l),
(156,161,ls),
(156,94,o),
(147,70,qs),
(135,41,o),
(102,41,q),
(70,44,l),
(61,44,o),
(51,30,o),
(51,12,o),
(61,3,qs),
(66,-1,o),
(83,-7,o),
(117,-7,o),
(133,-6,qs),
(181,-2,ls),
(213,0,o),
(247,0,qs),
(627,0,l),
(625,16,o),
(625,67,o),
(640,134,qs),
(646,162,o),
(655,180,o),
(655,185,qs),
(655,198,o),
(643,198,qs),
(634,198,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 0 82 79 72 71 65 64 62 61 56 55 52 51 47 46 41 40 39 38 29 28 22 21 20 19 14 13 10 8 0 86 1 86 16 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 76 values pushed */
77 69 34 26 4 5 13 1 33 0 5 13 0 13 5 0 53 15 1 0 14 13 0 14 51 12 11 7 3 6 6 8 1 0 39 10 9 2 8 8 12 34 0 13 13 15 34 0 14 14 1 1 2 39 2 1 1 1 13 34 4 1 3 3 1 1 0 39 2 1 1 1 13 1 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,58,o),
(260,96,o),
(260,173,qs),
(260,446,l),
(327,490,ls),
(367,515,o),
(367,534,qs),
(367,544,o),
(353,556,o),
(344,556,qs),
(331,556,o),
(292,532,qs),
(260,511,l),
(260,769,ls),
(260,811,o),
(255,821,qs),
(251,827,o),
(240,831,o),
(224,831,o),
(188,824,o),
(154,824,qs),
(140,824,o),
(109,827,qs),
(89,829,ls),
(79,830,o),
(53,830,o),
(39,814,o),
(39,808,qs),
(39,787,o),
(74,783,qs),
(92,782,o),
(124,769,o),
(146,729,o),
(146,648,qs),
(146,437,l),
(76,392,ls),
(65,384,o),
(47,368,o),
(47,345,o),
(61,332,o),
(83,332,o),
(114,351,qs),
(146,372,l),
(146,173,ls),
(146,99,o),
(137,74,qs),
(127,49,o),
(99,49,q),
(74,52,l),
(65,52,o),
(56,40,o),
(56,21,o),
(65,13,qs),
(70,9,o),
(90,2,o),
(114,2,o),
(136,5,o),
(162,7,o),
(192,10,o),
(223,10,o),
(278,4,qs),
(289,2,o),
(303,2,qs),
(327,2,o),
(340,13,qs),
(345,18,o),
(349,28,o),
(349,39,o),
(339,52,o),
(332,52,q),
(307,49,l),
(295,49,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 71 0 71 62 60 53 52 51 49 46 45 31 30 24 23 22 21 16 15 12 11 9 7 2 1 13 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 51 values pushed */
67 58 36 28 4 6 10 1 33 0 10 7 6 7 10 6 53 0 6 6 7 1 0 39 9 8 2 7 7 14 34 12 11 5 4 4 0 0 1 1 0 39 3 2 2 1 1 13 1 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 382;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 16:17:28 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (299,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 95 94 86 85 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
71 30 2 2 5 1 33 0 17 16 17 55 0 16 4 16 55 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 18 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (223,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
3 1 96 95 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 15 15 12 34 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 16 3 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 15 15 12 34 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 16 3 0 0 13 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncommaaccent;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 16:17:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (344,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 95 93 88 87 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 16 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 15 2 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
71 30 2 2 5 1 33 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 18 15 1 3 0 0 13 34 0 12 12 13 34 0 16 16 17 1 0 39 0 17 17 17 17 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = Ncommaaccent;
unicode = 325;
},
{
glyphname = ncommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (292,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 97 95 90 89 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
28 1 12 4 75 34 2 2 12 2 33 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
28 1 12 4 75 34 2 2 12 2 33 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = ncommaaccent;
unicode = 326;
},
{
glyphname = Ncaron;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-10 16:17:29 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (241,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
1 1 101 99 95 93 87 85 1 83 1 83 78 77 76 75 69 67 57 56 55 54 49 48 45 44 43 42 37 36 35 34 29 27 15 14 13 12 7 6 3 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 16 12 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 1 1 0 0 13 34 18 1 17 17 12 1 0 39 19 15 2 12 12 13 12 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
102 97 2 16 17 71 30 2 2 5 2 33 0 16 17 4 17 16 4 53 18 1 17 16 5 17 1 0 38 11 10 6 3 5 5 4 1 0 39 9 8 7 3 4 4 12 34 14 13 3 3 2 2 0 1 2 39 19 15 1 3 0 0 13 34 0 12 12 13 12 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (165,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 97 95 89 87 82 81 80 79 71 70 64 63 62 61 57 54 47 46 45 44 37 35 30 29 27 26 13 12 11 10 5 4 1 85 3 85 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
104 99 2 15 16 28 1 12 4 75 34 2 2 12 3 33 0 15 16 4 16 15 4 53 0 16 16 12 34 0 12 12 4 1 0 39 6 5 2 4 4 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
104 99 2 15 16 28 1 12 4 75 34 2 2 12 3 33 0 15 16 6 16 15 6 53 0 16 16 12 34 5 1 4 4 15 34 0 12 12 6 1 0 39 0 6 6 15 34 14 13 11 10 8 7 3 7 2 2 0 1 2 39 9 1 17 3 0 0 13 0 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Eng;
kernLeft = H;
kernRight = N;
lastChange = "2025-07-10 16:04:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,-4,qs),
(151,-1,ls),
(161,0,o),
(171,0,q),
(265,-7,l),
(292,-7,o),
(312,9,o),
(312,18,qs),
(312,33,o),
(293,33,q),
(257,30,l),
(240,30,o),
(218,46,o),
(202,89,o),
(202,154,qs),
(202,564,l),
(663,65,l),
(663,-10,ls),
(663,-64,o),
(648,-100,qs),
(607,-199,o),
(495,-199,qs),
(352,-199,o),
(300,-100,q),
(293,-70,o),
(283,-70,qs),
(277,-70,o),
(273,-73,qs),
(263,-80,o),
(263,-130,qs),
(263,-189,l),
(290,-207,o),
(318,-219,qs),
(398,-253,o),
(471,-253,qs),
(586,-253,o),
(667,-196,qs),
(758,-132,o),
(758,-13,qs),
(758,90,l),
(759,91,l),
(759,608,ls),
(759,674,o),
(769,701,qs),
(781,732,o),
(813,732,q),
(845,729,l),
(864,729,o),
(864,745,qs),
(864,755,o),
(854,762,qs),
(849,765,o),
(831,770,o),
(799,770,o),
(769,767,qs),
(749,764,ls),
(739,763,o),
(729,763,q),
(635,770,l),
(622,770,o),
(613,768,qs),
(588,761,o),
(588,745,qs),
(588,729,o),
(607,729,q),
(643,732,l),
(660,732,o),
(682,717,o),
(698,674,o),
(698,608,qs),
(698,215,l),
(187,762,l),
(33,768,ls),
(5,768,o),
(5,754,qs),
(5,748,o),
(15,738,o),
(57,722,o),
(103,678,o),
(142,612,o),
(142,579,qs),
(142,154,ls),
(142,89,o),
(131,62,qs),
(120,30,o),
(86,30,q),
(55,33,l),
(36,33,o),
(36,18,qs),
(36,-7,o),
(83,-7,qs),
(100,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 0 88 87 86 85 82 81 80 79 70 68 66 64 57 55 46 45 44 43 38 37 34 33 32 31 27 26 25 24 19 17 6 5 4 3 0 91 1 91 19 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 72 values pushed */
75 74 51 50 20 5 1 4 60 1 13 12 2 33 0 12 0 13 0 12 13 53 10 9 5 3 4 4 3 1 0 39 8 7 6 3 3 3 12 34 15 14 2 3 1 1 0 1 2 39 17 16 18 3 0 0 13 34 0 13 13 11 1 0 39 0 11 11 17 11 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,-5,o),
(156,-2,o),
(184,0,o),
(210,0,o),
(220,0,qs),
(237,-1,ls),
(246,-2,o),
(262,-3,o),
(268,-4,qs),
(279,-5,ls),
(291,-7,o),
(309,-7,qs),
(360,-7,o),
(360,18,qs),
(360,33,o),
(341,33,q),
(317,30,l),
(303,30,o),
(282,41,o),
(263,85,o),
(263,167,qs),
(263,365,l),
(333,451,o),
(408,451,qs),
(439,451,o),
(458,438,qs),
(508,406,o),
(508,316,qs),
(507,41,ls),
(507,-58,o),
(496,-115,qs),
(491,-142,o),
(475,-177,o),
(450,-205,o),
(423,-205,qs),
(376,-205,o),
(340,-127,qs),
(329,-104,o),
(313,-104,qs),
(300,-104,o),
(300,-120,qs),
(300,-238,l),
(357,-252,o),
(399,-252,qs),
(621,-252,o),
(623,41,qs),
(624,334,ls),
(624,380,o),
(611,417,qs),
(575,514,o),
(452,514,qs),
(346,514,o),
(263,425,q),
(263,438,ls),
(263,478,o),
(250,492,qs),
(244,500,o),
(224,500,q),
(149,494,l),
(78,500,l),
(46,500,o),
(46,478,qs),
(46,470,o),
(65,462,o),
(91,457,o),
(118,449,o),
(125,438,qs),
(146,412,o),
(146,318,qs),
(146,167,ls),
(146,130,o),
(144,104,qs),
(136,30,o),
(95,30,q),
(71,33,l),
(52,33,o),
(52,18,qs),
(52,-7,o),
(102,-7,qs),
(112,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 76 72 68 66 64 63 62 61 56 54 45 43 41 39 36 34 29 27 22 21 19 18 6 5 4 3 0 79 1 79 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 4 1 3 3 15 34 0 9 9 5 1 0 39 0 5 5 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 0 9 9 3 1 0 39 5 4 2 3 3 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
20 1 9 3 57 26 2 1 9 37 1 6 8 3 33 0 7 0 8 0 7 8 53 4 1 3 3 15 34 0 9 9 5 1 0 39 0 5 5 15 34 11 10 2 3 1 1 0 1 2 39 13 12 14 3 0 0 13 34 0 8 8 6 1 0 39 0 6 6 17 6 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (193,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
41 41 41 54 41 52 48 45 38 36 30 28 19 17 7 5 7 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 6 1 5 0 4 5 1 0 41 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (108,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
37 36 35 34 33 31 25 23 15 13 7 5 6 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 5 0 4 5 0 0 41 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 5
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:37 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (192,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
58 56 54 52 48 46 43 42 38 36 30 28 19 17 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
55 41 2 5 4 1 33 6 1 4 5 5 4 43 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
55 41 2 5 4 1 33 6 1 4 5 4 55 0 7 7 5 1 0 39 0 5 5 14 34 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (73,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
53 51 48 46 42 40 36 35 33 31 25 23 15 13 7 5 8 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
50 34 2 5 4 1 33 0 5 0 7 0 5 7 1 2 41 6 1 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 2 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = O;
lastChange = "2025-07-10 16:17:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (307,0);
ref = hungarumlaut.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
60 59 42 41 68 67 59 76 60 76 50 49 41 58 42 58 38 36 30 28 19 17 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
52 1 5 4 1 33 9 6 8 3 4 5 4 55 7 1 5 0 5 55 0 3 3 0 1 0 39 0 0 0 12 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (49,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (8,0);
ref = hungarumlaut;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
51 50 35 34 57 56 50 65 51 65 41 40 34 49 35 49 33 31 25 23 15 13 7 5 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
59 1 5 4 1 33 7 1 5 4 0 4 5 0 53 9 6 8 3 4 4 12 34 0 3 3 0 1 0 39 0 0 0 15 34 0 2 2 1 1 0 39 0 1 1 13 1 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
kernLeft = O;
kernRight = E;
lastChange = "2025-07-10 16:17:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1081,185,o),
(1065,169,qs),
(1047,150,ls),
(1030,133,o),
(1010,117,qs),
(941,63,o),
(820,63,qs),
(717,63,ls),
(672,63,o),
(672,129,qs),
(672,333,ls),
(672,346,o),
(694,364,o),
(714,364,qs),
(836,364,ls),
(855,364,o),
(878,349,qs),
(889,342,o),
(908,318,o),
(921,288,o),
(930,288,qs),
(945,288,o),
(945,315,q),
(941,392,l),
(945,471,l),
(945,498,o),
(930,498,qs),
(924,498,o),
(917,490,o),
(908,467,o),
(898,456,qs),
(870,421,o),
(836,421,qs),
(714,421,ls),
(672,421,o),
(672,447,qs),
(672,655,ls),
(672,676,o),
(691,699,o),
(717,699,qs),
(850,699,ls),
(915,699,o),
(963,666,qs),
(984,651,o),
(1017,614,o),
(1042,583,o),
(1051,583,qs),
(1062,583,o),
(1062,597,qs),
(1062,604,o),
(1057,621,qs),
(1039,682,ls),
(1026,724,o),
(1021,762,q),
(702,762,ls),
(645,762,o),
(594,766,qs),
(575,768,o),
(512,777,o),
(466,777,qs),
(277,777,o),
(162,659,qs),
(51,545,o),
(51,363,qs),
(51,195,o),
(159,92,qs),
(267,-11,o),
(448,-11,qs),
(490,-11,o),
(558,-4,qs),
(594,0,o),
(624,0,qs),
(1031,0,l),
(1057,77,o),
(1090,133,qs),
(1108,164,o),
(1108,188,o),
(1097,188,q),
(1094,187,o)
);
},
{
closed = 1;
nodes = (
(536,60,o),
(503,60,qs),
(417,60,o),
(340,104,qs),
(258,152,o),
(211,234,qs),
(159,326,o),
(159,442,qs),
(159,561,o),
(231,636,qs),
(266,670,o),
(357,708,o),
(487,708,o),
(557,672,q),
(557,66,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
92 90 81 80 72 69 65 62 58 56 52 50 46 43 39 36 32 30 24 22 19 17 11 9 7 5 1 0 14 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 90 values pushed */
79 1 5 6 93 1 11 0 2 33 0 5 6 8 6 5 8 53 0 0 9 11 9 0 11 53 0 7 0 10 9 7 10 1 0 41 12 1 6 6 3 1 0 39 0 3 3 12 34 12 1 6 6 4 1 0 39 0 4 4 12 34 0 9 9 8 1 0 39 0 8 8 15 34 13 1 11 11 1 1 0 39 2 1 1 1 13 1 35 12
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1118;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,437,qs),
(92,400,o),
(49,305,o),
(49,185,o),
(75,130,qs),
(89,101,o),
(133,49,o),
(196,11,o),
(278,-12,o),
(364,-12,o),
(396,-5,qs),
(488,16,o),
(548,80,q),
(587,37,o),
(698,-12,o),
(825,-12,o),
(931,33,o),
(964,77,qs),
(983,102,o),
(983,122,qs),
(983,128,o),
(970,142,o),
(955,142,o),
(944,132,o),
(926,106,o),
(910,94,qs),
(858,55,o),
(797,55,qs),
(732,55,o),
(682,95,qs),
(628,137,o),
(611,211,q),
(628,215,l),
(755,247,ls),
(846,269,o),
(968,313,qs),
(984,319,o),
(992,335,o),
(992,360,o),
(971,396,qs),
(943,443,o),
(899,474,qs),
(840,514,o),
(759,514,qs),
(625,514,o),
(544,420,q),
(466,514,o),
(329,514,qs),
(211,514,o)
);
},
{
closed = 1;
nodes = (
(208,410,qs),
(245,454,o),
(301,454,qs),
(373,454,o),
(425,391,qs),
(450,359,o),
(482,266,o),
(482,132,o),
(441,88,qs),
(403,46,o),
(348,46,qs),
(276,46,o),
(224,115,qs),
(200,147,o),
(170,237,o),
(170,283,qs),
(170,364,o)
);
},
{
closed = 1;
nodes = (
(604,267,qs),
(604,275,ls),
(604,323,o),
(616,357,qs),
(647,454,o),
(746,454,qs),
(797,454,o),
(836,411,qs),
(852,394,o),
(869,356,o),
(869,334,o),
(859,330,qs),
(759,295,o),
(605,257,q),
(604,262,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
1 0 75 73 63 61 55 53 39 38 33 32 26 25 21 19 5 3 0 48 1 48 10 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 16 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 16 4 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
16 2 2 3 7 35 1 2 3 2 33 0 3 7 2 7 3 2 53 8 1 7 7 0 1 0 39 1 9 2 0 0 15 34 6 1 2 2 4 1 0 39 5 1 4 4 13 4 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1028;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
kernLeft = H;
kernRight = R;
lastChange = "2025-07-10 16:18:05 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (249,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
90 88 1 1 115 114 106 105 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
102 1 16 17 1 33 0 19 18 19 55 0 18 8 18 55 21 1 16 14 1 11 0 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 86 values pushed */
102 1 16 17 1 33 0 19 18 19 55 0 18 8 18 55 0 13 11 0 11 13 0 53 21 1 16 14 1 11 13 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (98,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 78 77 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 45 0 10 10 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 10 10 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 10 10 12 34 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 11 1 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcommaaccent;
kernLeft = H;
kernRight = R;
lastChange = "2025-07-10 16:18:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (267,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
90 88 1 1 115 113 108 107 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 22 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
102 1 16 17 1 33 21 1 16 14 1 11 0 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 34 0 18 18 19 1 2 39 0 19 19 17 19 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 88 values pushed */
102 1 16 17 1 33 0 13 11 0 11 13 0 53 21 1 16 14 1 11 13 16 11 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 20 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 34 0 18 18 19 1 2 39 0 19 19 17 19 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Rcommaaccent;
unicode = 342;
},
{
glyphname = rcommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (152,0);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 79 77 72 71 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 45 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
24 1 7 3 48 28 2 6 7 2 33 0 6 7 1 7 6 1 53 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 34 0 10 10 11 1 0 39 0 11 11 17 11 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = rcommaaccent;
unicode = 343;
},
{
glyphname = Rcaron;
kernLeft = H;
kernRight = R;
lastChange = "2025-07-10 16:18:06 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (50,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (190,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
90 88 1 1 121 119 115 113 107 105 98 96 88 103 90 103 1 87 1 87 83 82 67 66 65 64 57 55 48 47 45 44 41 40 35 34 33 32 25 24 23 22 17 16 13 12 9 8 3 2 23 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 85 values pushed */
122 117 2 18 19 102 1 16 17 2 33 20 1 19 18 19 55 0 18 8 18 55 22 1 16 14 1 11 0 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 21 15 13 12 5 4 6 0 0 1 1 0 39 3 2 2 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
122 117 2 18 19 102 1 16 17 2 33 20 1 19 18 19 55 0 18 8 18 55 0 13 11 0 11 13 0 53 22 1 16 14 1 11 13 16 11 1 2 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 0 17 17 8 1 0 39 10 9 2 8 8 12 34 21 15 12 5 4 5 0 0 1 1 0 39 3 2 2 1 1 13 1 35 11
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (40,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 79 77 71 69 55 54 53 52 44 43 39 37 33 31 26 25 23 22 8 7 6 5 1 67 2 67 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 3 11 10 3 53 0 6 7 1 7 6 45 0 11 11 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 3 11 10 3 53 0 6 7 1 7 6 1 53 0 11 11 12 34 0 7 7 3 1 0 39 5 4 2 3 3 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
86 81 2 10 11 24 1 7 3 48 28 2 6 7 3 33 0 10 11 5 11 10 5 53 0 6 7 1 7 6 1 53 0 11 11 12 34 4 1 3 3 15 34 0 7 7 5 1 0 39 0 5 5 15 34 9 8 2 3 1 1 0 1 2 39 12 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 16:18:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (75,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (184,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 78 77 69 68 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
27 1 4 3 1 33 0 9 8 9 55 0 8 7 8 55 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (68,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (148,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 75 74 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 69 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 8 8 12 34 0 2 2 0 1 0 39 6 9 2 0 0 15 34 0 1 1 0 1 0 39 6 9 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 16:18:16 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (75,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (125,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
68 67 2 1 82 80 73 72 67 86 68 86 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
70 1 8 10 27 1 4 3 2 33 0 10 8 10 55 9 12 2 8 7 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (68,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (89,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 82 81 76 74 67 66 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
85 1 8 9 31 1 5 4 2 33 10 1 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 18 34 0 2 2 0 1 0 39 6 11 2 0 0 15 34 0 1 1 0 1 0 39 6 11 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 16:18:15 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,597,o),
(578,656,qs),
(569,692,o),
(567,764,qs),
(566,789,o),
(546,789,qs),
(538,789,o),
(522,769,qs),
(514,757,o),
(509,754,qs),
(506,751,o),
(502,750,o),
(500,750,o),
(489,755,qs),
(435,777,o),
(350,777,qs),
(222,777,o),
(149,710,qs),
(86,652,o),
(86,566,qs),
(86,486,o),
(147,429,qs),
(213,365,o),
(344,335,qs),
(452,311,o),
(497,262,qs),
(531,226,o),
(531,173,qs),
(531,57,o),
(359,57,qs),
(272,57,o),
(201,112,qs),
(124,172,o),
(114,265,qs),
(109,294,o),
(95,294,qs),
(75,294,o),
(75,235,qs),
(75,62,l),
(123,39,ls),
(148,27,o),
(239,-4,o),
(316,-10,q),
(292,-123,l),
(316,-113,o),
(351,-113,qs),
(373,-113,o),
(406,-142,o),
(406,-186,o),
(392,-205,qs),
(384,-216,o),
(366,-216,qs),
(324,-216,o),
(296,-189,qs),
(278,-172,o),
(257,-172,qs),
(245,-172,o),
(230,-190,o),
(230,-215,o),
(243,-226,qs),
(278,-254,o),
(344,-254,qs),
(393,-254,o),
(436,-223,qs),
(454,-208,o),
(477,-172,o),
(477,-135,o),
(467,-121,qs),
(435,-74,o),
(359,-74,qs),
(352,-74,l),
(367,-11,l),
(494,-10,o),
(566,50,qs),
(638,110,o),
(638,211,qs),
(638,299,o),
(575,356,qs),
(542,387,o),
(437,435,o),
(262,480,o),
(223,522,qs),
(190,556,o),
(190,607,qs),
(190,648,o),
(224,675,qs),
(263,706,o),
(336,706,qs),
(415,706,o),
(468,678,qs),
(495,664,o),
(539,618,o),
(562,572,o),
(571,558,o),
(578,558,qs),
(592,558,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 90 88 83 82 80 78 66 64 60 58 53 52 50 48 44 42 40 38 34 32 26 24 23 22 8 6 0 95 1 95 15 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 13 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 1 1 11 1 0 39 13 1 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 12
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 96 values pushed */
56 1 10 9 51 1 5 7 2 33 0 12 11 1 11 12 1 53 14 1 0 1 9 1 0 9 53 0 9 10 1 9 10 51 0 5 7 6 7 5 6 53 0 3 0 7 5 3 7 1 0 41 0 13 13 18 34 0 1 1 11 1 0 39 0 11 11 12 34 0 10 10 2 1 0 39 8 1 2 2 16 34 0 6 6 4 1 0 39 0 4 4 17 4 35 13
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = scedilla;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,501,qs),
(456,492,ls),
(452,488,o),
(439,488,o),
(429,492,qs),
(373,514,o),
(300,514,qs),
(197,514,o),
(135,466,qs),
(81,424,o),
(81,371,qs),
(81,313,o),
(125,273,qs),
(148,252,o),
(228,215,o),
(368,180,o),
(403,158,qs),
(421,147,o),
(436,125,o),
(436,92,o),
(420,66,o),
(381,46,o),
(326,46,qs),
(246,46,o),
(182,80,qs),
(152,96,o),
(111,138,o),
(95,182,o),
(83,182,qs),
(76,182,o),
(68,174,o),
(68,168,qs),
(68,46,l),
(82,36,o),
(106,27,qs),
(186,-4,o),
(280,-10,q),
(257,-123,l),
(281,-113,o),
(315,-113,qs),
(337,-113,o),
(370,-142,o),
(370,-186,o),
(356,-205,qs),
(348,-216,o),
(331,-216,qs),
(288,-216,o),
(260,-189,qs),
(242,-172,o),
(221,-172,qs),
(209,-172,o),
(195,-190,o),
(195,-215,o),
(208,-226,qs),
(243,-254,o),
(308,-254,qs),
(357,-254,o),
(399,-223,qs),
(418,-208,o),
(441,-172,o),
(441,-135,o),
(431,-121,qs),
(399,-74,o),
(324,-74,qs),
(316,-74,l),
(332,-11,l),
(449,-7,o),
(504,45,qs),
(546,85,o),
(546,143,qs),
(546,206,o),
(497,244,qs),
(472,264,o),
(390,295,o),
(248,329,o),
(218,349,qs),
(203,360,o),
(191,385,o),
(191,424,o),
(243,456,o),
(298,456,qs),
(415,456,o),
(476,370,q),
(486,350,o),
(498,350,qs),
(511,350,o),
(511,363,qs),
(511,371,o),
(503,437,o),
(503,493,qs),
(503,514,o),
(487,514,qs),
(479,514,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
1 0 89 88 86 84 70 68 64 62 56 55 53 51 47 45 43 41 37 35 29 27 26 25 12 10 8 6 0 92 1 92 15 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 99 values pushed */
59 1 11 10 54 1 6 8 2 33 0 13 0 2 0 13 2 53 0 10 1 11 1 10 11 53 0 6 8 7 8 6 7 53 0 4 0 8 6 4 8 1 0 41 0 2 2 0 1 0 39 12 14 2 0 0 15 34 0 1 1 0 1 0 39 12 14 2 0 0 15 34 0 11 11 3 1 2 39 9 1 3 3 13 34 0 7 7 5 1 0 39 0 5 5 17 5 35 13
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 16:18:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (75,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (125,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 84 82 78 76 70 68 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 5 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 2 39 0 2 2 13 2 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
85 80 2 8 9 27 1 4 3 2 33 10 1 9 8 9 55 0 8 7 8 55 0 6 5 1 5 6 1 53 11 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 2 39 0 2 2 16 2 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (68,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (89,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 76 74 68 66 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
83 78 2 8 9 31 1 5 4 2 33 0 8 9 0 9 8 0 53 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 9 12 34 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcommaaccent;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-10 16:18:20 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (262,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 96 94 89 88 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 18 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
4 17 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
4 17 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 34 0 15 15 16 1 0 39 0 16 16 17 16 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Tcommaaccent;
unicode = 354;
},
{
glyphname = tcommaaccent;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (25,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (142,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 55 53 48 47 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 16 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 6 0 6 55 0 3 1 2 1 3 2 53 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 34 0 7 7 8 1 0 39 0 8 8 17 8 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 496;
}
);
note = tcommaaccent;
unicode = 355;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-10 16:18:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (162,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 102 100 96 94 88 86 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
103 98 2 15 16 1 33 17 1 16 15 16 55 0 15 1 15 55 4 18 2 0 5 6 5 0 45 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
103 98 2 15 16 1 33 17 1 16 15 16 55 0 15 1 15 55 4 18 2 0 5 6 5 0 6 53 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 9
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (25,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (0,2);
ref = t;
},
{
alignment = -1;
pos = (432,0);
ref = caronvertical;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 63 62 46 45 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 10 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 56 values pushed */
0 6 8 0 8 6 0 53 0 3 1 2 1 3 2 53 0 7 7 8 1 0 39 0 8 8 12 34 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 2 39 0 4 4 13 4 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 661;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Tbar;
kernRight = T;
lastChange = "2025-07-10 16:18:18 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,463,qs),
(577,476,o),
(547,476,qs),
(443,476,l),
(443,693,l),
(616,693,o),
(649,635,qs),
(655,625,o),
(662,601,o),
(667,570,o),
(680,570,qs),
(692,570,o),
(699,604,qs),
(704,629,o),
(717,675,qs),
(725,700,o),
(742,752,o),
(756,786,o),
(748,791,qs),
(745,792,o),
(739,793,o),
(731,793,o),
(719,784,o),
(688,762,o),
(657,762,qs),
(163,762,ls),
(149,762,o),
(118,764,o),
(110,773,qs),
(95,793,o),
(85,793,qs),
(79,793,o),
(69,783,o),
(61,730,o),
(49,697,qs),
(40,672,ls),
(35,660,o),
(28,634,o),
(24,606,o),
(24,572,o),
(36,572,qs),
(42,572,o),
(66,599,o),
(101,635,o),
(147,669,o),
(183,678,o),
(189,680,qs),
(232,694,o),
(329,694,q),
(329,476,l),
(193,476,ls),
(145,476,o),
(145,451,qs),
(145,423,o),
(191,423,qs),
(329,423,l),
(329,164,ls),
(329,99,o),
(318,72,qs),
(313,56,o),
(291,41,o),
(265,41,o),
(249,43,qs),
(244,43,o),
(234,45,o),
(218,45,o),
(208,30,o),
(208,12,o),
(221,3,qs),
(227,-1,o),
(246,-7,o),
(286,-7,o),
(328,-4,qs),
(356,-1,ls),
(370,0,o),
(386,0,qs),
(402,0,o),
(416,-1,qs),
(444,-4,ls),
(458,-5,o),
(491,-7,o),
(536,-7,o),
(551,3,qs),
(558,8,o),
(563,19,o),
(563,30,o),
(554,45,o),
(539,45,o),
(526,43,o),
(512,41,qs),
(506,41,o),
(481,41,o),
(459,57,o),
(443,100,o),
(443,164,qs),
(443,423,l),
(538,423,ls),
(586,423,o),
(586,448,qs),
(586,458,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
97 95 94 93 89 87 78 77 75 71 69 67 59 57 51 50 49 47 45 43 38 37 34 33 28 27 24 22 20 19 18 17 12 11 8 7 3 1 19 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
16 1 12 11 10 11 12 45 18 1 10 9 1 0 1 10 0 1 0 41 15 1 13 13 18 34 17 1 11 11 14 1 0 39 0 14 14 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
16 1 12 11 10 11 12 10 53 18 1 10 9 1 0 1 10 0 1 0 41 15 1 13 13 18 34 17 1 11 11 14 1 0 39 0 14 14 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(393,328,qs),
(242,328,l),
(242,439,l),
(396,439,ls),
(455,439,o),
(455,474,qs),
(455,507,o),
(392,507,qs),
(351,507,o),
(292,505,qs),
(242,503,l),
(242,682,ls),
(242,733,o),
(191,733,o),
(183,682,qs),
(170,599,o),
(146,562,qs),
(133,540,o),
(95,513,o),
(50,502,o),
(25,483,o),
(25,471,qs),
(25,439,o),
(77,439,qs),
(125,439,l),
(125,328,l),
(71,328,ls),
(24,328,o),
(24,307,qs),
(24,282,o),
(70,282,qs),
(125,282,l),
(125,141,ls),
(125,99,o),
(137,69,qs),
(169,-12,o),
(291,-12,qs),
(388,-12,o),
(446,66,qs),
(464,91,o),
(464,111,qs),
(464,118,o),
(455,131,o),
(447,131,qs),
(424,131,o),
(408,109,qs),
(371,60,o),
(323,60,qs),
(303,60,o),
(287,68,qs),
(242,92,o),
(242,166,qs),
(242,282,l),
(394,282,ls),
(440,282,o),
(440,304,qs),
(440,313,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
56 54 53 51 49 45 43 42 33 31 30 28 26 24 20 18 13 11 9 7 3 1 11 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 16 3 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 55 0 2 0 1 0 2 1 53 10 1 5 4 1 0 2 5 0 1 0 41 9 1 6 6 8 1 0 39 0 8 8 15 34 0 1 1 3 1 2 39 0 3 3 13 3 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 496;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:19:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (214,0);
ref = tilde.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
102 101 2 1 126 124 122 120 116 115 113 111 108 106 101 128 102 128 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 29 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 92 values pushed */
49 1 9 2 3 1 17 9 2 33 25 28 2 21 0 23 22 21 23 1 0 41 0 26 24 1 22 4 26 22 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 27 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 27 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (102,0);
ref = tilde;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
105 104 102 100 96 94 90 89 87 85 82 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
36 1 5 1 1 1 11 5 2 33 20 1 18 0 16 15 18 16 1 0 41 0 19 17 1 15 3 19 15 1 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (200,0);
ref = macron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
101 101 2 1 101 114 101 112 108 105 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 80 values pushed */
49 1 9 2 3 1 17 9 2 33 0 21 24 1 22 4 21 22 1 0 41 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 23 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 23 4 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (107,0);
ref = macron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
82 81 80 79 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 17 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
36 1 5 1 1 1 11 5 2 33 0 15 0 16 3 15 16 0 0 41 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (199,0);
ref = breve.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 118 116 114 112 108 106 103 102 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 26 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 93 values pushed */
115 101 2 22 21 49 1 9 2 3 1 17 9 3 33 23 1 21 22 22 21 43 0 24 24 22 1 0 39 0 22 22 14 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 92 values pushed */
115 101 2 22 21 49 1 9 2 3 1 17 9 3 33 23 1 21 22 21 55 0 24 24 22 1 0 39 0 22 22 14 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (72,0);
ref = breve;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
98 96 93 91 87 85 81 80 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
95 79 2 16 15 36 1 5 1 1 1 11 5 3 33 0 16 0 18 3 16 18 1 2 41 17 1 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (287,0);
ref = ring.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
102 101 2 1 127 126 119 118 111 109 101 116 102 116 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 27 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 92 values pushed */
49 1 9 2 3 1 17 9 2 33 0 22 0 24 23 22 24 1 0 41 26 1 21 21 23 1 0 39 0 23 23 18 34 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (161,0);
ref = ring;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
80 79 101 100 97 96 88 86 79 94 80 94 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 20 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
36 1 5 1 1 1 11 5 2 33 0 17 19 1 15 3 17 15 1 0 41 0 18 18 16 1 0 39 0 16 16 18 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:30 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (27,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (313,0);
ref = hungarumlaut.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
120 119 102 101 2 1 128 127 119 136 120 136 110 109 101 118 102 118 98 97 96 94 89 88 87 86 79 78 77 76 71 70 67 66 62 61 56 55 54 53 48 47 40 39 38 37 32 31 28 26 22 21 16 15 14 13 6 4 1 100 2 99 28 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 87 values pushed */
112 1 22 21 49 1 9 2 3 1 17 9 3 33 27 23 26 3 21 22 21 55 24 1 22 4 22 55 16 15 11 10 8 7 3 7 2 2 4 1 0 39 14 13 12 6 5 5 4 4 12 34 0 9 9 0 1 0 39 20 19 1 25 4 0 0 13 34 18 1 17 17 0 1 0 39 20 19 1 25 4 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (7,0);
ref = hungarumlaut;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
96 95 80 79 102 101 95 110 96 110 86 85 79 94 80 94 78 75 74 71 66 65 64 63 56 53 51 50 49 48 43 42 41 40 35 33 26 23 22 19 14 13 12 11 4 2 21 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 81 values pushed */
104 1 16 15 36 1 5 1 1 1 11 5 3 33 18 1 16 15 3 15 16 3 53 20 17 19 3 15 15 12 34 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-10 16:18:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(640,-138,qs),
(640,-162,o),
(647,-179,qs),
(669,-227,o),
(736,-227,qs),
(844,-226,ls),
(851,-226,o),
(860,-218,o),
(860,-212,qs),
(860,-200,o),
(840,-195,q),
(808,-189,o),
(785,-178,qs),
(720,-147,o),
(720,-94,qs),
(720,-45,o),
(746,0,q),
(752,0,o),
(762,-1,qs),
(781,-2,ls),
(791,-3,o),
(811,-4,o),
(844,-4,o),
(857,7,qs),
(863,11,o),
(867,22,o),
(867,33,o),
(857,44,o),
(845,44,o),
(831,39,o),
(803,39,o),
(783,51,o),
(770,89,o),
(770,173,qs),
(769,608,ls),
(769,636,o),
(771,657,qs),
(776,722,o),
(823,722,q),
(855,719,l),
(874,719,o),
(874,741,qs),
(874,750,o),
(864,759,qs),
(859,763,o),
(841,770,o),
(805,770,o),
(765,766,qs),
(739,764,ls),
(727,762,o),
(696,762,o),
(683,764,qs),
(657,766,ls),
(644,767,o),
(614,770,o),
(571,770,o),
(558,759,qs),
(553,754,o),
(548,744,o),
(548,732,o),
(558,719,o),
(567,719,q),
(599,722,l),
(616,722,o),
(637,709,o),
(653,671,o),
(653,608,qs),
(653,135,l),
(567,62,o),
(361,62,o),
(306,111,qs),
(248,165,o),
(248,263,qs),
(248,608,ls),
(248,672,o),
(257,695,qs),
(269,722,o),
(302,722,q),
(334,719,l),
(343,719,o),
(353,732,o),
(353,750,o),
(343,759,qs),
(338,763,o),
(320,770,o),
(283,770,o),
(244,766,qs),
(218,764,ls),
(205,762,o),
(190,762,qs),
(175,762,o),
(162,764,qs),
(136,766,ls),
(123,767,o),
(92,770,o),
(49,770,o),
(37,759,qs),
(32,754,o),
(27,744,o),
(27,732,o),
(37,719,o),
(46,719,q),
(78,722,l),
(95,722,o),
(116,709,o),
(133,671,o),
(133,608,qs),
(133,272,ls),
(133,138,o),
(213,64,qs),
(293,-11,o),
(443,-11,qs),
(556,-11,o),
(654,56,q),
(657,5,o),
(680,-1,q),
(640,-63,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
112 109 99 98 97 96 94 93 88 87 86 85 78 77 76 75 70 69 66 65 61 60 55 54 53 52 47 46 39 38 37 36 31 30 27 25 21 20 15 14 13 12 5 3 22 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 0 21 0 21 56 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 16 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 16 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 13 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 13 34 0 21 21 17 21 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
48 1 8 1 2 1 16 8 0 1 0 16 3 33 0 21 0 21 56 15 14 10 9 7 6 2 7 1 1 3 1 0 39 13 12 11 5 4 5 3 3 12 34 0 8 8 0 1 0 39 20 19 18 3 0 0 16 34 17 1 16 16 0 1 2 39 20 19 18 3 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
lastChange = "2025-07-10 15:48:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,3,q),
(449,-58,o),
(449,-137,qs),
(449,-162,o),
(457,-179,qs),
(479,-226,o),
(545,-226,qs),
(653,-225,ls),
(660,-225,o),
(669,-217,o),
(669,-212,qs),
(669,-207,o),
(662,-198,o),
(618,-188,o),
(595,-178,qs),
(530,-147,o),
(530,-93,qs),
(530,-46,o),
(557,0,q),
(566,0,ls),
(572,0,o),
(590,-1,o),
(612,-3,o),
(633,-4,o),
(667,-4,o),
(680,7,qs),
(686,11,o),
(690,22,o),
(690,33,o),
(680,46,o),
(667,46,o),
(658,43,o),
(626,43,o),
(606,53,o),
(593,88,o),
(593,173,qs),
(593,428,ls),
(593,474,o),
(584,491,qs),
(579,502,o),
(558,502,q),
(504,500,ls),
(499,500,o),
(480,501,o),
(469,502,qs),
(447,503,ls),
(437,504,o),
(403,504,o),
(391,493,qs),
(385,488,o),
(381,477,o),
(381,467,o),
(391,453,o),
(402,453,o),
(413,457,o),
(444,457,o),
(464,447,o),
(477,413,o),
(477,330,qs),
(477,133,l),
(413,67,o),
(348,67,qs),
(325,67,o),
(305,74,qs),
(242,96,o),
(242,181,qs),
(242,418,ls),
(242,442,o),
(240,458,qs),
(236,502,o),
(207,502,q),
(153,500,ls),
(147,500,o),
(128,501,o),
(107,502,o),
(85,504,o),
(53,504,o),
(39,493,qs),
(34,488,o),
(29,477,o),
(29,467,o),
(40,453,o),
(51,453,o),
(62,457,o),
(93,457,o),
(113,447,o),
(126,412,o),
(126,330,qs),
(126,161,ls),
(126,86,o),
(182,37,qs),
(237,-12,o),
(321,-12,qs),
(409,-12,o),
(478,54,q),
(480,15,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
89 86 76 74 73 70 65 64 63 62 55 52 50 49 48 47 42 41 40 39 34 32 25 22 21 18 13 12 11 10 3 1 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 13 34 12 1 11 11 0 1 0 39 14 13 2 0 0 13 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
35 1 5 1 0 1 11 5 94 1 0 11 3 33 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 14 13 2 0 0 16 34 12 1 11 11 0 1 0 39 14 13 2 0 0 16 34 0 15 15 17 15 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
35 1 5 1 0 1 11 5 94 1 14 11 3 33 0 15 0 15 56 7 6 2 3 1 1 3 1 0 39 10 9 8 4 4 3 3 15 34 0 5 5 0 1 0 39 13 1 0 0 13 34 0 14 14 13 34 12 1 11 11 0 1 0 39 13 1 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-10 16:20:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (367,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
131 130 2 1 145 143 136 135 130 149 131 149 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
133 1 24 26 125 47 2 8 1 2 33 0 26 24 26 55 25 28 2 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 27 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
133 1 24 26 125 47 2 8 1 2 33 0 26 24 26 55 25 28 2 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 27 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1167;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (287,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
1 1 131 130 125 123 116 115 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 26 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
134 1 22 23 53 10 2 9 0 2 33 24 1 22 23 4 23 22 4 53 16 1 9 0 1 0 9 1 53 0 23 23 18 34 25 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
134 1 22 23 53 10 2 9 0 2 33 24 1 22 23 4 23 22 4 53 16 1 9 0 1 0 9 1 53 0 23 23 18 34 25 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-10 16:20:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (161,0);
ref = circumflex.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
85 84 3 1 99 97 90 89 84 103 85 103 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
87 1 19 21 66 44 5 3 1 0 2 33 20 23 2 19 21 11 21 19 11 53 0 21 21 3 1 0 39 6 5 4 3 3 3 13 34 15 14 13 12 10 9 22 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (148,0);
ref = circumflex;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
1 1 93 92 87 85 78 77 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 21 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
96 1 17 18 55 28 27 3 2 0 2 33 19 1 17 18 6 18 17 6 53 0 2 0 3 0 2 3 53 0 18 18 18 34 20 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-10 16:20:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (116,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
3 1 110 109 102 101 94 93 86 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 24 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 62 values pushed */
66 44 5 3 1 0 1 33 22 1 20 21 1 19 11 20 19 1 0 41 15 14 13 12 10 9 23 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 6
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
kernLeft = Z;
kernRight = Z;
lastChange = "2025-07-10 16:20:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (218,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 59 58 50 49 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 11 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
0 9 8 9 55 0 8 3 8 55 0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 10 1 0 0 13 0 35 10
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (40,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (135,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 64 63 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 9 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 0 2 3 0 53 8 1 0 6 2 0 6 51 0 7 7 12 34 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 0 2 3 0 53 8 1 0 6 2 0 6 51 0 7 7 12 34 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
kernLeft = Z;
kernRight = Z;
lastChange = "2025-07-10 16:20:32 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (241,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
49 48 2 1 58 56 48 64 49 64 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 65 values pushed */
0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 9 11 1 8 3 9 8 1 0 41 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 10 1 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (40,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (149,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
55 54 2 1 64 62 54 70 55 70 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 10 1 7 4 8 7 1 0 41 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 10 1 7 4 8 7 1 0 41 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 8
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
kernLeft = Z;
kernRight = Z;
lastChange = "2025-07-10 16:20:28 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (55,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (160,0);
ref = caron.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 65 63 59 57 51 49 45 44 41 39 35 33 29 26 24 22 16 14 8 6 1 47 2 47 12 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 72 values pushed */
66 61 2 8 9 1 33 10 1 9 8 9 55 0 8 3 8 55 0 2 1 6 1 2 6 53 0 6 7 1 6 7 51 0 7 5 1 7 5 51 0 3 3 18 34 0 1 1 4 1 0 39 0 4 4 12 34 0 5 5 0 1 2 39 11 1 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (40,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (77,0);
ref = caron;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 65 63 57 55 47 45 40 37 34 32 26 24 20 18 11 9 1 53 2 53 10 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
72 67 2 7 8 1 33 0 7 8 4 8 7 4 53 0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 8 12 34 0 4 4 15 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
72 67 2 7 8 1 33 0 7 8 4 8 7 4 53 0 3 2 0 2 3 0 53 9 1 0 6 2 0 6 51 0 8 8 12 34 0 4 4 21 34 0 2 2 5 1 0 39 0 5 5 15 34 0 6 6 1 1 2 39 0 1 1 13 1 35 10
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = florin;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,484,qs),
(485,507,o),
(403,507,o),
(364,505,q),
(370,572,ls),
(373,605,o),
(384,720,o),
(409,766,qs),
(420,788,o),
(449,810,o),
(484,810,o),
(502,786,qs),
(512,773,o),
(529,734,o),
(540,693,o),
(547,686,o),
(553,686,qs),
(567,686,o),
(569,703,qs),
(581,845,l),
(526,858,o),
(437,858,o),
(398,842,qs),
(273,789,o),
(253,557,qs),
(248,504,l),
(170,507,o),
(169,507,qs),
(122,507,o),
(122,458,o),
(173,458,qs),
(194,458,o),
(245,460,q),
(212,93,ls),
(204,14,o),
(178,-34,qs),
(167,-56,o),
(139,-79,o),
(104,-79,o),
(86,-55,qs),
(76,-42,o),
(59,-3,o),
(48,38,o),
(41,45,o),
(34,45,qs),
(22,45,o),
(20,27,qs),
(8,-114,l),
(60,-127,o),
(107,-127,qs),
(201,-127,o),
(258,-59,qs),
(322,18,o),
(335,174,qs),
(360,460,l),
(416,458,o),
(425,458,qs),
(485,458,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 0 55 53 47 46 41 39 36 35 31 28 27 24 19 18 13 11 8 6 0 57 2 57 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 64 values pushed */
37 1 8 6 9 1 1 3 2 33 0 7 8 5 8 7 5 53 0 2 0 3 0 2 3 53 0 3 0 1 3 1 1 0 40 0 8 8 6 1 0 39 0 6 6 14 34 4 10 2 0 0 5 1 0 39 9 1 5 5 15 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = florin;
unicode = 402;
},
{
glyphname = AEacute;
kernLeft = AE;
kernRight = E;
lastChange = "2025-07-10 16:03:16 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (336,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
133 132 1 1 149 148 140 139 132 137 133 137 1 131 1 131 128 127 126 125 118 116 110 109 108 107 102 101 99 96 92 91 84 81 77 74 69 67 60 58 54 51 47 44 40 38 32 30 27 26 21 20 19 18 11 10 9 8 5 4 3 2 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 139 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 27 23 2 17 17 13 17 35 17
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 122 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 27 23 17 16 1 5 0 0 13 0 35 15
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 139 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 2 20 15 2 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 22 21 19 18 14 3 6 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 14 3 6 2 2 17 1 0 39 27 23 2 17 17 13 17 35 17
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 151 values pushed */
134 1 8 9 65 64 2 12 13 2 33 0 26 25 26 55 0 25 6 25 55 0 8 9 11 9 8 11 53 0 15 20 14 20 15 14 53 0 10 0 13 12 10 13 1 0 41 28 1 24 0 20 15 24 20 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 0 14 14 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 0 1 0 39 16 1 2 0 0 13 34 22 21 19 18 3 5 2 2 17 1 0 39 27 23 2 17 17 13 17 35 19
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = aeacute;
kernLeft = a;
lastChange = "2025-07-10 16:20:43 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (85,0);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (14,0);
ref = ae;
},
{
alignment = -1;
pos = (357,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
107 106 96 95 92 91 81 79 71 70 65 64 61 60 49 47 43 41 36 35 32 30 24 23 19 17 13 11 4 3 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 15 34 0 3 3 4 1 0 39 7 6 2 4 4 15 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 16 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 94 values pushed */
44 1 3 2 72 14 2 12 1 90 57 2 9 12 88 1 2 8 9 4 33 0 9 12 8 12 9 8 53 0 1 0 12 9 1 12 1 0 41 0 14 14 12 34 0 5 5 15 34 11 1 2 2 4 1 0 39 7 6 2 4 4 21 34 0 3 3 4 1 0 39 7 6 2 4 4 21 34 13 1 8 8 0 1 2 39 10 1 0 0 13 0 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 982;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = Scommaaccent;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-10 16:18:17 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (75,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (226,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 78 76 71 70 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = Scommaaccent;
unicode = 536;
},
{
glyphname = scommaaccent;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (68,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (190,2);
ref = commaaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 76 74 69 68 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 34 0 8 8 9 1 0 39 0 9 9 17 9 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = scommaaccent;
unicode = 537;
},
{
glyphname = dotlessj;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,-252,o),
(63,-252,qs),
(166,-252,o),
(223,-183,qs),
(287,-105,o),
(287,51,qs),
(287,438,ls),
(287,479,o),
(279,493,qs),
(275,500,o),
(256,500,q),
(174,495,l),
(155,495,o),
(131,498,qs),
(123,499,o),
(109,500,o),
(85,500,o),
(76,491,qs),
(73,487,o),
(70,479,o),
(70,465,o),
(89,456,o),
(140,441,o),
(149,429,qs),
(170,397,o),
(170,311,qs),
(170,51,ls),
(170,-93,o),
(146,-147,qs),
(135,-173,o),
(104,-189,o),
(62,-189,o),
(38,-170,qs),
(22,-158,o),
(3,-117,qs),
(-9,-95,o),
(-23,-95,qs),
(-36,-95,o),
(-36,-110,qs),
(-36,-238,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
38 36 29 26 23 22 8 7 3 1 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
39 1 4 1 1 33 0 0 2 1 2 0 1 53 3 1 2 2 15 34 0 1 1 4 1 2 39 0 4 4 17 4 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = dotlessj;
unicode = 567;
},
{
glyphname = circumflex;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,600,ls),
(365,588,o),
(375,589,q),
(391,589,o),
(389,609,qs),
(388,618,o),
(381,625,q),
(273,747,ls),
(240,787,o),
(221,787,qs),
(212,787,o),
(194,781,o),
(165,747,qs),
(57,625,ls),
(48,614,o),
(48,604,qs),
(48,599,o),
(55,589,o),
(75,589,o),
(91,600,qs),
(218,682,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
17 16 11 9 2 1 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
20 1 0 1 1 33 2 1 0 1 0 56 0 1 1 18 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,744,o),
(382,757,q),
(382,771,o),
(364,770,qs),
(353,769,o),
(340,761,qs),
(214,680,l),
(89,761,ls),
(74,771,o),
(63,771,qs),
(47,771,o),
(47,754,qs),
(47,747,o),
(56,736,qs),
(162,616,ls),
(172,604,o),
(197,578,o),
(216,578,qs),
(234,578,o),
(268,616,qs),
(374,736,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
11 9 3 1 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 19 values pushed */
18 13 2 0 1 1 33 0 0 1 0 56 0 1 1 12 1 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,690,qs),
(127,591,o),
(248,591,qs),
(402,591,o),
(453,762,q),
(445,764,ls),
(402,777,o),
(379,777,qs),
(361,777,o),
(346,771,q),
(342,741,o),
(333,717,qs),
(304,639,o),
(248,639,qs),
(229,639,o),
(213,648,qs),
(163,678,o),
(149,771,q),
(130,777,o),
(87,777,o),
(43,761,q),
(55,722,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 17 14 12 8 6 2 1 4 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
16 0 2 1 0 1 33 0 1 0 3 1 3 1 2 40 2 1 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,608,qs),
(224,632,o),
(224,659,qs),
(224,691,o),
(204,715,qs),
(182,743,o),
(145,743,qs),
(108,743,o),
(84,718,qs),
(73,707,o),
(61,677,o),
(61,632,o),
(81,608,qs),
(90,597,o),
(121,583,o),
(141,583,qs),
(178,583,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 10 8 0 16 1 16 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,618,qs),
(272,648,o),
(272,694,qs),
(272,741,o),
(239,771,qs),
(207,802,o),
(159,802,qs),
(112,802,o),
(80,771,qs),
(47,741,o),
(47,694,qs),
(47,648,o),
(80,618,qs),
(112,588,o),
(159,588,qs),
(207,588,o)
);
},
{
closed = 1;
nodes = (
(104,694,qs),
(104,718,o),
(118,734,qs),
(125,742,o),
(146,751,o),
(184,751,o),
(214,719,o),
(214,667,o),
(182,638,o),
(147,638,o),
(127,647,o),
(104,672,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 0 22 21 18 17 9 7 0 15 1 15 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 2 4 1 0 2 0 1 0 40 0 3 3 1 1 0 39 0 1 1 18 3 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,-226,qs),
(322,-225,ls),
(329,-225,o),
(338,-217,o),
(338,-212,qs),
(338,-200,o),
(318,-194,q),
(257,-182,o),
(227,-153,qs),
(212,-140,o),
(199,-109,o),
(199,-70,o),
(205,-49,qs),
(223,15,o),
(255,36,q),
(212,50,l),
(171,22,o),
(146,-25,qs),
(133,-50,o),
(118,-106,o),
(118,-162,o),
(126,-179,qs),
(147,-226,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
22 19 1 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
7 6 2 0 31 0 0 0 46 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
7 6 2 0 31 0 0 0 17 0 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
7 6 2 0 31 0 0 0 46 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,744,o),
(372,744,o),
(357,723,qs),
(336,692,o),
(313,692,qs),
(301,692,o),
(273,705,qs),
(247,719,ls),
(232,727,o),
(192,745,o),
(164,745,qs),
(125,745,o),
(90,708,qs),
(48,663,o),
(48,627,qs),
(48,611,o),
(73,611,o),
(87,631,qs),
(109,663,o),
(130,663,qs),
(143,663,o),
(170,649,qs),
(193,638,ls),
(245,609,o),
(282,609,qs),
(331,609,o),
(371,667,qs),
(397,703,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
26 25 23 21 17 15 11 10 8 6 3 1 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 35 values pushed */
0 4 1 0 4 1 0 38 5 1 3 0 1 0 3 1 1 0 41 0 4 4 0 1 0 39 2 1 0 4 0 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,758,qs),
(494,753,o),
(455,704,qs),
(377,607,ls),
(369,597,o),
(369,590,qs),
(369,585,o),
(376,575,o),
(393,575,o),
(406,583,qs),
(512,642,ls),
(579,677,o),
(579,718,qs),
(579,760,o),
(544,760,qs),
(534,760,o)
);
},
{
closed = 1;
nodes = (
(274,748,qs),
(258,739,o),
(230,704,qs),
(153,607,ls),
(144,596,o),
(145,590,qs),
(145,585,o),
(152,575,o),
(167,575,o),
(182,583,qs),
(287,642,ls),
(354,677,o),
(354,718,qs),
(354,760,o),
(320,760,qs),
(297,760,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
17 16 1 0 23 22 16 31 17 31 7 6 0 15 1 15 6 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 22 values pushed */
25 1 1 0 1 33 3 1 1 0 1 56 5 2 4 3 0 0 12 0 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Delta;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,qs),
(749,0,ls),
(764,0,o),
(778,14,o),
(778,32,o),
(774,39,q),
(423,763,ls),
(416,777,o),
(391,777,o),
(383,764,q),
(58,28,l),
(59,28,l),
(55,21,o),
(55,15,qs),
(55,0,o)
);
},
{
closed = 1;
nodes = (
(385,627,l),
(648,63,l),
(142,63,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 15 15 17 15 17 14 11 6 5 3 2 5 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 34 values pushed */
16 1 3 1 1 33 0 0 3 2 3 0 2 53 0 1 1 12 34 4 1 3 3 2 1 2 39 0 2 2 13 2 35 5
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = Delta;
unicode = (916,8710);
},
{
glyphname = Omega;
lastChange = "2025-07-10 16:17:48 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,80,o),
(437,86,qs),
(370,125,o),
(322,205,qs),
(297,246,o),
(266,349,o),
(266,489,o),
(283,545,qs),
(333,707,o),
(502,707,qs),
(599,707,o),
(659,644,qs),
(690,610,o),
(728,503,o),
(728,368,o),
(717,316,qs),
(683,160,o),
(569,86,qs),
(560,80,o),
(548,50,o),
(548,36,qs),
(548,4,o),
(567,0,q),
(902,0,l),
(900,181,ls),
(900,199,o),
(878,199,qs),
(867,199,o),
(847,190,o),
(846,185,qs),
(830,95,l),
(671,95,l),
(739,154,o),
(787,247,qs),
(840,349,o),
(840,437,qs),
(840,595,o),
(746,686,qs),
(656,773,o),
(508,773,qs),
(366,773,o),
(266,683,qs),
(154,583,o),
(154,409,qs),
(154,310,o),
(208,220,qs),
(255,141,o),
(323,95,q),
(165,95,l),
(148,185,ls),
(147,190,o),
(128,199,o),
(117,199,qs),
(95,199,o),
(95,181,qs),
(95,0,l),
(439,0,l),
(459,4,o),
(459,34,qs),
(459,49,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
50 48 36 35 33 31 28 27 20 18 11 10 7 5 3 2 8 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 1 7 2 2 1 45 0 7 7 3 1 0 39 0 3 3 12 34 4 1 2 2 0 0 2 39 6 1 0 0 13 0 35 5
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
5 1 1 7 2 7 1 2 53 0 7 7 3 1 0 39 0 3 3 12 34 4 1 2 2 0 0 2 39 6 1 0 0 13 0 35 5
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 997;
}
);
note = Omega;
unicode = (937,8486);
},
{
glyphname = pi;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,6,qs),
(310,21,o),
(318,68,qs),
(396,508,l),
(580,507,l),
(535,181,ls),
(529,135,o),
(529,89,qs),
(530,37,o),
(591,-21,o),
(653,-21,qs),
(675,-21,o),
(690,-13,qs),
(699,-8,o),
(711,7,o),
(711,28,o),
(707,35,qs),
(695,55,o),
(662,58,qs),
(625,62,o),
(625,102,qs),
(625,114,o),
(628,139,qs),
(636,203,ls),
(641,244,o),
(676,506,q),
(706,506,ls),
(745,506,o),
(770,513,qs),
(831,528,o),
(831,568,qs),
(831,592,o),
(793,592,qs),
(774,592,o),
(735,583,qs),
(714,578,o),
(696,578,qs),
(302,580,ls),
(258,580,o),
(222,576,qs),
(199,573,o),
(156,564,o),
(122,549,o),
(101,527,o),
(101,496,o),
(108,479,qs),
(113,469,o),
(128,455,o),
(156,455,o),
(177,468,qs),
(195,480,o),
(195,480,q),
(236,507,o),
(311,508,q),
(227,104,l),
(217,42,o),
(217,28,qs),
(217,-16,o),
(257,-16,qs),
(281,-16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
1 0 55 54 49 47 33 31 27 25 23 20 11 10 6 5 0 59 1 59 9 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 0 1 2 0 53 4 1 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 13 0 35 3
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 0 1 2 0 53 4 1 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 16 0 35 3
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 3 4 55 0 2 1 0 1 2 0 53 0 3 7 5 2 1 2 3 1 1 0 41 6 8 2 0 0 13 0 35 4
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = pi;
unicode = 960;
},
{
glyphname = uni1E02;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = B;
},
{
alignment = -1;
pos = (247,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
82 81 3 1 91 89 81 97 82 97 75 74 70 69 64 62 57 56 52 50 35 34 30 29 26 25 20 19 18 17 10 9 8 7 1 54 3 54 17 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 95 values pushed */
55 1 9 10 43 1 11 9 71 1 12 11 3 33 0 14 16 1 13 5 14 13 1 0 41 0 9 0 11 12 9 11 1 0 41 4 1 3 3 5 1 0 39 7 6 2 5 5 12 34 0 10 10 5 1 0 39 7 6 2 5 5 12 34 0 12 12 0 1 0 39 8 15 2 0 0 13 34 2 1 1 1 0 1 2 39 8 15 2 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = uni1E02;
unicode = 7682;
},
{
glyphname = uni1E03;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = b;
},
{
alignment = -1;
pos = (271,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
66 65 2 1 75 73 65 81 66 81 61 59 53 51 46 45 42 40 34 32 26 25 24 22 19 18 1 49 2 49 13 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 13 0 35 8
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
31 1 8 4 64 50 2 7 8 2 33 0 10 12 1 9 4 10 9 1 0 41 0 8 8 4 1 0 39 0 4 4 15 34 0 6 6 1 1 0 39 3 2 2 1 1 14 34 0 7 7 0 1 0 39 5 11 2 0 0 16 0 35 8
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = uni1E03;
unicode = 7683;
},
{
glyphname = uni1E0A;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (323,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
70 69 1 1 79 77 69 85 70 85 65 63 56 55 1 51 1 51 44 43 42 41 36 35 32 31 28 26 18 16 13 12 9 8 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 13 34 8 1 7 7 4 1 0 39 6 5 2 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 13 15 1 12 1 13 12 1 0 41 11 14 9 3 0 0 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 5 2 4 4 16 34 8 1 7 7 4 1 0 39 6 5 2 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
0 13 15 1 12 1 13 12 1 0 41 14 9 2 0 0 1 1 0 39 3 2 2 1 1 12 34 0 11 11 1 1 0 39 3 2 2 1 1 12 34 0 10 10 4 1 0 39 6 1 4 4 13 34 0 5 5 13 34 8 1 7 7 4 1 0 39 6 1 4 4 13 4 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
note = uni1E0A;
unicode = 7690;
},
{
glyphname = uni1E0B;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (39,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (57,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
70 69 79 77 69 85 70 85 68 67 61 59 56 53 52 51 50 48 43 42 41 40 32 31 27 26 23 22 12 10 3 2 15 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 13 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
13 1 10 1 58 57 2 11 10 1 1 0 5 3 33 0 13 14 1 12 1 13 12 1 0 41 4 3 2 2 2 14 34 0 10 10 1 1 0 39 0 1 1 15 34 0 11 11 0 1 0 39 9 8 7 3 0 0 16 34 6 1 5 5 0 1 0 39 9 8 7 3 0 0 16 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni1E0B;
unicode = 7691;
},
{
glyphname = uni1E1E;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (51,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = F;
},
{
alignment = -1;
pos = (219,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
91 90 3 1 100 98 90 106 91 106 84 81 75 72 68 66 62 60 56 53 49 46 42 40 35 33 31 29 24 23 22 21 14 13 12 11 6 5 1 89 3 89 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 86 values pushed */
0 8 9 11 9 8 11 53 0 16 18 1 15 6 16 15 1 0 41 0 10 0 13 12 10 13 1 0 41 5 1 4 4 6 1 0 39 7 1 6 6 12 34 0 9 9 6 1 0 39 7 1 6 6 12 34 0 12 12 11 1 0 39 0 11 11 15 34 14 3 2 2 2 0 1 0 39 1 17 2 0 0 13 0 35 11
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = uni1E1E;
unicode = 7710;
},
{
glyphname = uni1E1F;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (44,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (60,247);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
76 75 2 1 85 83 75 91 76 91 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 16 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 73 values pushed */
30 1 12 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 0 13 15 1 12 7 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 11 10 2 3 1 1 0 1 0 39 14 1 0 0 13 0 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = uni1E1F;
unicode = 7711;
},
{
glyphname = uni1E40;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (29,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = M;
},
{
alignment = -1;
pos = (370,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
109 108 1 1 118 116 108 124 109 124 1 107 1 107 102 101 100 99 90 88 82 81 80 79 74 73 70 68 65 64 58 57 56 55 48 47 46 45 40 39 37 36 34 33 31 29 15 14 13 12 7 6 3 2 25 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 70 values pushed */
95 86 35 3 17 8 1 33 0 17 8 2 8 17 2 53 0 22 24 1 21 4 22 21 1 0 41 9 1 8 8 4 1 0 39 7 6 5 3 4 4 12 34 19 18 16 15 11 10 3 7 2 2 0 1 2 39 23 20 14 13 12 1 6 0 0 13 0 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1033;
}
);
note = uni1E40;
unicode = 7744;
},
{
glyphname = uni1E41;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = m;
},
{
alignment = -1;
pos = (413,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
128 127 2 1 137 135 127 143 128 143 123 122 121 119 116 115 114 113 108 106 100 99 98 97 93 90 82 81 80 79 72 70 64 63 62 61 58 55 47 46 45 44 36 35 30 28 24 23 21 20 8 7 6 5 1 126 2 126 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
27 22 2 12 3 109 32 2 1 12 2 33 0 24 26 1 23 3 24 23 1 0 41 18 1 12 12 3 1 0 39 6 5 4 3 3 3 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 25 5 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
27 22 2 12 3 109 32 2 1 12 2 33 0 24 26 1 23 5 24 23 1 0 41 4 1 3 3 15 34 18 1 12 12 5 1 0 39 6 1 5 5 15 34 20 19 17 16 14 13 11 10 8 7 2 11 1 1 0 1 2 39 22 21 15 9 25 5 0 0 13 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1112;
}
);
note = uni1E41;
unicode = 7745;
},
{
glyphname = uni1E56;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (61,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = P;
},
{
alignment = -1;
pos = (263,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
80 79 67 66 2 1 89 87 79 95 80 95 72 70 66 78 67 78 58 57 52 51 48 47 42 41 40 39 32 31 30 29 20 18 13 12 8 7 1 65 2 65 18 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 79 values pushed */
69 1 12 11 3 1 0 12 2 33 0 14 17 1 13 8 14 13 1 0 41 0 12 15 1 0 1 12 0 1 0 41 7 1 6 6 8 1 0 39 10 9 2 8 8 12 34 16 1 11 11 8 1 0 39 10 9 2 8 8 12 34 5 4 2 3 1 1 3 1 0 39 0 3 3 13 3 35 9
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = uni1E56;
unicode = 7766;
},
{
glyphname = uni1E57;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = p;
},
{
alignment = -1;
pos = (203,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
77 76 1 1 86 84 76 92 77 92 72 70 63 62 1 58 1 58 54 50 45 44 43 42 37 35 28 27 22 21 20 19 18 17 3 2 16 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 1 13 12 1 0 41 0 11 11 1 1 0 39 4 3 2 3 1 1 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 8
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 4 13 12 1 0 41 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 16 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
26 1 11 1 75 59 2 10 11 38 1 5 10 3 33 0 13 15 1 12 4 13 12 1 0 41 3 2 2 1 1 15 34 0 11 11 4 1 0 39 0 4 4 15 34 0 10 10 5 1 0 39 0 5 5 13 34 14 9 7 6 4 0 0 8 1 2 39 0 8 8 17 8 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = uni1E57;
unicode = 7767;
},
{
glyphname = uni1E60;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (75,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (207,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
68 67 2 1 77 75 67 83 68 83 61 59 54 53 51 49 37 35 31 29 25 23 9 7 1 66 2 66 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 5 9 8 1 0 41 0 1 1 5 1 0 39 7 1 5 5 12 34 0 4 4 2 1 0 39 0 2 2 13 2 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 72 values pushed */
27 1 4 3 1 33 0 6 5 1 5 6 1 53 10 1 0 1 3 1 0 3 53 0 3 4 1 3 4 51 0 9 11 1 8 7 9 8 1 0 41 0 7 7 18 34 0 1 1 5 1 0 39 0 5 5 12 34 0 4 4 2 1 0 39 0 2 2 16 2 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = uni1E60;
unicode = 7776;
},
{
glyphname = uni1E61;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (68,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (162,0);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
66 65 2 1 75 73 65 81 66 81 61 60 58 56 42 40 36 34 28 26 13 11 9 7 1 64 2 64 12 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 16 3 35 10
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
31 1 5 4 1 33 0 7 0 2 0 7 2 53 0 4 1 5 1 4 5 53 0 9 11 1 8 0 9 8 1 0 41 0 2 2 0 1 0 39 6 10 2 0 0 15 34 0 1 1 0 1 0 39 6 10 2 0 0 15 34 0 5 5 3 1 0 39 0 3 3 13 3 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni1E61;
unicode = 7777;
},
{
glyphname = uni1E6A;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (243,0);
ref = dotaccent.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
86 85 2 1 95 93 85 101 86 101 78 77 72 71 68 67 62 61 58 56 54 53 52 51 46 45 42 41 37 36 32 30 21 20 18 14 12 10 1 84 2 84 19 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
4 17 2 0 5 6 5 0 45 0 16 18 1 15 1 16 15 1 0 41 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
4 17 2 0 5 6 5 0 6 53 0 16 18 1 15 1 16 15 1 0 41 3 1 1 1 18 34 14 1 5 5 2 1 0 39 0 2 2 12 34 13 12 7 3 6 6 8 1 0 39 11 10 9 3 8 8 13 8 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = uni1E6A;
unicode = 7786;
},
{
glyphname = uni1E6B;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (25,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (35,145);
ref = dotaccent;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
45 44 2 1 54 52 44 60 45 60 39 38 29 27 23 21 16 14 12 10 6 4 1 43 2 41 11 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 6 8 43 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 16 4 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 8 55 0 3 1 2 1 3 2 53 0 6 10 1 7 0 6 7 1 2 41 5 1 1 1 0 1 0 39 9 1 0 0 15 34 0 2 2 4 1 0 39 0 4 4 13 4 35 7
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 496;
}
);
note = uni1E6B;
unicode = 7787;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-10 16:20:10 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (425,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
2 1 141 140 133 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1167;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (346,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 1 117 116 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
53 10 2 9 0 1 33 0 22 4 22 55 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
53 10 2 9 0 1 33 0 22 4 22 55 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-10 16:20:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (425,0);
ref = acute.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
2 1 141 140 132 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 13 0 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
125 47 2 8 1 1 33 0 25 24 25 55 0 24 3 24 55 0 8 1 0 1 8 0 53 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 26 2 0 0 16 0 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1167;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (346,0);
ref = acute;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
1 1 124 123 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 22 1 0 39 0 22 22 12 34 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 77 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 22 1 0 39 0 22 22 12 34 23 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-10 16:20:09 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (321,0);
ref = dieresis.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
2 1 156 155 148 147 140 139 132 131 120 118 105 104 103 102 97 96 95 94 93 92 89 88 87 86 72 71 70 69 66 64 62 61 60 59 54 53 52 51 45 43 36 35 34 33 30 28 26 25 24 23 18 17 16 15 1 129 2 129 29 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
125 47 2 8 1 1 33 0 8 1 0 1 8 0 53 27 1 25 26 1 24 3 25 24 1 0 41 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 28 2 0 0 13 0 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
125 47 2 8 1 1 33 0 8 1 0 1 8 0 53 27 1 25 26 1 24 3 25 24 1 0 41 22 21 17 16 15 14 10 9 7 6 2 11 1 1 3 1 0 39 20 19 18 13 12 11 5 4 8 3 3 12 34 23 28 2 0 0 16 0 35 6
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1167;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (266,0);
ref = dieresis;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
1 1 140 139 132 131 124 123 116 115 1 113 1 113 110 109 107 104 99 98 97 96 90 88 82 81 80 79 71 69 64 63 60 59 57 56 51 49 42 41 40 39 34 33 32 31 28 26 23 22 21 20 15 13 3 2 27 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 25 1 23 24 1 22 4 23 22 1 0 41 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 24 1 22 22 23 1 0 39 25 1 23 23 12 34 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 7
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
53 10 2 9 0 1 33 16 1 9 0 1 0 9 1 53 25 1 23 24 1 22 4 23 22 1 0 41 26 21 18 17 15 14 11 10 8 7 3 2 12 0 0 4 1 0 39 20 19 13 12 6 5 6 4 4 15 34 0 1 1 16 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-10 16:20:16 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (220,0);
ref = grave.cap;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 95 94 87 85 80 79 78 77 76 75 72 71 70 69 62 61 60 59 56 52 49 48 47 46 39 38 35 34 28 27 26 24 23 22 20 19 14 13 10 9 1 83 3 83 22 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
66 44 5 3 1 0 1 33 0 20 19 20 55 0 19 11 19 55 15 14 13 12 10 9 21 7 0 0 11 1 0 39 18 17 16 3 11 11 12 34 8 7 2 3 1 1 3 1 0 39 6 5 4 3 3 3 13 3 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = .ttfautohint;
},
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (207,0);
ref = grave;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 79 78 1 75 1 75 72 71 70 69 68 67 64 63 62 61 51 50 49 48 43 42 41 40 39 38 35 34 33 32 23 22 18 16 9 8 3 2 19 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 60 values pushed */
55 28 27 3 2 0 1 33 0 17 6 17 55 0 2 0 3 0 2 3 53 18 16 12 11 10 9 5 4 8 0 0 6 1 0 39 15 14 13 8 7 5 6 6 15 34 0 3 3 1 1 2 39 0 1 1 17 1 35 7
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = endash;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(634,268,ls),
(651,268,o),
(671,292,o),
(671,327,o),
(650,350,o),
(633,350,qs),
(31,350,ls),
(14,350,o),
(-7,327,o),
(-7,292,o),
(13,268,o),
(30,268,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(801,268,ls),
(818,268,o),
(839,292,o),
(839,327,o),
(817,350,o),
(800,350,qs),
(31,350,ls),
(14,350,o),
(-8,327,o),
(-8,292,o),
(12,268,o),
(29,268,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 9 6 3 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 2 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,477,qs),
(210,495,o),
(210,544,qs),
(210,598,o),
(155,614,qs),
(129,622,o),
(117,636,o),
(117,668,o),
(134,688,qs),
(143,699,o),
(168,719,o),
(209,737,o),
(209,752,qs),
(209,775,o),
(183,775,qs),
(136,775,o),
(42,652,o),
(42,589,qs),
(42,531,o),
(92,471,o),
(135,471,qs),
(152,471,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 7 5 0 21 1 21 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 15 values pushed */
2 1 0 0 1 1 0 39 0 1 1 12 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (43,478);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (254,1253);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 8 6 1 22 2 22 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 15 values pushed */
0 1 1 0 1 0 39 2 1 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (83,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (294,582);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 8 6 1 22 2 22 3 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 1 0 1 0 38 2 1 0 0 1 1 0 39 0 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (52,471);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (9,0);
ref = quoteleft;
},
{
alignment = -1;
pos = (249,0);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 18 values pushed */
5 2 4 3 0 0 1 1 0 39 3 1 1 1 12 0 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,478);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (259,1253);
ref = quoteleft;
},
{
alignment = -1;
angle = 180;
pos = (498,1253);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 18 values pushed */
3 1 1 1 0 1 0 39 5 2 4 3 0 0 12 1 35 2
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (48,0);
ref = .ttfautohint;
},
{
alignment = -1;
angle = 180;
pos = (259,581);
ref = quoteleft;
},
{
alignment = -1;
angle = 180;
pos = (498,581);
ref = quoteleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 23 2 1 30 28 23 44 24 44 8 6 1 22 2 22 6 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 30 values pushed */
5 2 4 3 0 1 1 0 1 0 38 5 2 4 3 0 0 1 1 0 39 3 1 1 0 1 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,806,ls),
(245,823,o),
(226,845,o),
(209,845,qs),
(192,845,o),
(172,824,o),
(172,807,qs),
(172,576,l),
(98,576,ls),
(60,576,o),
(60,540,qs),
(60,523,o),
(80,503,o),
(97,503,qs),
(172,503,l),
(172,-100,ls),
(172,-117,o),
(192,-141,o),
(225,-141,o),
(245,-119,o),
(245,-101,qs),
(245,503,l),
(320,503,ls),
(337,503,o),
(358,523,o),
(358,540,qs),
(358,576,o),
(319,576,qs),
(245,576,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
1 0 25 23 20 18 15 13 10 9 6 4 0 28 1 28 7 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 27 values pushed */
4 6 2 0 3 1 1 2 0 1 1 0 41 0 2 2 5 1 0 39 0 5 5 14 2 35 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 418;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,806,ls),
(245,823,o),
(226,845,o),
(209,845,qs),
(192,845,o),
(172,824,o),
(172,807,qs),
(172,576,l),
(98,576,ls),
(60,576,o),
(60,540,qs),
(60,523,o),
(80,503,o),
(97,503,qs),
(172,503,l),
(172,254,l),
(98,254,ls),
(81,254,o),
(60,236,o),
(60,202,o),
(80,182,o),
(97,182,qs),
(172,182,l),
(172,-100,ls),
(172,-117,o),
(192,-141,o),
(225,-141,o),
(245,-119,o),
(245,-101,qs),
(245,182,l),
(320,182,ls),
(337,182,o),
(358,202,o),
(358,236,o),
(336,254,o),
(319,254,qs),
(245,254,l),
(245,503,l),
(320,503,ls),
(337,503,o),
(358,523,o),
(358,540,qs),
(358,576,o),
(319,576,qs),
(245,576,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
1 0 41 39 36 34 31 29 28 26 23 21 18 17 14 12 9 7 6 4 0 44 1 44 11 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 39 values pushed */
8 10 2 0 7 1 1 2 0 1 1 0 41 6 1 2 5 1 3 4 2 3 1 0 41 0 4 4 9 1 0 39 0 9 9 14 4 35 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 418;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,241,qs),
(276,273,o),
(276,309,qs),
(276,352,o),
(250,384,qs),
(220,420,o),
(170,420,qs),
(122,420,o),
(90,387,qs),
(60,354,o),
(60,311,qs),
(60,271,o),
(85,242,qs),
(99,227,o),
(140,207,o),
(166,207,qs),
(215,207,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 0 10 8 0 16 1 16 3 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 1 0 38 0 1 1 0 1 0 39 2 1 0 1 0 1 0 36 3
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
lastChange = "2025-07-10 16:22:20 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(813,-12,o),
(870,-12,o),
(894,14,qs),
(916,38,o),
(916,65,qs),
(916,97,o),
(896,121,qs),
(873,149,o),
(836,149,qs),
(800,149,o),
(775,124,qs),
(765,113,o),
(752,83,o),
(752,54,o),
(762,26,o),
(782,3,o)
);
},
{
closed = 1;
nodes = (
(479,-12,o),
(536,-12,o),
(560,14,qs),
(582,38,o),
(582,65,qs),
(582,97,o),
(562,121,qs),
(539,149,o),
(502,149,qs),
(466,149,o),
(441,124,qs),
(431,113,o),
(418,83,o),
(418,54,o),
(428,26,o),
(448,3,o)
);
},
{
closed = 1;
nodes = (
(145,-12,o),
(202,-12,o),
(226,14,qs),
(248,38,o),
(248,65,qs),
(248,97,o),
(228,121,qs),
(205,149,o),
(168,149,qs),
(132,149,o),
(107,124,qs),
(97,113,o),
(84,83,o),
(84,54,o),
(94,26,o),
(114,3,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
46 45 39 37 30 29 23 21 14 13 7 5 6 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 2 2 0 0 1 1 0 39 5 3 2 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1002;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,22,qs),
(741,686,ls),
(764,715,o),
(764,735,qs),
(764,745,o),
(747,760,o),
(720,760,o),
(697,740,o),
(679,716,qs),
(180,76,ls),
(148,35,o),
(148,15,qs),
(148,3,o),
(164,-12,o),
(198,-12,o)
);
},
{
closed = 1;
nodes = (
(366,460,qs),
(421,509,o),
(421,592,qs),
(421,664,o),
(372,711,qs),
(321,760,o),
(238,760,qs),
(161,760,o),
(107,708,qs),
(54,658,o),
(54,586,qs),
(54,517,o),
(95,470,qs),
(116,445,o),
(187,413,o),
(231,413,qs),
(314,413,o)
);
},
{
closed = 1;
nodes = (
(150,581,o),
(150,641,o),
(155,660,qs),
(172,716,o),
(221,716,qs),
(262,716,o),
(293,671,qs),
(308,649,o),
(325,589,o),
(325,501,o),
(306,477,qs),
(296,465,o),
(272,455,o),
(239,455,o),
(200,479,o),
(169,522,o)
);
},
{
closed = 1;
nodes = (
(967,46,qs),
(1016,-12,o),
(1111,-12,qs),
(1187,-12,o),
(1238,35,qs),
(1293,85,o),
(1293,167,qs),
(1293,240,o),
(1244,286,qs),
(1193,335,o),
(1110,335,qs),
(1033,335,o),
(979,284,qs),
(954,260,o),
(926,197,o),
(926,165,qs),
(926,93,o)
);
},
{
closed = 1;
nodes = (
(534,46,qs),
(584,-12,o),
(679,-12,qs),
(754,-12,o),
(806,35,qs),
(861,85,o),
(861,167,qs),
(861,239,o),
(812,286,qs),
(761,335,o),
(678,335,qs),
(601,335,o),
(547,284,qs),
(522,260,o),
(494,197,o),
(494,165,qs),
(494,93,o)
);
},
{
closed = 1;
nodes = (
(1094,292,qs),
(1134,292,o),
(1165,246,qs),
(1180,225,o),
(1197,165,o),
(1197,101,o),
(1192,82,qs),
(1177,30,o),
(1132,30,qs),
(1089,30,o),
(1057,76,qs),
(1041,98,o),
(1022,156,o),
(1022,216,o),
(1027,235,qs),
(1044,292,o)
);
},
{
closed = 1;
nodes = (
(661,292,qs),
(702,292,o),
(733,246,qs),
(748,225,o),
(765,165,o),
(765,101,o),
(760,82,qs),
(745,30,o),
(700,30,qs),
(657,30,o),
(624,76,qs),
(609,98,o),
(590,156,o),
(590,216,o),
(596,235,qs),
(612,292,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
16 15 0 0 113 111 105 103 97 95 89 87 79 77 71 69 62 60 54 52 43 41 34 33 25 23 15 31 16 31 0 14 0 14 8 7 16 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 16 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 16 1 35 6
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 15 1 2 6 4 2 1 0 41 8 1 6 13 1 11 10 6 11 1 0 41 0 5 5 0 1 0 39 3 1 0 0 12 34 12 1 10 10 1 1 2 39 9 7 14 3 1 1 13 1 35 6
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 1347;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,98,o),
(263,63,o),
(270,51,o),
(275,44,o),
(279,42,o),
(290,42,o),
(305,49,o),
(305,59,qs),
(305,86,o),
(262,162,qs),
(236,207,o),
(187,260,q),
(235,312,o),
(271,375,qs),
(288,403,o),
(305,449,o),
(305,471,o),
(290,479,o),
(277,479,o),
(266,465,qs),
(255,450,ls),
(219,399,o),
(149,343,qs),
(121,320,o),
(69,285,o),
(38,268,o),
(38,260,qs),
(38,255,o),
(45,249,o),
(69,236,o),
(119,200,o),
(175,152,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
26 25 13 12 2 8
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
19 1 1 0 1 33 0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (39,42);
ref = .ttfautohint;
},
{
alignment = -1;
pos = (345,0);
ref = guilsinglleft;
scale = (-0.9999,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
27 26 14 13 2 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 29 values pushed */
20 1 1 0 1 33 0 0 1 1 0 1 0 38 0 0 0 1 1 0 39 0 1 0 1 1 0 36 4
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,23,qs),
(748,700,ls),
(771,730,o),
(771,750,qs),
(771,760,o),
(753,775,o),
(726,775,o),
(702,754,o),
(684,730,qs),
(175,77,ls),
(142,35,o),
(142,15,qs),
(142,4,o),
(158,-12,o),
(193,-12,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 14 0 14 8 7 3 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 16 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 16 1 35 2
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 34 2 1 1 1 13 1 35 2
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,128,o),
(223,58,qs),
(328,-11,o),
(487,-11,qs),
(603,-11,o),
(690,60,qs),
(730,91,o),
(776,170,o),
(776,210,qs),
(776,219,o),
(767,225,qs),
(763,227,o),
(754,229,o),
(748,229,o),
(743,227,qs),
(727,217,o),
(727,198,q),
(701,133,o),
(640,93,qs),
(581,55,o),
(509,55,qs),
(406,55,o),
(333,100,qs),
(249,151,o),
(215,257,q),
(531,257,ls),
(552,257,o),
(575,274,o),
(575,296,qs),
(575,315,o),
(531,315,qs),
(205,315,l),
(199,343,o),
(199,420,o),
(201,438,q),
(591,438,ls),
(613,438,o),
(625,445,qs),
(634,450,o),
(634,470,qs),
(634,495,o),
(590,495,qs),
(205,495,l),
(219,590,o),
(282,649,qs),
(313,678,o),
(399,712,o),
(525,712,o),
(613,672,qs),
(703,631,o),
(740,578,qs),
(748,566,o),
(758,566,qs),
(772,566,o),
(772,604,o),
(762,640,qs),
(755,667,ls),
(747,694,o),
(747,750,qs),
(747,771,o),
(740,782,o),
(724,782,o),
(696,753,qs),
(679,736,o),
(665,736,qs),
(658,736,o),
(643,742,qs),
(560,775,o),
(469,775,qs),
(322,775,o),
(217,693,qs),
(117,617,o),
(88,495,q),
(46,495,ls),
(22,495,o),
(11,488,qs),
(1,483,o),
(1,463,qs),
(1,438,o),
(35,438,qs),
(78,438,l),
(76,424,o),
(75,405,qs),
(74,388,ls),
(74,379,o),
(74,374,qs),
(74,368,o),
(74,360,qs),
(75,338,ls),
(76,323,o),
(77,315,q),
(46,315,ls),
(22,315,o),
(11,309,qs),
(1,304,o),
(1,283,qs),
(1,257,o),
(35,257,qs),
(86,257,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
1 0 95 93 85 84 78 76 73 71 68 66 63 61 57 55 51 50 46 44 37 36 34 32 30 28 25 23 19 17 7 5 0 98 1 98 17 8
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 13 15 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 16 15 35 11
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 13 15 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 84 values pushed */
81 1 13 14 1 33 0 5 4 8 4 5 8 53 0 7 8 3 8 7 3 53 0 14 0 13 0 14 13 53 11 1 1 12 16 2 0 14 1 0 1 0 41 0 8 8 4 1 0 39 6 1 4 4 12 34 10 1 2 2 3 1 0 39 9 1 3 3 15 34 0 13 13 15 1 0 39 0 15 15 16 15 35 11
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 830;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = trademark;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,256,o),
(437,269,o),
(437,274,qs),
(437,287,o),
(423,287,q),
(392,284,l),
(375,284,o),
(367,294,q),
(356,315,o),
(356,366,qs),
(356,713,l),
(419,712,o),
(448,698,qs),
(465,690,o),
(487,662,o),
(495,627,o),
(504,627,qs),
(510,627,o),
(521,668,qs),
(532,705,ls),
(538,724,o),
(545,740,q),
(544,740,l),
(546,744,l),
(552,756,ls),
(554,761,o),
(554,765,qs),
(554,777,o),
(542,777,qs),
(538,777,o),
(534,773,qs),
(520,763,ls),
(510,756,o),
(489,756,qs),
(163,756,ls),
(143,756,o),
(137,757,qs),
(133,758,o),
(129,761,o),
(118,776,o),
(110,777,qs),
(103,777,o),
(92,738,qs),
(88,722,o),
(81,690,o),
(68,649,o),
(68,637,qs),
(68,628,o),
(77,628,qs),
(82,628,o),
(91,638,qs),
(143,696,o),
(178,704,qs),
(208,711,ls),
(221,714,o),
(235,714,qs),
(257,714,l),
(257,366,ls),
(257,313,o),
(245,293,q),
(238,284,o),
(221,284,q),
(189,287,l),
(176,287,o),
(176,274,qs),
(176,268,o),
(192,256,o),
(211,256,qs),
(250,256,ls),
(274,256,o),
(306,261,q),
(402,256,l)
);
},
{
closed = 1;
nodes = (
(788,256,o),
(801,269,o),
(801,274,qs),
(801,286,o),
(788,286,q),
(766,284,l),
(744,284,o),
(735,308,qs),
(730,322,o),
(730,366,qs),
(730,597,l),
(895,347,ls),
(902,334,o),
(912,322,o),
(917,322,qs),
(928,322,o),
(938,341,qs),
(1104,653,l),
(1104,366,ls),
(1104,313,o),
(1093,293,q),
(1085,284,o),
(1068,284,q),
(1047,286,l),
(1033,286,o),
(1033,274,qs),
(1033,268,o),
(1047,256,o),
(1065,256,qs),
(1101,256,ls),
(1123,256,o),
(1154,261,q),
(1232,256,l),
(1251,256,o),
(1264,269,o),
(1264,274,qs),
(1264,286,o),
(1251,286,q),
(1229,284,l),
(1222,284,o),
(1216,286,qs),
(1193,294,o),
(1193,366,qs),
(1193,650,ls),
(1193,696,o),
(1209,734,o),
(1229,734,q),
(1251,731,l),
(1264,731,o),
(1264,743,qs),
(1264,749,o),
(1251,761,o),
(1232,761,q),
(1108,755,l),
(942,446,l),
(736,757,l),
(621,761,ls),
(602,761,o),
(602,750,qs),
(602,745,o),
(607,742,qs),
(621,732,ls),
(629,727,o),
(650,709,o),
(683,663,o),
(683,630,qs),
(683,366,ls),
(683,313,o),
(671,293,q),
(664,284,o),
(647,284,q),
(625,286,l),
(612,286,o),
(612,274,qs),
(612,256,o),
(656,256,qs),
(686,256,o),
(704,261,q),
(769,256,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
92 73 29 1 2 13
CALL[ ]	/* CallFunction */";
};
width = 1333;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = partialdiff;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,54,qs),
(237,-12,o),
(338,-12,qs),
(413,-12,o),
(480,60,qs),
(546,129,o),
(586,241,qs),
(627,358,o),
(627,484,qs),
(627,651,o),
(561,744,qs),
(528,789,o),
(433,836,o),
(316,836,o),
(271,811,qs),
(250,799,o),
(218,769,o),
(197,737,o),
(187,706,o),
(187,683,o),
(198,671,o),
(205,671,qs),
(223,671,o),
(233,694,qs),
(250,733,o),
(319,780,o),
(367,780,qs),
(438,780,o),
(480,706,qs),
(526,626,o),
(526,479,qs),
(526,459,l),
(475,546,o),
(359,546,qs),
(302,546,o),
(249,505,qs),
(223,485,o),
(178,429,o),
(146,360,o),
(128,279,o),
(128,229,qs),
(128,119,o)
);
},
{
closed = 1;
nodes = (
(368,473,o),
(418,473,o),
(438,464,qs),
(500,438,o),
(518,351,q),
(500,210,o),
(446,125,qs),
(395,44,o),
(332,44,qs),
(273,44,o),
(248,80,qs),
(236,97,o),
(226,147,o),
(226,252,o),
(259,363,o),
(309,436,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
55 47 27 37 2 13
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = product;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,-54,o),
(272,-39,o),
(255,3,o),
(255,69,qs),
(255,649,ls),
(255,662,o),
(279,680,o),
(307,680,qs),
(527,680,ls),
(554,680,o),
(579,662,o),
(579,649,qs),
(579,69,ls),
(579,39,o),
(577,16,qs),
(569,-54,o),
(524,-54,q),
(492,-51,l),
(474,-51,o),
(474,-67,qs),
(474,-77,o),
(483,-83,qs),
(488,-87,o),
(506,-92,o),
(546,-92,o),
(592,-87,qs),
(616,-84,o),
(636,-84,qs),
(656,-84,o),
(691,-88,qs),
(704,-89,o),
(733,-92,o),
(766,-92,o),
(774,-89,qs),
(798,-83,o),
(798,-67,qs),
(798,-51,o),
(780,-51,q),
(748,-54,l),
(731,-54,o),
(710,-39,o),
(693,4,o),
(693,69,qs),
(693,593,ls),
(693,657,o),
(703,683,qs),
(715,711,o),
(748,711,q),
(780,708,l),
(788,708,o),
(798,721,o),
(798,739,o),
(788,748,qs),
(783,752,o),
(766,758,o),
(730,758,o),
(691,755,qs),
(678,753,o),
(651,751,o),
(636,751,qs),
(198,751,ls),
(183,751,o),
(170,752,qs),
(145,755,ls),
(131,756,o),
(101,758,o),
(58,758,o),
(45,748,qs),
(40,743,o),
(36,732,o),
(36,721,o),
(45,708,o),
(55,708,q),
(86,711,l),
(103,711,o),
(125,697,o),
(141,657,o),
(141,593,qs),
(141,69,ls),
(141,4,o),
(130,-23,qs),
(119,-54,o),
(86,-54,q),
(55,-51,l),
(36,-51,o),
(36,-68,qs),
(36,-77,o),
(45,-83,qs),
(50,-87,o),
(68,-92,o),
(110,-92,o),
(155,-87,qs),
(179,-84,o),
(198,-84,qs),
(217,-84,o),
(252,-88,qs),
(265,-89,o),
(295,-92,o),
(328,-92,o),
(336,-89,qs),
(360,-83,o),
(360,-67,qs),
(360,-51,o),
(341,-51,q),
(310,-54,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
37 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(653,-4,o),
(683,59,q),
(683,59,l),
(697,87,o),
(697,113,o),
(684,113,qs),
(676,113,o),
(659,96,qs),
(588,21,o),
(539,-6,qs),
(491,-32,o),
(424,-32,qs),
(197,-32,l),
(423,368,l),
(425,369,l),
(424,370,l),
(426,373,l),
(422,372,l),
(200,708,l),
(407,708,ls),
(474,708,o),
(516,694,q),
(557,677,o),
(614,627,qs),
(635,609,o),
(662,583,o),
(667,583,qs),
(678,583,o),
(678,611,o),
(662,662,qs),
(655,684,o),
(641,737,o),
(633,783,o),
(623,793,o),
(607,793,o),
(592,773,q),
(590,771,o),
(575,762,o),
(539,762,qs),
(67,762,ls),
(35,762,o),
(35,746,qs),
(35,734,o),
(50,715,q),
(282,362,l),
(47,-31,l),
(31,-53,o),
(31,-63,qs),
(31,-84,o),
(68,-84,qs),
(634,-84,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
15 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,273,l),
(474,345,l),
(111,345,l),
(110,273,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
0 2 1 13
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = radical;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,307,l),
(381,-175,l),
(463,-175,l),
(812,922,ls),
(816,936,o),
(816,956,qs),
(816,967,o),
(796,986,o),
(769,986,o),
(749,972,o),
(742,950,qs),
(431,-68,l),
(430,-69,l),
(266,354,l),
(69,354,ls),
(48,354,o),
(27,339,o),
(27,322,o),
(48,307,o),
(68,307,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 16 1 13
CALL[ ]	/* CallFunction */";
};
width = 804;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,199,qs),
(441,248,l),
(483,199,ls),
(563,108,o),
(642,108,qs),
(721,108,o),
(783,170,qs),
(847,233,o),
(847,317,qs),
(847,391,o),
(799,445,qs),
(745,505,o),
(654,505,qs),
(584,505,o),
(508,415,qs),
(468,366,l),
(426,414,ls),
(346,505,o),
(268,505,qs),
(188,505,o),
(128,443,qs),
(67,380,o),
(67,297,qs),
(67,223,o),
(118,168,qs),
(143,142,o),
(217,108,o),
(293,108,o),
(317,121,qs),
(361,144,o)
);
},
{
closed = 1;
nodes = (
(643,427,qs),
(692,427,o),
(727,387,qs),
(760,349,o),
(760,298,qs),
(760,250,o),
(737,221,qs),
(726,206,o),
(691,188,o),
(643,188,o),
(620,200,qs),
(558,233,o),
(498,323,q),
(579,427,o)
);
},
{
closed = 1;
nodes = (
(188,223,qs),
(149,265,o),
(149,315,qs),
(149,360,o),
(177,389,qs),
(206,420,o),
(252,420,qs),
(292,420,o),
(341,375,qs),
(368,352,o),
(411,289,q),
(375,238,o),
(349,214,qs),
(332,199,o),
(295,181,o),
(273,181,qs),
(226,181,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 8 values pushed */
52 44 41 33 9 1 3 13
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,-163,o),
(106,-196,qs),
(157,-238,o),
(211,-238,qs),
(307,-238,o),
(370,-159,qs),
(399,-124,o),
(432,-29,o),
(432,99,o),
(406,249,o),
(376,399,o),
(351,549,o),
(351,710,o),
(371,747,qs),
(382,767,o),
(420,786,o),
(477,786,o),
(500,767,qs),
(509,759,o),
(525,741,o),
(540,725,o),
(555,714,o),
(571,714,o),
(577,717,qs),
(602,725,o),
(602,749,qs),
(602,787,o),
(558,819,qs),
(517,850,o),
(465,850,qs),
(368,850,o),
(303,773,qs),
(273,738,o),
(239,646,o),
(239,519,o),
(265,368,o),
(295,218,o),
(321,68,o),
(321,-101,o),
(307,-130,qs),
(298,-150,o),
(260,-169,o),
(186,-169,o),
(155,-130,qs),
(140,-111,ls),
(133,-103,o),
(117,-91,o),
(90,-91,o),
(65,-113,o),
(65,-131,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
18 44 1 13
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,454,qs),
(270,446,o),
(321,409,qs),
(410,344,o),
(471,344,qs),
(583,344,o),
(637,498,q),
(573,528,l),
(553,471,o),
(527,444,qs),
(515,432,o),
(490,421,o),
(466,421,o),
(454,423,qs),
(420,429,o),
(355,477,qs),
(264,544,o),
(199,544,qs),
(146,544,o),
(98,498,qs),
(53,455,o),
(28,390,q),
(93,358,l),
(139,466,o),
(197,466,qs),
(226,466,o)
);
},
{
closed = 1;
nodes = (
(248,216,qs),
(261,210,o),
(295,188,o),
(344,152,o),
(363,140,qs),
(421,103,o),
(471,103,qs),
(582,103,o),
(637,257,q),
(573,288,l),
(553,230,o),
(527,203,qs),
(515,191,o),
(490,180,o),
(452,180,o),
(429,190,qs),
(415,196,o),
(380,218,o),
(329,255,o),
(308,269,qs),
(250,303,o),
(199,303,qs),
(146,303,o),
(98,257,qs),
(53,214,o),
(28,149,q),
(93,118,l),
(139,226,o),
(197,226,qs),
(226,226,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
32 47 6 19 2 13
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,191,l),
(213,122,ls),
(207,106,o),
(204,97,qs),
(199,80,ls),
(197,74,o),
(196,67,o),
(196,51,o),
(211,30,o),
(255,30,o),
(269,64,qs),
(314,191,l),
(559,191,l),
(559,264,l),
(341,264,l),
(374,354,l),
(559,354,l),
(559,426,l),
(400,426,l),
(433,516,ls),
(444,542,o),
(444,563,qs),
(444,572,o),
(429,588,o),
(408,588,o),
(401,586,qs),
(380,578,o),
(359,521,qs),
(324,426,l),
(68,426,l),
(68,354,l),
(298,354,l),
(265,264,l),
(68,264,l),
(68,191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
9 24 1 13
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,158,l),
(412,247,l),
(186,387,l),
(412,525,l),
(412,611,l),
(67,402,l),
(67,370,l)
);
},
{
closed = 1;
nodes = (
(434,0,l),
(433,73,l),
(70,73,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
7 9 1 5 2 13
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,370,l),
(434,402,l),
(88,611,l),
(88,525,l),
(315,387,l),
(88,247,l),
(88,158,l)
);
},
{
closed = 1;
nodes = (
(431,0,l),
(430,73,l),
(68,73,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
7 9 3 6 2 13
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-7,o),
(369,-7,o),
(391,0,q),
(604,333,l),
(606,339,o),
(606,349,qs),
(606,354,o),
(604,361,q),
(396,702,ls),
(386,717,o),
(338,717,qs),
(311,717,o),
(299,702,q),
(88,374,l),
(85,367,o),
(85,346,o),
(89,339,qs),
(295,0,l)
);
},
{
closed = 1;
nodes = (
(176,366,l),
(341,633,l),
(514,338,l),
(349,70,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
19 21 5 15 2 13
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = commaaccent;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,-139,qs),
(78,-144,o),
(93,-150,o),
(105,-157,o),
(114,-165,o),
(114,-183,o),
(102,-199,o),
(63,-220,o),
(63,-243,o),
(74,-256,o),
(85,-256,qs),
(128,-256,o),
(162,-227,qs),
(179,-211,o),
(200,-167,o),
(200,-89,o),
(159,-44,o),
(95,-44,o),
(75,-62,qs),
(56,-80,o),
(56,-105,qs),
(56,-127,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
3 9 1 13
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = commaaccent;
unicode = 63171;
},
{
glyphname = ff;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (44,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (417,0);
ref = f;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
76 75 2 1 136 135 134 133 129 127 121 119 114 113 108 106 103 102 97 93 88 86 82 81 80 79 75 148 76 148 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 26 9
CALL[ ]	/* CallFunction */
NPUSHB[ ]	/* 77 values pushed */
104 30 2 7 5 98 24 2 3 4 2 33 18 1 6 7 4 7 6 4 53 19 1 7 7 5 1 0 39 17 1 5 5 14 34 21 15 9 3 3 3 4 1 0 39 20 16 8 3 4 4 15 34 23 22 14 13 11 10 2 7 1 1 0 1 0 39 25 12 24 3 0 0 13 0 35 8
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 834;
}
);
note = ff;
unicode = 64256;
},
{
glyphname = fi;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (44,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (417,0);
ref = i;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
93 91 2 1 132 131 130 129 122 121 119 118 103 102 101 100 95 94 91 135 93 135 85 84 77 76 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 24 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
30 1 7 5 120 24 2 3 4 2 33 0 6 13 12 13 6 12 53 0 13 0 12 4 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 19 18 8 3 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 84 values pushed */
30 1 7 5 120 24 2 3 4 2 33 0 6 13 12 13 6 12 53 0 7 7 5 1 0 39 0 5 5 14 34 0 12 12 13 1 0 39 0 13 13 12 34 9 1 3 3 4 1 0 39 19 18 8 3 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 10
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 91 values pushed */
30 1 7 5 24 1 18 4 120 1 3 18 3 33 0 6 13 12 13 6 12 53 0 7 7 5 1 0 39 0 5 5 14 34 0 12 12 13 1 0 39 0 13 13 12 34 19 1 18 18 15 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 11
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
30 1 7 5 24 1 18 4 120 1 3 18 3 33 0 6 13 12 13 6 12 53 0 13 0 12 4 13 12 1 0 41 0 7 7 5 1 0 39 0 5 5 14 34 19 1 18 18 15 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 21 20 17 16 11 10 2 7 1 1 0 1 2 39 15 23 14 22 4 0 0 13 0 35 10
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (44,0);
ref = .ttfautohint;
},
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (417,0);
ref = l;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
75 75 2 1 75 122 75 122 115 114 113 112 109 108 96 95 94 93 88 87 86 85 77 76 62 61 60 59 55 53 47 45 40 39 34 32 29 28 23 19 14 12 8 7 6 5 1 74 2 74 23 9
CALL[ ]	/* CallFunction */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
30 1 17 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 18 2 17 17 14 34 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
30 1 18 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 1 18 18 14 34 0 7 7 5 1 0 39 17 1 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 76 values pushed */
30 1 17 5 24 1 3 4 2 33 0 6 7 4 7 6 4 53 19 18 2 17 17 14 34 0 7 7 5 1 0 39 0 5 5 14 34 9 1 3 3 4 1 0 39 8 1 4 4 15 34 22 20 16 15 12 11 10 2 8 1 1 0 1 0 39 14 13 21 3 0 0 13 0 35 9
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */";
};
width = 801;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = tilde.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,926,qs),
(359,896,o),
(337,896,qs),
(326,896,o),
(289,907,o),
(206,947,o),
(167,947,qs),
(122,947,o),
(88,911,qs),
(47,867,o),
(47,832,qs),
(47,815,o),
(72,815,o),
(86,836,qs),
(105,866,o),
(131,866,qs),
(146,866,o),
(185,853,qs),
(201,847,o),
(285,814,o),
(305,814,qs),
(342,814,o),
(377,851,qs),
(418,895,o),
(418,930,qs),
(418,946,o),
(405,946,qs),
(395,946,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
19 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 468;
}
);
note = tilde.cap;
},
{
glyphname = dieresis.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,874,o),
(473,918,o),
(456,939,qs),
(447,950,o),
(419,963,o),
(368,963,o),
(348,941,qs),
(338,932,o),
(328,904,o),
(328,858,o),
(345,838,qs),
(354,828,o),
(381,814,o),
(417,814,o),
(444,827,o),
(463,848,o)
);
},
{
closed = 1;
nodes = (
(193,874,o),
(193,918,o),
(175,939,qs),
(166,950,o),
(139,963,o),
(88,963,o),
(67,941,qs),
(58,932,o),
(47,904,o),
(47,858,o),
(64,838,qs),
(73,828,o),
(100,814,o),
(136,814,o),
(163,827,o),
(182,848,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
25 17 9 1 2 13
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = dieresis.cap;
},
{
glyphname = ring.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,772,qs),
(288,806,o),
(288,859,qs),
(288,912,o),
(213,981,o),
(160,981,qs),
(106,981,o),
(69,946,qs),
(32,911,o),
(32,859,qs),
(32,807,o),
(69,772,qs),
(87,756,o),
(133,739,o),
(160,739,qs),
(213,739,o)
);
},
{
closed = 1;
nodes = (
(90,845,o),
(90,889,o),
(108,909,qs),
(117,919,o),
(143,930,o),
(174,930,o),
(188,925,qs),
(229,908,o),
(229,859,qs),
(229,826,o),
(209,807,qs),
(199,797,o),
(174,788,o),
(145,788,o),
(120,799,o),
(101,819,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
25 17 8 0 2 13
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = ring.cap;
},
{
glyphname = grave.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,825,o),
(208,837,q),
(131,928,ls),
(104,960,o),
(83,973,qs),
(73,979,o),
(52,984,o),
(23,984,o),
(-2,961,o),
(-2,933,o),
(1,923,qs),
(11,895,o),
(65,867,q),
(180,813,ls),
(196,805,o),
(204,805,qs),
(210,805,o),
(217,815,o),
(217,819,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = grave.cap;
},
{
glyphname = acute.cap;
lastChange = "2025-07-10 16:21:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,902,o),
(315,941,qs),
(315,961,o),
(290,984,o),
(260,984,o),
(250,982,qs),
(220,976,o),
(182,928,qs),
(104,837,l),
(96,826,o),
(96,819,qs),
(96,815,o),
(103,805,o),
(117,805,o),
(133,813,qs),
(248,867,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
10 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = acute.cap;
},
{
glyphname = caron.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,959,o),
(382,972,q),
(382,986,o),
(366,986,qs),
(356,986,o),
(340,976,qs),
(214,900,l),
(89,976,ls),
(73,986,o),
(63,986,qs),
(47,986,o),
(47,970,qs),
(47,962,o),
(56,952,q),
(162,836,ls),
(172,824,o),
(197,798,o),
(216,798,qs),
(234,798,o),
(268,836,qs),
(374,952,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
9 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = caron.cap;
},
{
glyphname = circumflex.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,825,o),
(374,833,qs),
(268,948,ls),
(234,986,o),
(216,986,qs),
(208,986,o),
(189,981,o),
(162,948,q),
(56,833,l),
(47,822,o),
(47,812,qs),
(47,808,o),
(54,798,o),
(71,797,o),
(89,809,qs),
(214,884,l),
(340,809,ls),
(356,798,o),
(368,798,qs),
(382,798,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
13 5 1 13
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = circumflex.cap;
},
{
glyphname = hungarumlaut.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,973,qs),
(334,964,o),
(306,929,qs),
(229,837,ls),
(220,826,o),
(220,820,qs),
(220,815,o),
(227,806,o),
(244,806,o),
(257,813,qs),
(363,867,ls),
(398,887,o),
(419,911,qs),
(430,924,o),
(430,943,qs),
(430,985,o),
(396,985,qs),
(373,985,o)
);
},
{
closed = 1;
nodes = (
(151,983,qs),
(121,978,o),
(82,929,q),
(4,837,ls),
(-4,827,o),
(-4,820,qs),
(-4,815,o),
(3,806,o),
(19,806,o),
(33,813,qs),
(138,872,ls),
(175,893,o),
(194,913,qs),
(206,925,o),
(206,943,qs),
(206,985,o),
(171,985,qs),
(161,985,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 6 values pushed */
18 26 0 8 2 13
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = hungarumlaut.cap;
},
{
glyphname = breve.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,891,qs),
(126,796,o),
(248,796,qs),
(404,796,o),
(453,961,q),
(401,977,o),
(379,977,qs),
(361,977,o),
(346,971,q),
(342,941,o),
(333,917,qs),
(305,843,o),
(248,843,qs),
(210,843,o),
(158,911,o),
(149,971,q),
(130,977,o),
(87,977,o),
(43,961,q),
(55,921,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
1 15 1 13
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = breve.cap;
},
{
glyphname = dotaccent.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,851,qs),
(215,875,o),
(215,902,qs),
(215,935,o),
(195,958,qs),
(173,986,o),
(136,986,qs),
(100,986,o),
(75,961,qs),
(64,950,o),
(52,920,o),
(52,875,o),
(72,852,qs),
(82,840,o),
(112,826,o),
(132,826,qs),
(169,826,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
8 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = dotaccent.cap;
},
{
glyphname = macron.cap;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,871,ls),
(431,871,o),
(450,890,o),
(450,907,qs),
(450,924,o),
(430,942,o),
(413,942,qs),
(86,942,ls),
(69,942,o),
(48,924,o),
(48,907,qs),
(48,890,o),
(68,871,o),
(85,871,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
4 0 1 13
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = macron.cap;
},
{
glyphname = caronvertical;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,613,o),
(189,700,o),
(149,760,o),
(85,760,o),
(63,741,qs),
(52,733,o),
(39,710,o),
(39,666,o),
(46,649,qs),
(51,639,o),
(70,622,o),
(106,611,o),
(117,596,o),
(117,562,o),
(106,544,qs),
(100,534,o),
(80,516,o),
(41,499,o),
(41,483,qs),
(41,462,o),
(90,462,o),
(134,496,o),
(168,548,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 4 values pushed */
18 1 1 13
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = caronvertical;
},
{
glyphname = .ttfautohint;
lastChange = "2025-07-10 15:48:08 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 3 values pushed */
5 1 5
RCVT[ ]	/* ReadCVT */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 250;
}
);
note = .ttfautohint;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "Stoke-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Stoke Regular";
}
);
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright (c) 2011-2012 by Sorkin Type Co with Reserved Font Name Stoke.

This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = descriptions;
values = (
{
language = ENG;
value = "Stoke is a semi-wide high contrast serifed text typeface. Stoke is inspired by letters found on 20th century UK posters showing an odd combination of seriousness of form and whimsical proportions and details. Stoke's low x height make it most suitable for use at medium to large sizes.";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Nicole Fally";
}
);
},
{
key = designerURL;
value = sorkintype.com;
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Nicole Fally";
}
);
},
{
key = manufacturerURL;
value = sorkintype.com;
},
{
key = trademarks;
values = (
{
language = ENG;
value = "Stoke is a trademark of Sorkin Type Co.";
}
);
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 2;
}
